<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>http://netty.io/</id>
<title>Netty</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<link href="http://netty.io/news/index.atom" rel="self" type="application/atom+xml" />
<link href="http://netty.io/" rel="alternate" type="text/html" />
<entry>
<id>http://netty.io/news/2022/10/11/4-1-83-Final.html</id>
<title>Netty 4.1.83.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-10-11T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/10/11/4-1-83-Final.html" rel="alternate" type="text/html" />
<author>
<name>chrisvest</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.83.Final.
This release is a bug-fix release.

The most important changes are:


HTTP/2 header values with invalid characters are now rejected in header validation (#12760)
We now automatically generate conditional meta-data for native-image use, making GraalVM support more reliable (#12794)
Fix a scalability issue caused by instanceof and check-cast checks that lead to false-sharing on the Klass::secondary_super_cache field in the JVM (See JDK-8180450) (#12806)
Made the HTTP/2 HPACK static table implementation faster by using a perfect hash function (#12713)
Fixed a bug in our PEMParser when PEM files have multiple objects, and BouncyCastle is on the classpath (#12864)



Thank...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.83.Final.
This release is a bug-fix release.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP/2 header &lt;em&gt;values&lt;/em&gt; with invalid characters are now rejected in header validation (&lt;a href=&quot;https://github.com/netty/netty/pull/12760&quot;&gt;#12760&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We now automatically generate conditional meta-data for native-image use, making GraalVM support more reliable (&lt;a href=&quot;https://github.com/netty/netty/pull/12794&quot;&gt;#12794&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a scalability issue caused by &lt;code&gt;instanceof&lt;/code&gt; and &lt;code&gt;check-cast&lt;/code&gt; checks that lead to false-sharing on the &lt;code&gt;Klass::secondary_super_cache&lt;/code&gt; field in the JVM (See &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8180450&quot;&gt;JDK-8180450&lt;/a&gt;) (&lt;a href=&quot;https://github.com/netty/netty/pull/12806&quot;&gt;#12806&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Made the HTTP/2 HPACK static table implementation faster by using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_hash_function&quot;&gt;perfect hash function&lt;/a&gt; (&lt;a href=&quot;https://github.com/netty/netty/pull/12713&quot;&gt;#12713&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed a bug in our &lt;code&gt;PEMParser&lt;/code&gt; when PEM files have multiple objects, and BouncyCastle is on the classpath (&lt;a href=&quot;https://github.com/netty/netty/pull/12864&quot;&gt;#12864&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts, and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jchrys&quot;&gt;@jchrys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lfz757077613&quot;&gt;@lfz757077613&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gradinac&quot;&gt;@gradinac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amirhadadi&quot;&gt;@amirhadadi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/j-bahr&quot;&gt;@j-bahr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/horizonzy&quot;&gt;@horizonzy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2022/09/28/5-0-0-Alpha5.html</id>
<title>Netty 5.0.0.Alpha5 released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-09-28T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/09/28/5-0-0-Alpha5.html" rel="alternate" type="text/html" />
<author>
<name>chrisvest</name>
</author>
<summary>
We are happy to announce the forth Alpha release of the upcoming netty 5.0.0. This release removes a lot of code-duplication and API cleanup. Besides this it also adds support for Unix Domain Sockets when using the JDK NIO implementation.

We plan to continue to release often while in Alpha* to allow people to provide feedback easily and get changes in a frequent manner.

These are the major changes since Alpha 5:


The AbstractChannel has been simplified and stream-lined, increasing the body of shared code between the various transports, and making it easier to implement new transports.
There is a new HTTP headers API,...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the forth Alpha release of the upcoming netty 5.0.0. This release removes a lot of code-duplication and API cleanup. Besides this it also adds support for Unix Domain Sockets when using the JDK NIO implementation.&lt;/p&gt;

&lt;p&gt;We plan to continue to release often while in Alpha* to allow people to provide feedback easily and get changes in a frequent manner.&lt;/p&gt;

&lt;p&gt;These are the major changes since Alpha 5:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;AbstractChannel&lt;/code&gt; has been simplified and stream-lined, increasing the body of shared code between the various transports, and making it easier to implement new transports.&lt;/li&gt;
&lt;li&gt;There is a new HTTP headers API, copied from ServiceTalk, that replaces the previous &lt;code&gt;DefaultHeaders&lt;/code&gt; family of APIs.&lt;/li&gt;
&lt;li&gt;With the new HTTP header APIs, we are now also validating HTTP/1 and HTTP/2 headers more strictly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt; leak detection has been improved, and numerous leaks have been fixed as a result.&lt;/li&gt;
&lt;li&gt;Mutation methods have been removed from &lt;code&gt;AsciiString&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Conditional meta-data used by &lt;code&gt;native-image&lt;/code&gt; is now generated automatically.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more details on all the changes that went into this release please check &lt;a href=&quot;https://github.com/netty/netty/milestone/260?closed=1&quot;&gt;our issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make it easier to experiment with netty 5 while still use 4.1 at the same time, we have put Netty 5 into its own &lt;code&gt;io.netty5&lt;/code&gt; package. This allows to have both version co-exist at the same time. As this a new major version we also started to introduce breaking changes where it makes sense. These changes were mostly motivation by lessons learned during the life-time of netty 4.1.x. We really hope you enjoy these changes and if not provide feedback in what we should address :)&lt;/p&gt;

&lt;p&gt;We will soon start to change the default branch of netty to main and so be more strict about changes that will be accepted for 4.1. While this might sound like a &quot;limitation&quot; it will  help to keep the possibility of a regression to a minimum for 4.1. Important bugfixes will ofcourse still be ported to 4.1 as well.  With all this said we don&#39;t plan to stop supporting 4.1.x any time soon. Both versions will be supported in parallel for now.&lt;/p&gt;

&lt;p&gt;To help users to try the next major version of netty we started to write down all the &quot;required&quot; things to do in terms of migrating netty 4.1.x code to 5.0.0. The migration guide can be found on our &lt;a href=&quot;https://github.com/netty/netty/wiki/Netty-5-Migration-Guide&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2022/09/13/4-1-82-Final.html</id>
<title>Netty 4.1.82.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-09-13T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/09/13/4-1-82-Final.html" rel="alternate" type="text/html" />
<author>
<name>chrisvest</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.82.Final.
This release is a bug-fix release.

The most important changes are:


Fix a NullPointerException bug when calling forEachByte on nested CompositeByteBufs (#12790)
Relax an overly strict HTTP/2 header validation check that was rejecting requests from Chrome and Firefox (#12799)
The OpenSSL and BoringSSL implementations now respect the jdk.tls.client.protocols and jdk.tls.server.protocols system properties, making them react to these in the same way the JDK SSL provider does (#12797)



Thank You

Every idea and bug-report counts, and so we thought it is worth mentioning those who helped in this area.

Please report an unintended omission.


@chrisvest
@normanmaurer
@franz1981...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.82.Final.
This release is a bug-fix release.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix a NullPointerException bug when calling &lt;code&gt;forEachByte&lt;/code&gt; on nested &lt;code&gt;CompositeByteBuf&lt;/code&gt;s (&lt;a href=&quot;https://github.com/netty/netty/pull/12790&quot;&gt;#12790&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Relax an overly strict HTTP/2 header validation check that was rejecting requests from Chrome and Firefox (&lt;a href=&quot;https://github.com/netty/netty/pull/12799&quot;&gt;#12799&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The OpenSSL and BoringSSL implementations now respect the &lt;code&gt;jdk.tls.client.protocols&lt;/code&gt; and &lt;code&gt;jdk.tls.server.protocols&lt;/code&gt; system properties, making them react to these in the same way the JDK SSL provider does (&lt;a href=&quot;https://github.com/netty/netty/pull/12797&quot;&gt;#12797&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts, and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2022/09/08/4-1-81-Final.html</id>
<title>Netty 4.1.81.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-09-08T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/09/08/4-1-81-Final.html" rel="alternate" type="text/html" />
<author>
<name>chrisvest</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.81.Final.

This release is fixes a number of regressions and bugs that were introduced in the previous release.

The most important changes are:


Fix a regression SslContext private key loading (#12743)
Fix a bug in SslContext private key reading fall-back path (#12746)
Fix a buffer leak regression in HttpClientCodec (#12762)
Fix a bug where some HttpMessage implementations, that also implement HttpContent, were not handled correctly (#12751)
The MessageFormatter and FormattingTuple classes are now usable in the public API (#12763)
Connection related headers in HTTP/2 frames are now rejected, in compliance with the specification (#12755)



Thank You

Every idea and bug-report counts...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.81.Final.&lt;/p&gt;

&lt;p&gt;This release is fixes a number of regressions and bugs that were introduced in the previous release.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix a regression SslContext private key loading (&lt;a href=&quot;https://github.com/netty/netty/pull/12743&quot;&gt;#12743&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a bug in SslContext private key reading fall-back path (&lt;a href=&quot;https://github.com/netty/netty/pull/12746&quot;&gt;#12746&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a buffer leak regression in HttpClientCodec (&lt;a href=&quot;https://github.com/netty/netty/pull/12762&quot;&gt;#12762&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a bug where some HttpMessage implementations, that also implement HttpContent, were not handled correctly (&lt;a href=&quot;https://github.com/netty/netty/pull/12751&quot;&gt;#12751&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The MessageFormatter and FormattingTuple classes are now usable in the public API (&lt;a href=&quot;https://github.com/netty/netty/pull/12763&quot;&gt;#12763&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Connection related headers in HTTP/2 frames are now rejected, in compliance with the specification (&lt;a href=&quot;https://github.com/netty/netty/pull/12755&quot;&gt;#12755&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yawkat&quot;&gt;@yawkat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/geoand&quot;&gt;@geoand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yoa1226&quot;&gt;@yoa1226&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2022/08/26/4-1-80-Final.html</id>
<title>Netty 4.1.80.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-08-26T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/08/26/4-1-80-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.80.Final.

This release is mainly a bug-fix release but also comes with a change which improves the performance of HTTP/1.x dramatically when using multiple cores. If you are interested in in JVM and performance check out all the details written down in(#12709).

The most important changes are:


HttpObjectEncoder scalability issue due to instanceof checks (Fixes #12708) (#12709)
Improve logging when MacOSDnsServerAddressStreamProvider cannot be found/loaded (#12732)
Replace stdlib write/read with send/recv (Fixes #12673) (#12679)
Support for pkcs1 (#12670)
Add Blockhound exceptions for the PooledByteBufAllocator (#12653)
Fix epoll bug when receiving zero-sized datagrams (#12644)
Avoid including header values in header validation failure...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.80.Final.&lt;/p&gt;

&lt;p&gt;This release is mainly a bug-fix release but also comes with a change which improves the performance of HTTP/1.x dramatically when using multiple cores. If you are interested in in JVM and performance check out all the details written down in(&lt;a href=&quot;https://github.com/netty/netty/pull/12709&quot;&gt;#12709&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HttpObjectEncoder scalability issue due to instanceof checks (Fixes #12708) (&lt;a href=&quot;https://github.com/netty/netty/pull/12709&quot;&gt;#12709&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improve logging when MacOSDnsServerAddressStreamProvider cannot be found/loaded (&lt;a href=&quot;https://github.com/netty/netty/pull/12732&quot;&gt;#12732&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Replace stdlib write/read with send/recv (Fixes #12673) (&lt;a href=&quot;https://github.com/netty/netty/pull/12679&quot;&gt;#12679&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support for pkcs1 (&lt;a href=&quot;https://github.com/netty/netty/pull/12670&quot;&gt;#12670&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add Blockhound exceptions for the PooledByteBufAllocator (&lt;a href=&quot;https://github.com/netty/netty/pull/1212653349&quot;&gt;#12653&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix epoll bug when receiving zero-sized datagrams (&lt;a href=&quot;https://github.com/netty/netty/pull/12644&quot;&gt;#12644&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Avoid including header values in header validation failure exceptions (&lt;a href=&quot;https://github.com/netty/netty/pull/12642&quot;&gt;#12642&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Avoid allocating large buffers in JdkZlibEncoder(&lt;a href=&quot;https://github.com/netty/netty/pull/12641&quot;&gt;#12641&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Native Image Support: Set IS_EXPLICIT_TRY_REFLECTION_SET_ACCESSIBLE to true by default for native images (&lt;a href=&quot;https://github.com/netty/netty/pull/12638&quot;&gt;#12638&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We need to use disconnectx(...) on macOS (&lt;a href=&quot;https://github.com/netty/netty/pull/12629&quot;&gt;#12629&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Replace synchronized with Java Locks on the allocator (Fixes #12621) (&lt;a href=&quot;https://github.com/netty/netty/pull/12585&quot;&gt;#12585&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t use static instances of FixedRecvByteBufAllocator (&lt;a href=&quot;https://github.com/netty/netty/pull/12594&quot;&gt;#12594&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add escaping for stomp headers  (&lt;a href=&quot;https://github.com/netty/netty/pull/12585&quot;&gt;#12585&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cwperks&quot;&gt;@cwperks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/floragunn&quot;&gt;@floragunn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gradinac&quot;&gt;@gradinac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sjw2547&quot;&gt;@sjw2547&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thxwelchs&quot;&gt;@thxwelchs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yawkat&quot;&gt;@yawkat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2022/07/22/5-0-0-Alpha4.html</id>
<title>Netty 5.0.0.Alpha4 released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-07-22T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/07/22/5-0-0-Alpha4.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the forth Alpha release of the upcoming netty 5.0.0. This release removes a lot of code-duplication and API cleanup. Besides this it also adds support for Unix Domain Sockets when using the JDK NIO implementation.

We plan to continue to release often while in Alpha* to allow people to provide feedback easily and get changes in a frequent manner.

These are the major changes since Alpha 3:


Allow to create all SocketChannel and DatagramChannel implementations with a ProtocolFamily. The ProtocolFamily influence for example if Unix Domain Sockets should be used. This also allowed to remove the Domain*Channel implementations...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the forth Alpha release of the upcoming netty 5.0.0. This release removes a lot of code-duplication and API cleanup. Besides this it also adds support for Unix Domain Sockets when using the JDK NIO implementation.&lt;/p&gt;

&lt;p&gt;We plan to continue to release often while in Alpha* to allow people to provide feedback easily and get changes in a frequent manner.&lt;/p&gt;

&lt;p&gt;These are the major changes since Alpha 3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow to create all &lt;em&gt;SocketChannel and &lt;/em&gt;DatagramChannel implementations with a ProtocolFamily. The ProtocolFamily influence for example if Unix Domain Sockets should be used. This also allowed to remove the Domain*Channel implementations and make things &quot;consistent&quot;.&lt;/li&gt;
&lt;li&gt;Rename ChannelOption.RECVBUF_ALLOCATOR to RECVBUFFER_ALLOCATOR.&lt;/li&gt;
&lt;li&gt;Support Unix Domain Socket implementations of the JDK&lt;/li&gt;
&lt;li&gt;Change EventLoop / IoHandler to take and IoHandle for regstration to allow registering other things then Channel to an EventLoop in the future.&lt;/li&gt;
&lt;li&gt;Cleanup RecvBufferAllocator&lt;/li&gt;
&lt;li&gt;Fix disconnect() implementation on our native implementation for macOS.&lt;/li&gt;
&lt;li&gt;Replace synchronized with java Locks for better support of Loom.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more details on all the changes that went into this release please check &lt;a href=&quot;https://github.com/netty/netty/milestone/258?closed=1&quot;&gt;our issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make it easier to experiment with netty 5 while still use 4.1 at the same time, we have put Netty 5 into its own &lt;code&gt;io.netty5&lt;/code&gt; package. This allows to have both version co-exist at the same time. As this a new major version we also started to introduce breaking changes where it makes sense. These changes were mostly motivation by lessons learned during the life-time of netty 4.1.x. We really hope you enjoy these changes and if not provide feedback in what we should address :)&lt;/p&gt;

&lt;p&gt;We will soon start to change the default branch of netty to main and so be more strict about changes that will be accepted for 4.1. While this might sound like a &quot;limitation&quot; it will  help to keep the possibility of a regression to a minimum for 4.1. Important bugfixes will ofcourse still be ported to 4.1 as well.  With all this said we don&#39;t plan to stop supporting 4.1.x any time soon. Both versions will be supported in parallel for now.&lt;/p&gt;

&lt;p&gt;To help users to try the next major version of netty we started to write down all the &quot;required&quot; things to do in terms of migrating netty 4.1.x code to 5.0.0. The migration guide can be found on our &lt;a href=&quot;https://github.com/netty/netty/wiki/Netty-5-Migration-Guide&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2022/07/11/4-1-79-Final.html</id>
<title>Netty 4.1.79.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-07-11T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/07/11/4-1-79-Final.html" rel="alternate" type="text/html" />
<author>
<name>chrisvest</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.79.Final.
This release is a bug-fix release.
The most important changes are:


The PEM certificate parser is no longer susceptible to exponential back-off (#12476)
Non-standard extra ampersands in HTTP POST bodies are no longer rejected (#12427)
An io.netty.osClassifiers system property has been added to avoid reading os-release files (#12483)
Fix a bug in SslHandler so handlerRemoved works properly even if handlerAdded throws an exception (#12490)
Use the correct OSGi processor directive on aarch64, making it possible to use OSGi on ARM (#12349)
HTTP paths that begin with a double-slash are now parsed the same way browsers do (#12533)
The isCompleted...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.79.Final.
This release is a bug-fix release.
The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The PEM certificate parser is no longer susceptible to exponential back-off (&lt;a href=&quot;https://github.com/netty/netty/pull/12476&quot;&gt;#12476&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Non-standard extra ampersands in HTTP POST bodies are no longer rejected (&lt;a href=&quot;https://github.com/netty/netty/pull/12427&quot;&gt;#12427&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;io.netty.osClassifiers&lt;/code&gt; system property has been added to avoid reading &lt;code&gt;os-release&lt;/code&gt; files (&lt;a href=&quot;https://github.com/netty/netty/pull/12483&quot;&gt;#12483&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a bug in &lt;code&gt;SslHandler&lt;/code&gt; so &lt;code&gt;handlerRemoved&lt;/code&gt; works properly even if &lt;code&gt;handlerAdded&lt;/code&gt; throws an exception (&lt;a href=&quot;https://github.com/netty/netty/pull/12490&quot;&gt;#12490&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use the correct OSGi processor directive on aarch64, making it possible to use OSGi on ARM (&lt;a href=&quot;https://github.com/netty/netty/pull/12349&quot;&gt;#12349&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP paths that begin with a double-slash are now parsed the same way browsers do (&lt;a href=&quot;https://github.com/netty/netty/pull/12533&quot;&gt;#12533&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;isCompleted&lt;/code&gt; flag is now correctly preserved on objects from &lt;code&gt;HttpData.retainedDuplicate()&lt;/code&gt; (&lt;a href=&quot;https://github.com/netty/netty/pull/12438&quot;&gt;#12438&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;HttpUtil.isOriginForm()&lt;/code&gt; and &lt;code&gt;isAsteriskForm()&lt;/code&gt; methods now correctly conform with RFC 7230 (&lt;a href=&quot;https://github.com/netty/netty/pull/12568&quot;&gt;#12568&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix an issue that allowed the multicast methods on &lt;code&gt;EpollDatagramChannel&lt;/code&gt; to be called outside of an event-loop thread (&lt;a href=&quot;https://github.com/netty/netty/pull/12584&quot;&gt;#12584&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support for the LoongArch64 processor architecture has been added (&lt;a href=&quot;https://github.com/netty/netty/pull/12580&quot;&gt;#12580&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mostroverkhov&quot;&gt;@mostroverkhov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrishowell&quot;&gt;@chrishowell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yawkat&quot;&gt;@yawkat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jkjk822&quot;&gt;@jkjk822&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thobe&quot;&gt;@thobe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pderop&quot;&gt;@pderop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/huajingyun01&quot;&gt;@huajingyun01&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2022/07/08/5-0-0-Alpha3.html</id>
<title>Netty 5.0.0.Alpha3 released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-07-08T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/07/08/5-0-0-Alpha3.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the third Alpha release of the upcoming netty 5.0.0. This release is another big milestone for us and the community, towards the eventual final release of Netty 5. This release migrated all of our code to use the new Buffer API And completely removed ByteBuf. Beside this there are a lot of other exciting changes included.

These are the major changes since Alpha 2:


All code now uses Buffer (our new buffer API).
Remove ChannelInboundHandler
Remove Http2MultiplexCodec and Http2MultiplexCodecBuilder
A number of convenience methods have been added to Buffer, EventLoop, Future
ChannelHandlerContext does not extend AttributeMap anymore
Make half-closure a core-concept of...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the third Alpha release of the upcoming netty 5.0.0. This release is another big milestone for us and the community, towards the eventual final release of Netty 5. This release migrated all of our code to use the new &lt;code&gt;Buffer&lt;/code&gt; API And completely removed &lt;code&gt;ByteBuf&lt;/code&gt;. Beside this there are a lot of other exciting changes included.&lt;/p&gt;

&lt;p&gt;These are the major changes since Alpha 2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All code now uses &lt;code&gt;Buffer&lt;/code&gt; (our new buffer API).&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;ChannelInboundHandler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;Http2MultiplexCodec&lt;/code&gt; and &lt;code&gt;Http2MultiplexCodecBuilder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A number of convenience methods have been added to &lt;code&gt;Buffer&lt;/code&gt;, &lt;code&gt;EventLoop&lt;/code&gt;, &lt;code&gt;Future&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ChannelHandlerContext&lt;/code&gt; does not extend &lt;code&gt;AttributeMap&lt;/code&gt; anymore&lt;/li&gt;
&lt;li&gt;Make half-closure a core-concept of Channel&lt;/li&gt;
&lt;li&gt;Allow sending &quot;custom&quot; events in both direction&lt;/li&gt;
&lt;li&gt;Remove blocking methods from &lt;code&gt;Future&lt;/code&gt; interface, people need to use &lt;code&gt;Future.asStage()&lt;/code&gt; to gain access to blocking methods&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;Channel.Unsafe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;ChannelOutboundBuffer&lt;/code&gt; from the &lt;code&gt;Channel&lt;/code&gt; API as its an implementation detail of &lt;code&gt;AbstractChannel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;@Sharable&lt;/code&gt; and replace it by &lt;code&gt;ChannelHandler.isSharable()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;EventLoop.Unsafe&lt;/code&gt; and add &lt;code&gt;EventLoop.registerForIo(...)&lt;/code&gt; / &lt;code&gt;EventLoop.deregisterForIo(...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allow &lt;code&gt;ChannelHandler&lt;/code&gt; to buffer outbound data and influence &lt;code&gt;Channel.isWritable&lt;/code&gt;() by adding &lt;code&gt;ChannelHandler.pendingOutboundBytes(...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rename &lt;code&gt;Channel.bytesBeforeUnwritable()&lt;/code&gt; to &lt;code&gt;Channel.writableBytes()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add ProtocolEvent and let SSL and WebSocket implementation use it&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;EventLoopGroup.isCompatible(...)&lt;/code&gt; method which allows to check if a &lt;code&gt;Channel&lt;/code&gt; subtype is compatible with a given &lt;code&gt;EventLoopGroup&lt;/code&gt; / &lt;code&gt;EventLoop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Don&#39;t restrict &lt;code&gt;SocketChannel&lt;/code&gt; / &lt;code&gt;ServerSocketChannel&lt;/code&gt; to &lt;code&gt;InetSocketAddress&lt;/code&gt; and so make it possible to use the JDK implementation for unix domain sockets with netty&lt;/li&gt;
&lt;li&gt;Move common logic into &lt;code&gt;AbstractChannel&lt;/code&gt; and so make it easier for implementions to re-use code. Also rename protected methods to be more consistent&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more details on all the changes that went into this release please check &lt;a href=&quot;https://github.com/netty/netty/milestone/256?closed=1&quot;&gt;our issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make it easier to experiment with netty 5 while still use 4.1 at the same time, we have put Netty 5 into its own &lt;code&gt;io.netty5&lt;/code&gt; package. This allows to have both version co-exist at the same time. As this a new major version we also started to introduce breaking changes where it makes sense. These changes were mostly motivation by lessons learned during the life-time of netty 4.1.x. We really hope you enjoy these changes and if not provide feedback in what we should address :)&lt;/p&gt;

&lt;p&gt;We will soon start to change the default branch of netty to main and so be more strict about changes that will be accepted for 4.1. While this might sound like a &quot;limitation&quot; it will  help to keep the possibility of a regression to a minimum for 4.1. Important bugfixes will ofcourse still be ported to 4.1 as well.  With all this said we don&#39;t plan to stop supporting 4.1.x any time soon. Both versions will be supported in parallel for now.&lt;/p&gt;

&lt;p&gt;To help users to try the next major version of netty we started to write down all the &quot;required&quot; things to do in terms of migrating netty 4.1.x code to 5.0.0. The migration guide can be found on our &lt;a href=&quot;https://github.com/netty/netty/wiki/Netty-5-Migration-Guide&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2022/06/14/4-1-78-Final.html</id>
<title>Netty 4.1.78.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-06-14T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/06/14/4-1-78-Final.html" rel="alternate" type="text/html" />
<author>
<name>chrisvest</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.78.Final.
This release is a bug-fix release.
The most important changes are:


Fix a bug where an OPT record was added to DNS queries that already had such a record (#12370)
Fix a bug that caused an error when files uploaded with HTTP POST contained a backslash in their name (#12334)
Fix an issue in the BlockHound integration that could occasionally cause NetUtil to be reported as performing blocking operations (#12414)
A similar BlockHound issue was fixed for the JdkSslContext (#12435)
Fix a bug that prevented preface or settings frames from being flushed, when an HTTP2 connection was...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.78.Final.
This release is a bug-fix release.
The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix a bug where an OPT record was added to DNS queries that already had such a record (&lt;a href=&quot;https://github.com/netty/netty/pull/12370&quot;&gt;#12370&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a bug that caused an error when files uploaded with HTTP POST contained a backslash in their name (&lt;a href=&quot;https://github.com/netty/netty/pull/12334&quot;&gt;#12334&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix an issue in the BlockHound integration that could occasionally cause &lt;code&gt;NetUtil&lt;/code&gt; to be reported as performing blocking operations (&lt;a href=&quot;https://github.com/netty/netty/pull/12414&quot;&gt;#12414&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A similar BlockHound issue was fixed for the &lt;code&gt;JdkSslContext&lt;/code&gt; (&lt;a href=&quot;https://github.com/netty/netty/pull/12435&quot;&gt;#12435&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a bug that prevented preface or settings frames from being flushed, when an HTTP2 connection was established with prior-knowledge (&lt;a href=&quot;https://github.com/netty/netty/pull/12349&quot;&gt;#12349&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixes a rare &lt;code&gt;NullPointerException&lt;/code&gt; that could occur when a &lt;code&gt;ReferenceCountedOpenSslEngine&lt;/code&gt; threw an &lt;code&gt;OutOfMemoryError&lt;/code&gt; from its constructor, and was then later finalized (&lt;a href=&quot;https://github.com/netty/netty/pull/12434&quot;&gt;#12434&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;SslHandler&lt;/code&gt; now adds the socket file descriptor to the BIOs, when the SslEngine supports this (boringssl and libressl), which allow tracing and observability tools to monitor encryption traffic on a per-connection basis. (&lt;a href=&quot;https://github.com/netty/netty/pull/12438&quot;&gt;#12438&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;It is now possible to explicitly step the scheduling clock in &lt;code&gt;EmbeddedEventLoop&lt;/code&gt;, which is useful for making automated tests with deterministic scheduling (&lt;a href=&quot;https://github.com/netty/netty/pull/12459&quot;&gt;#12459&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/EmiyaXzero&quot;&gt;@EmiyaXzero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nicholas-yangding&quot;&gt;@nicholas-yangding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/firestige&quot;&gt;@firestige&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddelnano&quot;&gt;@ddelnano&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yawkat&quot;&gt;@yawkat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2022/05/16/5-0-0-Alpha2.html</id>
<title>Netty 5.0.0.Alpha2 released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-05-16T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/05/16/5-0-0-Alpha2.html" rel="alternate" type="text/html" />
<author>
<name>chrisvest</name>
</author>
<summary>
We are happy to announce the second Alpha release of the upcoming netty 5.0.0. This release is another big milestone for us and the community, towards the eventual final release of Netty 5. While it is still a long road to the final release we expect things to become more stable with each release and so make it easier for people to keep up-to-date.

These are the major changes since Alpha 1:


All protocols and codecs have been migrated to the new buffer API, except HTTP/2, and the compression codecs. These remaining codecs will be migrated later.
Support for ByteBuf has been removed...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the second Alpha release of the upcoming netty 5.0.0. This release is another big milestone for us and the community, towards the eventual final release of Netty 5. While it is still a long road to the final release we expect things to become more stable with each release and so make it easier for people to keep up-to-date.&lt;/p&gt;

&lt;p&gt;These are the major changes since Alpha 1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All protocols and codecs have been migrated to the new buffer API, &lt;em&gt;except&lt;/em&gt; HTTP/2, and the compression codecs. These remaining codecs will be migrated later.&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;ByteBuf&lt;/code&gt; has been removed from the transports. Codecs and handlers that still rely on &lt;code&gt;ByteBuf&lt;/code&gt; must now have a &lt;code&gt;BufferConversionHandler&lt;/code&gt; placed in front of them in the pipeline.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ByteBuf&lt;/code&gt; and related APIs have been removed.&lt;/li&gt;
&lt;li&gt;To support the uses of &lt;code&gt;ByteBuf&lt;/code&gt; that remain in the code base, Alpha 2 now depends on Netty 4.1.75.Final for its &lt;code&gt;ByteBuf&lt;/code&gt; implementation. This dependency is temporary and will be removed once everything has been migrated.&lt;/li&gt;
&lt;li&gt;Write methods on &lt;code&gt;Buffer&lt;/code&gt; will now grow the buffer if more capacity is need.&lt;/li&gt;
&lt;li&gt;A new &lt;code&gt;SensitiveBufferAllocator&lt;/code&gt; has been added, which will zero out the memory when buffers are closed.&lt;/li&gt;
&lt;li&gt;A number of convenience methods have been added to &lt;code&gt;Buffer&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To make it easier to experiment with netty 5 while still use 4.1 at the same time, we have put Netty 5 into its own &lt;code&gt;io.netty5&lt;/code&gt; package. This allows to have both version co-exist at the same time. As this a new major version we also started to introduce breaking changes where it makes sense. These changes were mostly motivation by lessons learned during the life-time of netty 4.1.x. We really hope you enjoy these changes and if not provide feedback in what we should address :)&lt;/p&gt;

&lt;p&gt;We will soon start to change the default branch of netty to main and so be more strict about changes that will be accepted for 4.1. While this might sound like a &quot;limitation&quot; it will  help to keep the possibility of a regression to a minimum for 4.1. Important bugfixes will ofcourse still be ported to 4.1 as well.  With all this said we don&#39;t plan to stop supporting 4.1.x any time soon. Both versions will be supported in parallel for now.&lt;/p&gt;

&lt;p&gt;To help users to try the next major version of netty we started to write down all the &quot;required&quot; things to do in terms of migrating netty 4.1.x code to 5.0.0. The migration guide can be found on our &lt;a href=&quot;https://github.com/netty/netty/wiki/Netty-5-Migration-Guide&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2022/05/06/2-1-77-Final.html</id>
<title>Netty 4.1.77.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-05-06T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/05/06/2-1-77-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.77.Final. This release is a bug-fix release, which also contains a fix for a CVE which only affects users running Java 6.
Beside this it also fixes a bug which can cause the native epoll transport to be unusable on systems that not implement epoll_pwait2 (like ubuntu 22.04.
The most important changes are:


Local Information Disclosure Vulnerability in Netty on Unix-Like systems due temporary files for Java 6 and lower in io.netty:netty-codec-http (CVE-2022-24823)
Upgraded the optional netty-tcnative dependency to version 2.0.52.Final (#12162)
Fix a bug where Netty fails to load a shaded native library  (#12358)
Include...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.77.Final. This release is a bug-fix release, which also contains a fix for a CVE which only affects users running Java 6.
Beside this it also fixes a bug which can cause the native epoll transport to be unusable on systems that not implement &lt;code&gt;epoll_pwait2&lt;/code&gt; (like ubuntu 22.04.
The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local Information Disclosure Vulnerability in Netty on Unix-Like systems due temporary files for Java 6 and lower in io.netty:netty-codec-http (&lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-269q-hmxg-m83q&quot;&gt;CVE-2022-24823&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Upgraded the optional &lt;code&gt;netty-tcnative&lt;/code&gt; dependency to version 2.0.52.Final (&lt;a href=&quot;https://github.com/netty/netty/pull/12361&quot;&gt;#12162&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a bug where Netty fails to load a shaded native library  (&lt;a href=&quot;https://github.com/netty/netty/pull/12358&quot;&gt;#12358&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Include classifier in Automatic-Module-Name (&lt;a href=&quot;https://github.com/netty/netty/pull/12354&quot;&gt;#12354&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Check if epoll_pwait2 is implemented (&lt;a href=&quot;https://github.com/netty/netty/pull/12345&quot;&gt;#12345&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t call strdup on packagePrefix (&lt;a href=&quot;https://github.com/netty/netty/pull/12322&quot;&gt;#12322&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enable debugging of asynchronous tasks in Intellij (&lt;a href=&quot;https://github.com/netty/netty/pull/12319&quot;&gt;#12319&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Throwing an exception in case glibc is missing instead of segfaulting the JVM (&lt;a href=&quot;https://github.com/netty/netty/issues/11701&quot;&gt;#11701&lt;/a&gt;)
For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.77.Final&quot;&gt;4.1.77.Final&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amlyczz&quot;&gt;@amlyczz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/arthur-zhang&quot;&gt;@arthur-zhang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cuishuang&quot;&gt;@cuishuang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JLLeitschuh&quot;&gt;@JLLeitschuh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jonatan-ivanov&quot;&gt;@jonatan-ivanov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lackovic&quot;&gt;@lackovic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2022/04/12/4-1-76-Final.html</id>
<title>Netty 4.1.76.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-04-12T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/04/12/4-1-76-Final.html" rel="alternate" type="text/html" />
<author>
<name>chrisvest</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.76.Final. This release is a bug-fix release.

The most important changes are:


Upgraded the optional netty-tcnative dependency to version 2.0.51.Final (#12162)
Upgraded the optional log4j dependency to version 2.17.2 (#12261)
The netty-all module now declare an automatic module name, making it useable with Java Modules. (#12188)
It is now possible to configure arbitrary socket options for the native epoll and kqueue transports. Refer to your operating system documentation for what options are available. (#12246)
It is now possible to explicitly bind channels to either IPv4 or IPv6. (#12270)
The HTTP/2 header validation that rejects duplicate pseudo-headers, which was...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.76.Final. This release is a bug-fix release.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upgraded the optional &lt;code&gt;netty-tcnative&lt;/code&gt; dependency to version 2.0.51.Final (&lt;a href=&quot;https://github.com/netty/netty/pull/12162&quot;&gt;#12162&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Upgraded the optional &lt;code&gt;log4j&lt;/code&gt; dependency to version 2.17.2 (&lt;a href=&quot;https://github.com/netty/netty/pull/12261&quot;&gt;#12261&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;netty-all&lt;/code&gt; module now declare an automatic module name, making it useable with Java Modules. (&lt;a href=&quot;https://github.com/netty/netty/pull/12188&quot;&gt;#12188&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;It is now possible to configure arbitrary socket options for the native epoll and kqueue transports. Refer to your operating system documentation for what options are available. (&lt;a href=&quot;https://github.com/netty/netty/pull/12246&quot;&gt;#12246&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;It is now possible to explicitly bind channels to either IPv4 or IPv6. (&lt;a href=&quot;https://github.com/netty/netty/pull/12270&quot;&gt;#12270&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The HTTP/2 header validation that rejects duplicate pseudo-headers, which was added in 4.1.75.Final, has been changed so it no longer breaks older versions of gRPC. (&lt;a href=&quot;https://github.com/netty/netty/pull/12289&quot;&gt;#12289&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a &lt;code&gt;NullPointerException&lt;/code&gt; that was hiding the real cause of certain  HTTP/2 header decoding errors. (&lt;a href=&quot;https://github.com/netty/netty/pull/12232&quot;&gt;#12232&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.76.Final&quot;&gt;4.1.76.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/andrewvo148&quot;&gt;@andrewvo148&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/coderbruis&quot;&gt;@coderbruis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gorden5566&quot;&gt;@gorden5566&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Kvicii&quot;&gt;@Kvicii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kvr000&quot;&gt;@kvr000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/NickleHuang&quot;&gt;@NickleHuang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/schlosna&quot;&gt;@schlosna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhangOranges&quot;&gt;@zhangOranges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2022/03/17/5-0-0-Alpha1.html</id>
<title>Netty 5.0.0.Alpha1 released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-03-17T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/03/17/5-0-0-Alpha1.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the first Alpha release of the upcoming netty 5.0.0. This release is a big milestone for us and the community as it will allow users to easily consume changes and give feedback. While it is still a long road to the final release we expect things to become more stable with each release and so make it easier for people to keep up-to-date.

To make it easier to experiment with netty 5 while still use 4.1 at the same time we decided to take the effort and put it into a different package. This allows to...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the first Alpha release of the upcoming netty 5.0.0. This release is a big milestone for us and the community as it will allow users to easily consume changes and give feedback. While it is still a long road to the final release we expect things to become more stable with each release and so make it easier for people to keep up-to-date.&lt;/p&gt;

&lt;p&gt;To make it easier to experiment with netty 5 while still use 4.1 at the same time we decided to take the effort and put it into a different package. This allows to have both version co-exist at the same time. As this a new major version we also started to introduce breaking changes where it makes sense. These changes were mostly motivation by lessons learned during the life-time of netty 4.1.x. We really hope you enjoy these changes and if not provide feedback in what we should address :)&lt;/p&gt;

&lt;p&gt;We will soon start to change the default branch of netty to main and so be more strict about changes that will be accepted for 4.1. While this might sound like a &quot;limitation&quot; it will  help to keep the possibility of a regression to a minimum for 4.1. Important bugfixes will of course still be ported to 4.1 as well.  With all this said we don&#39;t plan to stop supporting 4.1.x any time soon. Both versions will be supported in parallel for now.&lt;/p&gt;

&lt;p&gt;To help users to try the next major version of netty we started to write down all the &quot;required&quot; things to do in terms of migrating netty 4.1.x code to 5.0.0. The migration guide can be found on our &lt;a href=&quot;https://github.com/netty/netty/wiki/Netty-5-Migration-Guide&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2022/03/10/4-1-75-Final.html</id>
<title>Netty 4.1.75.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-03-10T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/03/10/4-1-75-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.75.Final. This release is a bug-fix release but also contains two changes which might change memory usage / performance characteristics of your application. Please ensure to read the important notes section below.

The most important changes are:


Avoid reading uninitialised memory when making domain socket address (#12085)
HTTP/2 header validation must reject duplicate pseudo-headers (#12094)
Add HTTP-specific TooLongFrameExceptions (#12084)
Allow attaching additional metadata to ResourceLeakTrackers on creation (#12091)
Add PlatformDependent.estimateMaxDirectMemory (#12118)
Reduce the default PooledByteBufAllocator chunk size from 16 MiB to 4 MiB (#12108)
Fixed high CPU usage when using spliceTo() (#12138)
Change default of io.netty.allocator.useCacheForAllThreads to false (#12109)
Allow more...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.75.Final. This release is a bug-fix release but also contains two changes which might change memory usage / performance characteristics of your application. Please ensure to read the important notes section below.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid reading uninitialised memory when making domain socket address (&lt;a href=&quot;https://github.com/netty/netty/pull/12085&quot;&gt;#12085&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP/2 header validation must reject duplicate pseudo-headers (&lt;a href=&quot;https://github.com/netty/netty/pull/12094&quot;&gt;#12094&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add HTTP-specific TooLongFrameExceptions (&lt;a href=&quot;https://github.com/netty/netty/pull/12084&quot;&gt;#12084&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow attaching additional metadata to ResourceLeakTrackers on creation (&lt;a href=&quot;https://github.com/netty/netty/pull/12091&quot;&gt;#12091&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add PlatformDependent.estimateMaxDirectMemory (&lt;a href=&quot;https://github.com/netty/netty/pull/12118&quot;&gt;#12118&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reduce the default PooledByteBufAllocator chunk size from 16 MiB to 4 MiB (&lt;a href=&quot;https://github.com/netty/netty/pull/12108&quot;&gt;#12108&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed high CPU usage when using spliceTo() (&lt;a href=&quot;https://github.com/netty/netty/pull/12138&quot;&gt;#12138&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Change default of io.netty.allocator.useCacheForAllThreads to false (&lt;a href=&quot;https://github.com/netty/netty/pull/12109&quot;&gt;#12109&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow more permissive char set in SNI headers (&lt;a href=&quot;https://github.com/netty/netty/pull/12147&quot;&gt;#12147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix race when handling delegating tasks in ReferenceCountedOpenSslEngine (&lt;a href=&quot;https://github.com/netty/netty/pull/12149&quot;&gt;#12149&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.75.Final&quot;&gt;4.1.75.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;Reduce the default PooledByteBufAllocator chunk size from 16 MiB to 4 MiB&lt;/h2&gt;

&lt;p&gt;To reduce the memory-overhead of the &lt;code&gt;PooledByteBufAllocator&lt;/code&gt; we dedicided to change the default chunk size from 16 MiB to 4 MiB. Generally this should not have any bad effects in terms of performance for almost all users. If you notice a drop in performance for your use-case please open an issue and consider changing the configuration as explained in (&lt;a href=&quot;https://github.com/netty/netty/pull/12108&quot;&gt;#12108&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;Change default of io.netty.allocator.useCacheForAllThreads to false&lt;/h2&gt;

&lt;p&gt;Netty uses various types of caches to improve performance when allocation buffers, on of them is thread local based. While the thread-local based cache can reduce condention in general it can also use al ot of memory when applications allocate buffers from a lot of different threads. To reduce the risk of ending up with a lot of memory usage without much gain we dedicided to change the default configuration on when to use these caches. From this release on we will only use this type of cache if either it is configured to allways use the cache, the allocating &lt;code&gt;Thread&lt;/code&gt; is of type &lt;code&gt;FastThreadLocalThread&lt;/code&gt; or if the &lt;code&gt;Thread&lt;/code&gt; is bound to an &lt;code&gt;EventExecutor&lt;/code&gt;. This should be good enough in general while decrease the memory overhead a lot. If you observe any issues consider opening an issue and change the configuration as stated in (&lt;a href=&quot;https://github.com/netty/netty/pull/12109&quot;&gt;#12109&lt;/a&gt;).&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AriseFX&quot;&gt;@AriseFX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/devsprint&quot;&gt;@devsprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eltociear&quot;&gt;@eltociear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kevyang&quot;&gt;@kevyang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kwart&quot;&gt;@kwart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/laosijikaichele&quot;&gt;@laosijikaichele&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lijinliangyihao&quot;&gt;@lijinliangyihao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/micopiira&quot;&gt;@micopiira&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/privatestatic&quot;&gt;@privatestatic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Shoothzj&quot;&gt;@Shoothzj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tkohn&quot;&gt;@tkohn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yawkat&quot;&gt;@yawkat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yuzawa-san&quot;&gt;@yuzawa-san&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2022/02/08/4-1-74-Final.html</id>
<title>Netty 4.1.74.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-02-08T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/02/08/4-1-74-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.74.Final. This release is a bug-fix release.

The most important changes are:


Introduce Http2DataChunkedInput to send chunked Http2 Data Frames (#12066)
Don't set the writerIndex to incorrect value when scattering reads are used for datagrams (#12076)
Support RFC 8879 Certificate Compression for TLSv1.3 (#12012)
Release DnsQuery in case of failure to prevent leak (#12048)
Propagate BindException in DnsNameResolver (#12034)
Avoid masking the cause of availability failures for the Mac DNS provider (#12039)
Added Fragment-Host declaration to bundles shipping native libs (#12018)
Don't strip scopeId when resolving ipv6 address (#12019)
Try to not recycle objects back to terminated threads (#11996)



For the details...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.74.Final. This release is a bug-fix release.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduce Http2DataChunkedInput to send chunked Http2 Data Frames (&lt;a href=&quot;https://github.com/netty/netty/pull/12066&quot;&gt;#12066&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t set the writerIndex to incorrect value when scattering reads are used for datagrams (&lt;a href=&quot;https://github.com/netty/netty/pull/12076&quot;&gt;#12076&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support RFC 8879 Certificate Compression for TLSv1.3 (&lt;a href=&quot;https://github.com/netty/netty/pull/12012&quot;&gt;#12012&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Release DnsQuery in case of failure to prevent leak (&lt;a href=&quot;https://github.com/netty/netty/pull/12048&quot;&gt;#12048&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Propagate BindException in DnsNameResolver (&lt;a href=&quot;https://github.com/netty/netty/pull/12034&quot;&gt;#12034&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Avoid masking the cause of availability failures for the Mac DNS provider (&lt;a href=&quot;https://github.com/netty/netty/pull/12039&quot;&gt;#12039&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added Fragment-Host declaration to bundles shipping native libs (&lt;a href=&quot;https://github.com/netty/netty/pull/12018&quot;&gt;#12018&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t strip scopeId when resolving ipv6 address (&lt;a href=&quot;https://github.com/netty/netty/pull/12019&quot;&gt;#12019&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Try to not recycle objects back to terminated threads (&lt;a href=&quot;https://github.com/netty/netty/pull/11996&quot;&gt;#11996&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.74.Final&quot;&gt;4.1.74.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;Official Netty Discord Channel&lt;/h2&gt;

&lt;p&gt;To make it easier for the community to interact we decided to create an official Discord Channel. We invite everyone to &lt;a href=&quot;https://discord.gg/q4aQ2XjaCa&quot;&gt;join us there&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aochagavia&quot;&gt;@aochagavia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BaurzhanSakhariev&quot;&gt;@BaurzhanSakhariev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CamW&quot;&gt;@CamW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/copbint&quot;&gt;@copbint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Ech0Fan&quot;&gt;@Ech0Fan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/geoand&quot;&gt;@geoand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Kvicii&quot;&gt;@Kvicii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MrEasy&quot;&gt;@MrEasy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Spikhalskiy&quot;&gt;@Spikhalskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tmulle&quot;&gt;@tmulle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wanglunhui2012&quot;&gt;@wanglunhui2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xuziyang&quot;&gt;@xuziyang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zyclonite&quot;&gt;@zyclonite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2022/01/12/4-1-73-Final.html</id>
<title>Netty 4.1.73.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2022-01-12T00:00:00+00:00</published>
<link href="http://netty.io/news/2022/01/12/4-1-73-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.73.Final, which is the first netty release for this year (late Happy New Year!). Because this release fixes a few bugs in "core parts" of netty we highly recommend everyone to upgrade.

The most important changes are:


Make "pinned memory" from PooledByteBufAllocator reflect buffers in use (#11990)
Ensure the side which enables SO_LINGER and call showdownOutput to start TCP half-closure in fin_wait2 state can still receive and process the data which is send by another side in the close_wait state (#11982)
Correctly calculate the elementSize when cache alignment is configured (#11987)
WebSocketServerProtocolHandshakeHandler should work without aggregation...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.73.Final, which is the first netty release for this year (late Happy New Year!). Because this release fixes a few bugs in &quot;core parts&quot; of netty we highly recommend everyone to upgrade.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make &quot;pinned memory&quot; from PooledByteBufAllocator reflect buffers in use (&lt;a href=&quot;https://github.com/netty/netty/pull/11990&quot;&gt;#11990&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure the side which enables SO_LINGER and call showdownOutput to start TCP half-closure in fin_wait2 state can still receive and process the data which is send by another side in the close_wait state (&lt;a href=&quot;https://github.com/netty/netty/pull/11982&quot;&gt;#11982&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly calculate the elementSize when cache alignment is configured (&lt;a href=&quot;https://github.com/netty/netty/pull/11987&quot;&gt;#11987&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WebSocketServerProtocolHandshakeHandler should work without aggregation (&lt;a href=&quot;https://github.com/netty/netty/pull/11976&quot;&gt;#11976&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix: Make ByteToMessageDecoder not call read() in channelReadComplete, if no channelRead fired. (&lt;a href=&quot;https://github.com/netty/netty/pull/11966&quot;&gt;#11966&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add a lock-based message passing queue to help debug a problem with Recycler (&lt;a href=&quot;https://github.com/netty/netty/pull/11972&quot;&gt;#11972&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix ByteBufUtil.indexOf(buf, buf) (&lt;a href=&quot;https://github.com/netty/netty/pull/11970&quot;&gt;#11970&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;do not periodically re-read /etc/hosts by default (&lt;a href=&quot;https://github.com/netty/netty/pull/11943&quot;&gt;#11943&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix ArrayIndexOutOfBounds: 39 from PoolArena.findSubpagePoolHead (&lt;a href=&quot;https://github.com/netty/netty/pull/11939&quot;&gt;#11939&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to disable duplicate native library check (&lt;a href=&quot;https://github.com/netty/netty/pull/11928&quot;&gt;#11928&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow same native libraries if content is the same (&lt;a href=&quot;https://github.com/netty/netty/pull/11927&quot;&gt;#11927&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.73.Final&quot;&gt;4.1.73.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;Relaxing duplicated native library detection.&lt;/h2&gt;

&lt;p&gt;The last netty release did include a change that will detect if there may be conflicting native libraries on the classpath and if so fail to load these. This change was introduced to guard against possible side-effects like segfaults. While the change itself makes a lot of sense and is correct we found out that it might be a bit to &quot;restrictive&quot; in some cases and users might need time to resolve these duplicated native libraries problems when the application has a complex dependency-graph. Because of this we made two changes in this release:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow same native libraries if content is the same (&lt;a href=&quot;https://github.com/netty/netty/pull/11927&quot;&gt;#11927&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to disable duplicate native library check (&lt;a href=&quot;https://github.com/netty/netty/pull/11928&quot;&gt;#11928&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The first mentioned change relaxes the duplicate native library check a bit and so will allow to have the same native library with the same content on the classpath and still be able to load it.
The second change allows to disable the check all-together with a system property and so will allow you to try use the native library even if you have multiple conflicting native libraries on the classpath. Doing this is risky and should general be avoided due the reasons mentioned above. That said it can be used as an escape-path while fixing the dependency-graph. The problem itself will still be logged so people are aware of it.&lt;/p&gt;

&lt;h2&gt;ArrayIndexOutOfBoundsException when PooledByteBufAllocator is used.&lt;/h2&gt;

&lt;p&gt;This release fixes a bug which can cause an ArrayIndexOutOfBoundsException when using the PooledByteBufAllocator. This bug exists forever and is basically a use-after-free bug. For more details see &lt;a href=&quot;https://github.com/netty/netty/pull/11939&quot;&gt;#11939&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Do not periodically re-read /etc/hosts by default&lt;/h2&gt;

&lt;p&gt;The last netty release did introduce a change which caused &lt;code&gt;/etc/hosts&lt;/code&gt; to be re-read every 60 seconds. This was done to ensure we pick-up changes without the need of restarting. Unfortunality what we didnt think about was that the disk IO might block and so can cause the EventLoop to block as well for a small amount of time. Because of this we did change the default to not re-read the file periodicly in this release. If you really want to re-enable it it can be done via system property. For more details see &lt;a href=&quot;https://github.com/netty/netty/pull/11943&quot;&gt;#11943&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Add a lock-based message passing queue to help debug a problem with Recycler&lt;/h2&gt;

&lt;p&gt;One of our users reported a problem in the new &lt;code&gt;Recycler&lt;/code&gt; implementation which did cause heavy CPU usage while polling from the internal queue. We were not able to reproduce this at all and the problem only happened for one user on ARM with an old JDK. Because of this we currently believe its caused by a JDK bug. That said to allow users to workaround the problem if it happens we introduced a system property which allows to switch the internal queue used by &lt;code&gt;Recycler&lt;/code&gt;.
If you suffer from the mentioned problem please report back to us and use the property to workaround the issue as mentioned in &lt;a href=&quot;https://github.com/netty/netty/pull/11972&quot;&gt;#11972&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alex-lx&quot;&gt;@alex-lx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BuddhiWathsala&quot;&gt;@BuddhiWathsala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dchristle&quot;&gt;@dchristle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ebradshaw&quot;&gt;@ebradshaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eltociear&quot;&gt;@eltociear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/faceless2&quot;&gt;@faceless2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hoverwinter&quot;&gt;@hoverwinter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hxnan&quot;&gt;@hxnan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/huibinliupush&quot;&gt;@huibinliupush&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/laosijikaichele&quot;&gt;@laosijikaichele&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/majecty&quot;&gt;@majecty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mostroverkhov&quot;&gt;@mostroverkhov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pderop&quot;&gt;@pderop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seatrain&quot;&gt;@seatrain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sergiitk&quot;&gt;@sergiitk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Xxpain&quot;&gt;@Xxpain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yawkat&quot;&gt;@yawkat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/YunWZ&quot;&gt;@YunWZ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/12/14/multiple_releases.html</id>
<title>Multiple incubator libraries released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-12-14T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/12/14/multiple_releases.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of multiple of our incubator libraries to follow the release of netty 4.1.72.Final. Beside upgrading to the latest netty release these releases also contain a few other small fixes.

The releases include:


netty-incubator-transport-io_uring 0.0.11.Final
netty-incubator-codec-quic 0.0.25.Final
netty-incubator-codec-http3 0.0.11.Final



For more details please check the specific issue tracker for the libraries as listed above....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of multiple of our incubator libraries to follow the release of &lt;a href=&quot;https://netty.io/news/2021/12/13/4-1-72-Final.html&quot;&gt;netty 4.1.72.Final&lt;/a&gt;. Beside upgrading to the latest netty release these releases also contain a few other small fixes.&lt;/p&gt;

&lt;p&gt;The releases include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/netty/netty-incubator-transport-io_uring/milestone/11?closed=1&quot;&gt;netty-incubator-transport-io_uring 0.0.11.Final&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/issues?q=is%3Aclosed+milestone%3A0.0.25.Final&quot;&gt;netty-incubator-codec-quic 0.0.25.Final&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3/milestone/11?closed=1&quot;&gt;netty-incubator-codec-http3 0.0.11.Final&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more details please check the specific issue tracker for the libraries as listed above.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/12/13/4-1-72-Final.html</id>
<title>Netty 4.1.72.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-12-13T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/12/13/4-1-72-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.72.Final just a few days since our last release. We decided to do so as our release did introduce a regression in our bom which could lead to dependency issues. Beside this we also upgraded the log4j2 version of our optional dependency (which also means that while we use it it will not be automatically pulled in and so there is no risk from netty's point of view).

The most important changes are:


Update tcnative version in bom (#11902)
Specify the platform version and deployment target on macos (#11906)
Update to log4j2 2.15.0 to fix...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.72.Final just a few days since our last release. We decided to do so as our release did introduce a regression in our bom which could lead to dependency issues. Beside this we also upgraded the log4j2 version of our optional dependency (which also means that while we use it it will not be automatically pulled in and so there is no risk from netty&#39;s point of view).&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update tcnative version in bom (&lt;a href=&quot;https://github.com/netty/netty/pull/11902&quot;&gt;#11902&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Specify the platform version and deployment target on macos (&lt;a href=&quot;https://github.com/netty/netty/pull/11906&quot;&gt;#11906&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update to log4j2 2.15.0 to fix security issue (&lt;a href=&quot;https://github.com/netty/netty/pull/11909&quot;&gt;#11909&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.72.Final&quot;&gt;4.1.72.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/barclay-reg&quot;&gt;@barclay-reg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kedar-joshi&quot;&gt;@kedar-joshi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/noSim&quot;&gt;@noSim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/12/09/4-1-71-Final.html</id>
<title>Netty 4.1.71.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-12-09T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/12/09/4-1-71-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.71.Final.  This is mainly a bug-fix release but also contains a fix for HTTP-request-smuggling and fixes a regression in SslHandler. Because of this we urge everyone to upgrade as soon as possible.

The most important changes are:


HTTP fails to validate against control chars in header names which may lead to HTTP request smuggling (CVE-2021-43797)
JdkZlibEncoder can use pooled heap buffers for deflater input (#11891)
Ensure we always run the register task of native libraries (#11887)
Rewrite and simplify Recycler (#11858)
Do not allow third parties to provide Netty's native libraries (#11856)
Fix reentrancy bug in SslHandler...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.71.Final.  This is mainly a bug-fix release but also contains &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-wx5j-54mm-rqqq&quot;&gt;a fix for HTTP-request-smuggling&lt;/a&gt; and fixes a regression in &lt;code&gt;SslHandler&lt;/code&gt;. Because of this we urge everyone to upgrade as soon as possible.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP fails to validate against control chars in header names which may lead to HTTP request smuggling (&lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-wx5j-54mm-rqqq&quot;&gt;CVE-2021-43797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;JdkZlibEncoder can use pooled heap buffers for deflater input (&lt;a href=&quot;https://github.com/netty/netty/pull/11891&quot;&gt;#11891&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we always run the register task of native libraries (&lt;a href=&quot;https://github.com/netty/netty/pull/11887&quot;&gt;#11887&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Rewrite and simplify Recycler (&lt;a href=&quot;https://github.com/netty/netty/pull/11858&quot;&gt;#11858&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not allow third parties to provide Netty&#39;s native libraries (&lt;a href=&quot;https://github.com/netty/netty/pull/11856&quot;&gt;#11856&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix reentrancy bug in SslHandler which can cause IllegalReferenceCountException (&lt;a href=&quot;https://github.com/netty/netty/pull/11854&quot;&gt;#11854&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle InputStream.read() when it return -1 during writing to the ByteBuf (&lt;a href=&quot;https://github.com/netty/netty/pull/11837&quot;&gt;#11837&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.71.Final&quot;&gt;4.1.71.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AndreasBrieg&quot;&gt;@AndreasBrieg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dferstay&quot;&gt;@dferstay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/diegolovison&quot;&gt;@diegolovison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eltociear&quot;&gt;@eltociear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GisleGrimen&quot;&gt;@GisleGrimen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/martin-g&quot;&gt;@martin-g&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MoonLord-LM&quot;&gt;@MoonLord-LM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/purninavi&quot;&gt;@purninavi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rdesgroppes&quot;&gt;@rdesgroppes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rishika728&quot;&gt;@rishika728&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/skyguard1&quot;&gt;@skyguard1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TeslaCN&quot;&gt;@TeslaCN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/12/01/quic-0-0-24-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.24.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-12-01T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/12/01/quic-0-0-24-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.24.Final, which beside bug-fixes also introduce support for 0-RTT on the client-side.

The most important changes are:


Add zero rtt support for client (#362)
Correctly set cache size and timeout (#366)
Correctly fire SslHandshakeCompletionEvent.SUCCESS on the client side (#367)



For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.24.Final, which beside bug-fixes also introduce support for 0-RTT on the client-side.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add zero rtt support for client (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/362&quot;&gt;#362&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly set cache size and timeout (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/366&quot;&gt;#366&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly fire SslHandshakeCompletionEvent.SUCCESS on the client side (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/367&quot;&gt;#367&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/issues?q=is%3Aclosed+milestone%3A0.0.24.Final&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/11/22/quic-0-0-22-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.22.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-11-22T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/11/22/quic-0-0-22-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.22.Final, which is a bug-fix release and also fixes a regression.

The changes are:


Ensure CLOSE_FRAME can be produced when forceClose() is called (#360)
Remove Channel from map on timeout (#359)



For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.22.Final, which is a bug-fix release and also fixes a regression.&lt;/p&gt;

&lt;p&gt;The changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensure CLOSE_FRAME can be produced when forceClose() is called (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/360&quot;&gt;#360&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove Channel from map on timeout (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/359&quot;&gt;#359&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/issues?q=is%3Aclosed+milestone%3A0.0.22.Final&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/11/12/quic-0-0-21-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.21.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-11-12T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/11/12/quic-0-0-21-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.21.Final. This is mainly a feature release!

Important: This release changes the artifactId from  netty-incubator-codec-quic to netty-incubator-codec-native-quic to ensure that its possible to depend on multiple different architectures without ending up with duplicated classes on the classpath. Please change your dependency informations to reflect this.

The changes are:


Split native and classes to extra modules (#357)
Add zero rtt support for server (#356)
Use a CompositeByteBuf for GSO (#355)



For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.21.Final. This is mainly a feature release!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; This release changes the artifactId from  &lt;code&gt;netty-incubator-codec-quic&lt;/code&gt; to &lt;code&gt;netty-incubator-codec-native-quic&lt;/code&gt; to ensure that its possible to depend on multiple different architectures without ending up with duplicated classes on the classpath. Please change your dependency informations to reflect this.&lt;/p&gt;

&lt;p&gt;The changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Split native and classes to extra modules (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/357&quot;&gt;#357&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add zero rtt support for server (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/356&quot;&gt;#356&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use a CompositeByteBuf for GSO (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/355&quot;&gt;#355&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/issues?q=milestone%3A0.0.21.Final+is%3Aclosed&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/11/04/quic-0-0-20-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.20.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-11-04T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/11/04/quic-0-0-20-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.20.Final.

This release fixes a few bugs and also introduce the ability for SSL keylogging and so be able to debug via wireshark.

The most interesting changes are:


Correctly delete global references when free SSL_CTX (#344)
Guard against reentrancy in forceClose() (#345)
add keylog support using SSL_CTX_set_keylog_callback (#343)
Ensure we generate a correct OSGI compatible manifest for all our jars (#347)



Beside these there are various other small changes.

For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.20.Final.&lt;/p&gt;

&lt;p&gt;This release fixes a few bugs and also introduce the ability for SSL keylogging and so be able to debug via wireshark.&lt;/p&gt;

&lt;p&gt;The most interesting changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Correctly delete global references when free SSL_CTX (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/344&quot;&gt;#344&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Guard against reentrancy in forceClose() (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/345&quot;&gt;#345&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;add keylog support using SSL_CTX_set_keylog_callback (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/343&quot;&gt;#343&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we generate a correct OSGI compatible manifest for all our jars (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/347&quot;&gt;#347&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Beside these there are various other small changes.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/19?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/10/11/4-1-70-Final.html</id>
<title>Netty 4.1.70.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-10-11T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/10/11/4-1-70-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.70.Final.  This is mainly a bug-fix release. That said it contains an important fix that can cause "malformated" HTTP responses / requests when you use the SslHandler and chunked encoding. Because of this we highly recommend upgrading as soon as possible.

The most important changes are:


Fix gzip decoding when FLG.FHCRC is set (#11805)
Make static final buffers unreleasable and read-only (#11802)
Move java classes out of the native modules (#11798)
Exclude transitive dependencies of rarely used modules from netty-all (#11786)



For the details and all changes, please browse our issue tracker for 4.1.70.Final.

Thank You

Every idea...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.70.Final.  This is mainly a bug-fix release. That said it contains an important fix that can cause &quot;malformated&quot; HTTP responses / requests when you use the &lt;code&gt;SslHandler&lt;/code&gt; and chunked encoding. Because of this we highly recommend upgrading as soon as possible.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix gzip decoding when FLG.FHCRC is set (&lt;a href=&quot;https://github.com/netty/netty/pull/11805&quot;&gt;#11805&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make static final buffers unreleasable and read-only (&lt;a href=&quot;https://github.com/netty/netty/pull/11802&quot;&gt;#11802&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Move java classes out of the native modules (&lt;a href=&quot;https://github.com/netty/netty/pull/11798&quot;&gt;#11798&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exclude transitive dependencies of rarely used modules from netty-all (&lt;a href=&quot;https://github.com/netty/netty/pull/11786&quot;&gt;#11786&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.70.Final&quot;&gt;4.1.70.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aguedeney&quot;&gt;@aguedeney&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alex-db&quot;&gt;@alex-db&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AL333Z&quot;&gt;@AL333Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eltociear&quot;&gt;@eltociear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/10/11/4-1-69-Final.html</id>
<title>Netty 4.1.69.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-10-11T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/10/11/4-1-69-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.69.Final.  This is mainly a bug-fix release. That said ensure you read the Special notes section.

The most important changes are:


netty-all should not re-package jars (#11732)
Use install_tool_name and codesign to patch id of shaded library (#11734)
Add server-side TCP FastOpen support for macOS (#11735)
Ensure ServerChannel implementations accept multiple connections per read loop (#11729)
Allow to specify taskExecutor when construct HashedWheelTimer (#11728)
Fix little-endian get/set methods in SwappedByteBuf (#11706)
Ensure CompositeByteBuf.decompose(...) returns the non unwrapped buffer (#11696)
Fix ByteBufUtil indexOf ClassCastException (#11680)
netty-bom to provide resolved tcnative version (#11672)



For the details and all changes, please browse our issue...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.69.Final.  This is mainly a bug-fix release. That said ensure you read the Special notes section.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;netty-all should not re-package jars (&lt;a href=&quot;https://github.com/netty/netty/pull/11732&quot;&gt;#11732&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use install_tool_name and codesign to patch id of shaded library (&lt;a href=&quot;https://github.com/netty/netty/pull/11734&quot;&gt;#11734&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add server-side TCP FastOpen support for macOS (&lt;a href=&quot;https://github.com/netty/netty/pull/11735&quot;&gt;#11735&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure ServerChannel implementations accept multiple connections per read loop (&lt;a href=&quot;https://github.com/netty/netty/pull/11729&quot;&gt;#11729&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to specify taskExecutor when construct HashedWheelTimer (&lt;a href=&quot;https://github.com/netty/netty/pull/11728&quot;&gt;#11728&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix little-endian get/set methods in SwappedByteBuf (&lt;a href=&quot;https://github.com/netty/netty/pull/11706&quot;&gt;#11706&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure CompositeByteBuf.decompose(...) returns the non unwrapped buffer (&lt;a href=&quot;https://github.com/netty/netty/pull/11696&quot;&gt;#11696&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix ByteBufUtil indexOf ClassCastException (&lt;a href=&quot;https://github.com/netty/netty/pull/11680&quot;&gt;#11680&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;netty-bom to provide resolved tcnative version (&lt;a href=&quot;https://github.com/netty/netty/pull/11672&quot;&gt;#11672&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.69.Final&quot;&gt;4.1.69.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Special notes&lt;/h1&gt;

&lt;h2&gt;netty-all packaging changes&lt;/h2&gt;

&lt;p&gt;This release changes the way how the netty-all artifact is packaged / produced. While before it did contain all the code of all the other modules directly with this release we changed to to just depend on all the other modules. This will help users to not end up with the same classes but different versions in the classpath while should not have much impact on most of the users. The only users that might need to be concerened about these changes are these who did directly use the netty-all jar with custom build tools. For all the other build tools it should do the right thing and automatically include the needed dependencies.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fredericBregier&quot;&gt;@fredericBregier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gemmellr&quot;&gt;@gemmellr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gemmellr&quot;&gt;@huibinliupush&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marctrem&quot;&gt;@marctrem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rs017991&quot;&gt;@rs017991&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/skyguard1&quot;&gt;@skyguard1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sourabhsparkala&quot;&gt;@sourabhsparkala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tlf30&quot;&gt;@tlf30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zentol&quot;&gt;@zentol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zrlw&quot;&gt;@zrlw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/09/09/4-1-68-Final.html</id>
<title>Netty 4.1.68.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-09-09T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/09/09/4-1-68-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.68.Final. This release includes two security fixes related to compression / decompression of Bzip2 and Snappy so it is adviced to update to this version as soon as possible. Beside these security fixes this release also includes various other bugfixes. Last but not least it also adds support for Mac M1 for our native bits of netty.

The most important changes are:


Bzip2Decoder doesn't allow setting size restrictions for decompressed data (#CVE-2021-37136)
SnappyFrameDecoder doesn't restrict chunk length any may buffer skippable chunks in an unnecessary way (#CVE-2021-37137)
Respect jdk.tls.namedGroups when using native SSL implementation (#11660)
Add...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.68.Final. This release includes two security fixes related to compression / decompression of Bzip2 and Snappy so it is adviced to update to this version as soon as possible. Beside these security fixes this release also includes various other bugfixes. Last but not least it also adds support for Mac M1 for our native bits of netty.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bzip2Decoder doesn&#39;t allow setting size restrictions for decompressed data (&lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-grg4-wf29-r9vv&quot;&gt;#CVE-2021-37136&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SnappyFrameDecoder doesn&#39;t restrict chunk length any may buffer skippable chunks in an unnecessary way (&lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-9vjp-v76f-g363&quot;&gt;#CVE-2021-37137&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Respect jdk.tls.namedGroups when using native SSL implementation (&lt;a href=&quot;https://github.com/netty/netty/pull/11660&quot;&gt;#11660&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for mac m1 (&lt;a href=&quot;https://github.com/netty/netty/pull/11666&quot;&gt;#11666&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure HttpData#addContent/setContent releases the buffer before throwing IOException (&lt;a href=&quot;https://github.com/netty/netty/pull/11621&quot;&gt;#11621&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[HTTP2] Fix memory leak while writing empty data frame with padding (&lt;a href=&quot;https://github.com/netty/netty/pull/11633&quot;&gt;#11633&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &quot;RSASSA-PSS&quot; algorithm in allowed algorithm list (&lt;a href=&quot;https://github.com/netty/netty/pull/11626&quot;&gt;#11626&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t throw if null is given as ByteBuf when adding components (&lt;a href=&quot;https://github.com/netty/netty/pull/11613&quot;&gt;#11613&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add version for netty-tcnative* to bom (&lt;a href=&quot;https://github.com/netty/netty/pull/11609&quot;&gt;#11609&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SimpleChannelPool::notifyConnect should tryFailure when an exception occurs (&lt;a href=&quot;https://github.com/netty/netty/pull/11566&quot;&gt;#11566&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow server initiated renegotiate when using OpenSSL / BoringSSL based SSLEngine (&lt;a href=&quot;https://github.com/netty/netty/pull/11601&quot;&gt;#11601&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only suppert TLSv1.3 when JDK does support it as well (&lt;a href=&quot;https://github.com/netty/netty/pull/11604&quot;&gt;#11604&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix support for optional encoders errors in HttpContentCompressor (&lt;a href=&quot;https://github.com/netty/netty/pull/11582&quot;&gt;#11582&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a problem with IP protocol version confusion on MacOS when TCP FastOpen is enabled (&lt;a href=&quot;https://github.com/netty/netty/pull/11588&quot;&gt;#11588&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix IndexOutOfBoundsException caused by consuming the buffer multiple times in DatagramDnsQueryDecoder (&lt;a href=&quot;https://github.com/netty/netty/pull/11592&quot;&gt;#11592&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use StandardSocketOptions#IP_MULTICAST_IF as default source when join multicast groups (&lt;a href=&quot;https://github.com/netty/netty/pull/11585&quot;&gt;#11585&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we only log message on BoringSSL when the ciphers really are not the default (&lt;a href=&quot;https://github.com/netty/netty/pull/11583&quot;&gt;#11583&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.68.Final&quot;&gt;4.1.68.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chhsiao90&quot;&gt;@chhsiao90&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/diegolovison&quot;&gt;@diegolovison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hunter2046&quot;&gt;@hunter2046&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ikhoon&quot;&gt;@ikhoon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jameskleeh&quot;&gt;@jameskleeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jkuhn1&quot;&gt;@jkuhn1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kushalagrawal&quot;&gt;@kushalagrawal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mormegil-cz&quot;&gt;@mormegil-cz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/NiteshKant&quot;&gt;@NiteshKant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/orvdoo&quot;&gt;@orvdoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ostdms&quot;&gt;@ostdms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ran-su&quot;&gt;@ran-su&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/skyguard1&quot;&gt;@skyguard1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vietj&quot;&gt;@vietj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/08/16/4-1-67-Final.html</id>
<title>Netty 4.1.67.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-08-16T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/08/16/4-1-67-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.67.Final after one month of work.

The most important changes are:


server h2c upgrade fail when request doesn't have connection header (#11569)
Remove io.netty.http2.validateContentLength SystemProperty (#11561)
Add support for client-side TCP FastOpen to KQueue MacOS (#11560)
Make the TCP_FASTOPEN channel option transport agnostic (#11559)
Fix a bug with delegate/async SSL (#11537)
Ensure we always wrap if there is something left to be send to the remote peer (#11535)
JdkZlibDecoder may corrupt data when GZIP footer is fragmented (#11521)
Make DnsNameResolver.cnameCache() public (#11520)
Remove ApplicationProtocolNegotiationHandler when no SslHandler is present (#11503)
Add PromiseNotifier static method which takes care of cancel propagation (#11494)
Distribute weight...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.67.Final after one month of work.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;server h2c upgrade fail when request doesn&#39;t have connection header (&lt;a href=&quot;https://github.com/netty/netty/pull/11569&quot;&gt;#11569&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove io.netty.http2.validateContentLength SystemProperty (&lt;a href=&quot;https://github.com/netty/netty/pull/11561&quot;&gt;#11561&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for client-side TCP FastOpen to KQueue MacOS (&lt;a href=&quot;https://github.com/netty/netty/pull/11560&quot;&gt;#11560&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make the TCP_FASTOPEN channel option transport agnostic (&lt;a href=&quot;https://github.com/netty/netty/pull/11559&quot;&gt;#11559&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a bug with delegate/async SSL (&lt;a href=&quot;https://github.com/netty/netty/pull/11537&quot;&gt;#11537&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we always wrap if there is something left to be send to the remote peer (&lt;a href=&quot;https://github.com/netty/netty/pull/11535&quot;&gt;#11535&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;JdkZlibDecoder may corrupt data when GZIP footer is fragmented (&lt;a href=&quot;https://github.com/netty/netty/pull/11521&quot;&gt;#11521&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make DnsNameResolver.cnameCache() public (&lt;a href=&quot;https://github.com/netty/netty/pull/11520&quot;&gt;#11520&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove ApplicationProtocolNegotiationHandler when no SslHandler is present (&lt;a href=&quot;https://github.com/netty/netty/pull/11503&quot;&gt;#11503&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add PromiseNotifier static method which takes care of cancel propagation (&lt;a href=&quot;https://github.com/netty/netty/pull/11494&quot;&gt;#11494&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Distribute weight to children when closing stream (&lt;a href=&quot;https://github.com/netty/netty/pull/11490&quot;&gt;#11490&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.67.Final&quot;&gt;4.1.67.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dpy1123&quot;&gt;@dpy1123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eltociear&quot;&gt;@eltociear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kapsterio&quot;&gt;@kapsterio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/laosijikaichele&quot;&gt;@laosijikaichele&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/NiteshKant&quot;&gt;@NiteshKant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mjohannesse3&quot;&gt;@mjohannesse3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RockyLOMO&quot;&gt;@RockyLOMO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shemminga&quot;&gt;@shemminga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/skyguard1&quot;&gt;@skyguard1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/07/30/quic-0-0-17-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.17.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-07-30T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/07/30/quic-0-0-17-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.17.Final.

This release fixes a few bugs but also introduced support for SNI.

The most interesting changes are:


Correctly use jlong and jint in native function definition to fix possible segfault (#311)
Ensure the connectPromise is also notified when the channel is closed due the draining timeout (#312)
Add support for SNI (#313)



Beside these there are various other small changes.

For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.17.Final.&lt;/p&gt;

&lt;p&gt;This release fixes a few bugs but also introduced support for SNI.&lt;/p&gt;

&lt;p&gt;The most interesting changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Correctly use jlong and jint in native function definition to fix possible segfault (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/311&quot;&gt;#311&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure the connectPromise is also notified when the channel is closed due the draining timeout (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/312&quot;&gt;#312&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for SNI (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/313&quot;&gt;#313&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Beside these there are various other small changes.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/16?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/07/16/4-1-66-Final.html</id>
<title>Netty 4.1.66.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-07-16T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/07/16/4-1-66-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.66.Final after almost 2 months of work.

The most important changes are:


Introduce BrotliEncoder (#11256)
HttpPostMultipartRequestDecoder IndexOutOfBoundsException error (#11335)
Fix IpSubnetFilterRule with IPv6 Default Route does not accept all IPv6 addresses (#11351)
Fix issue if encoding is enabled but not used (#11358)
The MqttDecoder incorrectly skip bytes before throwing TooLongFrameException (#11362)
Use Two way algorithm to optimize ByteBufUtil.indexOf() method (#11367)
HttpUtil.getCharset() fails for charset in double-quotes (#11371)
Make all compression codecs support buffers that don't have arrays (#11387)
MQTT: validate fixed header bits (#11389)
Log if the user tries to explicit set TLSv1.3 ciphers and using BoringSSL (#11392)
Accept smaller server_max_window_bits than requested...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.66.Final after almost 2 months of work.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduce BrotliEncoder (&lt;a href=&quot;https://github.com/netty/netty/pull/11256&quot;&gt;#11256&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HttpPostMultipartRequestDecoder IndexOutOfBoundsException error (&lt;a href=&quot;https://github.com/netty/netty/pull/11335&quot;&gt;#11335&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix IpSubnetFilterRule with IPv6 Default Route does not accept all IPv6 addresses (&lt;a href=&quot;https://github.com/netty/netty/pull/11351&quot;&gt;#11351&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix issue if encoding is enabled but not used (&lt;a href=&quot;https://github.com/netty/netty/pull/11358&quot;&gt;#11358&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The MqttDecoder incorrectly skip bytes before throwing TooLongFrameException (&lt;a href=&quot;https://github.com/netty/netty/pull/11362&quot;&gt;#11362&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use Two way algorithm to optimize ByteBufUtil.indexOf() method (&lt;a href=&quot;https://github.com/netty/netty/pull/11367&quot;&gt;#11367&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HttpUtil.getCharset() fails for charset in double-quotes (&lt;a href=&quot;https://github.com/netty/netty/pull/11371&quot;&gt;#11371&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make all compression codecs support buffers that don&#39;t have arrays (&lt;a href=&quot;https://github.com/netty/netty/pull/11387&quot;&gt;#11387&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MQTT: validate fixed header bits (&lt;a href=&quot;https://github.com/netty/netty/pull/11389&quot;&gt;#11389&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Log if the user tries to explicit set TLSv1.3 ciphers and using BoringSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/11392&quot;&gt;#11392&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Accept smaller server_max_window_bits than requested (&lt;a href=&quot;https://github.com/netty/netty/pull/11394&quot;&gt;#11394&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Recycler.WeakOrderQueue drop Object hasBeenRecycled (&lt;a href=&quot;https://github.com/netty/netty/pull/11402&quot;&gt;#11402&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update graal annotations dependencies GAV to allow license GPL2+CE (&lt;a href=&quot;https://github.com/netty/netty/pull/11404&quot;&gt;#11404&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add ALPN Buffering to support HTTP/2 Prior Knowledge (&lt;a href=&quot;https://github.com/netty/netty/pull/11407&quot;&gt;#11407&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HttpUtil#normalizeAndGetContentLength() should handle empty value (&lt;a href=&quot;https://github.com/netty/netty/pull/11409&quot;&gt;#11409&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;support GMSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/11410&quot;&gt;#11410&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly use HandshakeStatus.NEED_WRAP when a handshake failed and a alert was produced (&lt;a href=&quot;https://github.com/netty/netty/pull/11412&quot;&gt;#11412&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;CombinedChannelDuplexHandler.removeOutboundHandler() cause connect(...) to not pass the correct parameters (&lt;a href=&quot;https://github.com/netty/netty/pull/11414&quot;&gt;#11414&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for Unix domain datagram sockets when using native epoll/kqueue transport (&lt;a href=&quot;https://github.com/netty/netty/pull/11423&quot;&gt;#11423&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Delay initialization of io.netty.handler.codec.compression.BrotliDecoder to runtime (&lt;a href=&quot;https://github.com/netty/netty/pull/11428&quot;&gt;#11428&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix Buffer Overflow During Lz4FrameEncoder close (&lt;a href=&quot;https://github.com/netty/netty/pull/11429&quot;&gt;#11429&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix HttpHeaderValue#XML_HTTP_REQUEST case (&lt;a href=&quot;https://github.com/netty/netty/pull/11433&quot;&gt;#11433&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add zstd encoder (&lt;a href=&quot;https://github.com/netty/netty/pull/11437&quot;&gt;#11437&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add SslProtocols and Cipher suites constants (&lt;a href=&quot;https://github.com/netty/netty/pull/11457&quot;&gt;#11457&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Introduce OpenSslAsyncPrivateKeyMethod which allows to asynchronously sign / decrypt the private key (&lt;a href=&quot;https://github.com/netty/netty/pull/11460&quot;&gt;#11460&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only run one SSL task per delegation (&lt;a href=&quot;https://github.com/netty/netty/pull/11462&quot;&gt;#11462&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add application/zstd content-type and zstd content-encoding (&lt;a href=&quot;https://github.com/netty/netty/pull/11463&quot;&gt;#11463&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add zstd http content compression support (&lt;a href=&quot;https://github.com/netty/netty/pull/11470&quot;&gt;#11470&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix a bug where SslHandler clients would not process Server Hello messages in a timely manner (&lt;a href=&quot;https://github.com/netty/netty/pull/11472&quot;&gt;#11472&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improve name matching in DNS answers (&lt;a href=&quot;https://github.com/netty/netty/pull/11474&quot;&gt;#11474&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SelfSignedCertificate should try BouncyCastle first (&lt;a href=&quot;https://github.com/netty/netty/pull/11487&quot;&gt;#11487&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?page=1&amp;amp;q=is%3Aclosed+milestone%3A4.1.66.Final&quot;&gt;4.1.66.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/adiantek&quot;&gt;@adiantek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/candrews&quot;&gt;@candrews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/danielbaniel&quot;&gt;@danielbaniel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dapengzhang0&quot;&gt;@dapengzhang0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elazarski&quot;&gt;@elazarski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eltociear&quot;&gt;@eltociear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fedorovr&quot;&gt;@fedorovr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fredericBregier&quot;&gt;@fredericBregier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gradinac&quot;&gt;@ggradinac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gwre-ivan&quot;&gt;@gwre-ivan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hbelmiro&quot;&gt;@hbelmiro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hylkevds&quot;&gt;@hylkevds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpron&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jjz921024&quot;&gt;@jjz921024&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kashike&quot;&gt;@kashike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ktqco&quot;&gt;@ktqco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/laosijikaichele&quot;&gt;@laosijikaichele&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/liubao68&quot;&gt;@liubao68&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mostroverkhov&quot;&gt;@mostroverkhov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/NiteshKant&quot;&gt;@NiteshKant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pmlopes&quot;&gt;@pmlopes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pjzhong&quot;&gt;@pjzhong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/skyguard1&quot;&gt;@skyguard1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stuartwdouglas&quot;&gt;@stuartwdouglas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/terrarier2111&quot;&gt;@terrarier2111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/togetsukyo&quot;&gt;@togetsukyo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TommyWind&quot;&gt;@TommyWind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Unev&quot;&gt;@Unev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vietj&quot;&gt;@vietj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wuare&quot;&gt;@wuare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wujimin&quot;&gt;@wujimin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/05/19/4-1-65-Final.html</id>
<title>Netty 4.1.65.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-05-19T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/05/19/4-1-65-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.65.Final, which beside fixes multiple bugs and includes some performance improvements as well.
As netty 4.1.64.Final did include two regressions which were found quickly after the release we decided to not announce it all and just roll a 4.1.65.Final which includes everything.

The most important changes are:


Fire SslHandshakeCompletionEvent after the last decoded data chunk (#11148)
Log fewer stack traces from initialisation code (#11164)
Fix StreamBufferingEncoder GOAWAY bug (#11144)
Ensure DnsNameResolver resolves the host(computer) name on Windows (#11167)
Fix support for IP_RECVORIGDSTADDR when using native epoll transport (#11173)
BouncyCastle support (#11157)
SimpleChannelPromiseAggregator use first exception instead of last (#11168)
Add a...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.65.Final, which beside fixes multiple bugs and includes some performance improvements as well.
As netty 4.1.64.Final did include two regressions which were found quickly after the release we decided to not announce it all and just roll a 4.1.65.Final which includes everything.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fire SslHandshakeCompletionEvent after the last decoded data chunk (&lt;a href=&quot;https://github.com/netty/netty/pull/11148&quot;&gt;#11148&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Log fewer stack traces from initialisation code (&lt;a href=&quot;https://github.com/netty/netty/pull/11164&quot;&gt;#11164&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix StreamBufferingEncoder GOAWAY bug (&lt;a href=&quot;https://github.com/netty/netty/pull/11144&quot;&gt;#11144&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure DnsNameResolver resolves the host(computer) name on Windows (&lt;a href=&quot;https://github.com/netty/netty/pull/11167&quot;&gt;#11167&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix support for IP_RECVORIGDSTADDR when using native epoll transport (&lt;a href=&quot;https://github.com/netty/netty/pull/11173&quot;&gt;#11173&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;BouncyCastle support (&lt;a href=&quot;https://github.com/netty/netty/pull/11157&quot;&gt;#11157&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SimpleChannelPromiseAggregator use first exception instead of last (&lt;a href=&quot;https://github.com/netty/netty/pull/11168&quot;&gt;#11168&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add a new HTTP/2 pseudo header :protocol (&lt;a href=&quot;https://github.com/netty/netty/pull/11192&quot;&gt;#11192&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enable TLSv1.3 when using BouncyCastle ALPN support (&lt;a href=&quot;https://github.com/netty/netty/pull/11193&quot;&gt;#11193&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly throw ErrorDataDecoderException for errors while decoding (&lt;a href=&quot;https://github.com/netty/netty/pull/11198&quot;&gt;#11198&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Destroy HttpPostMultipartRequestDecoder if contructor throws (&lt;a href=&quot;https://github.com/netty/netty/pull/11207&quot;&gt;#11207&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ReferenceCountedOpenSslEngine unwrap handshake complete status fix (&lt;a href=&quot;https://github.com/netty/netty/pull/11210&quot;&gt;#11210&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix Memory release not correctly in Multipart Decoder (&lt;a href=&quot;https://github.com/netty/netty/pull/11188&quot;&gt;#11188&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Preload classes before calling native OnLoad function to prevent classloader deadlock (&lt;a href=&quot;https://github.com/netty/netty/pull/11215&quot;&gt;#11215&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only fall back to CNAME on A/AAAA queries (&lt;a href=&quot;https://github.com/netty/netty/pull/11216&quot;&gt;#11216&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Re-order list of resolvers according to their searchOrder (&lt;a href=&quot;https://github.com/netty/netty/pull/11236&quot;&gt;#11236&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Disable TLSv1 and TLSv1.1 by default (&lt;a href=&quot;https://github.com/netty/netty/pull/11237&quot;&gt;#11237&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use tasks by default when using openssl based SSL provider (&lt;a href=&quot;https://github.com/netty/netty/pull/11242&quot;&gt;#11242&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add DefaultHostsFileEntriesResolver#addresses to provide all hosts file&#39;s entries for a hostname (&lt;a href=&quot;https://github.com/netty/netty/pull/11246&quot;&gt;#11246&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Introduce BrotliDecoder (&lt;a href=&quot;https://github.com/netty/netty/pull/10960&quot;&gt;#10960&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix loading of the native library for DNS resolution on MacOS (&lt;a href=&quot;https://github.com/netty/netty/pull/11260&quot;&gt;#11260&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/240?closed=1&quot;&gt;4.1.65.Final&lt;/a&gt; and &lt;a href=&quot;https://github.com/netty/netty/milestone/239?closed=1&quot;&gt;4.1.6.4.Final&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;Classloader deadlock workaround&lt;/h2&gt;

&lt;p&gt;It seems like more recent version of the JDK can trigger a classloader deadlock easily when trying to load our JNI based code. This release includes a work-around for this while the OpenJDK developers are investigating on how this can be fixed in the OpenJDK itself.
For more details please check (&lt;a href=&quot;https://github.com/netty/netty/pull/11215&quot;&gt;#11215&lt;/a&gt;), which contains all the related links.&lt;/p&gt;

&lt;h2&gt;Disable TLSv1 and TLSv1.1 by default&lt;/h2&gt;

&lt;p&gt;As TLSv1 and TLSv1.1 are considered insecure and are also disabled by default now in the OpenJDK we did follow the same path here. That said if you still need to supported these you can explicit enable them when using the &lt;code&gt;SslContextBuilder&lt;/code&gt; to build the &lt;code&gt;SslContext&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;HTTP Brotli support&lt;/h2&gt;

&lt;p&gt;To be able to make use of the new &lt;a href=&quot;https://github.com/netty/netty/pull/10960&quot;&gt;BrotliDecoder&lt;/a&gt; you need to ensure the &lt;a href=&quot;https://github.com/hyperxpro/Brotli4j&quot;&gt;Brotli4J&lt;/a&gt; jars are on your class-path.&lt;/p&gt;

&lt;p&gt;For example if you use maven this would be done by specify the following dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.aayushatharva.brotli4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;brotli4j&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
    &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.aayushatharva.brotli4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;native-linux-x86_64&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
    &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.aayushatharva.brotli4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;native-osx-x86_64&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
    &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.aayushatharva.brotli4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;native-windows-x86_64&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
    &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the dependencies are added HTTP decompression for brotli will be supported out of the box.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abezhovets&quot;&gt;@abezhovets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bhashinee&quot;&gt;@benevans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bhashinee&quot;&gt;@Bhashinee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/boris-unckel&quot;&gt;@boris-unckel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chenqwwq&quot;&gt;@chenqwwq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dapengzhang0&quot;&gt;@dapengzhang0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fredericBregier&quot;&gt;@fredericBregier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gwre-ivan&quot;&gt;@gwre-ivan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpron&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jameskleeh&quot;&gt;@jameskleeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kevinw66&quot;&gt;@kevinw66&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/koh-osug&quot;&gt;@koh-osug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LiyuanLacfo&quot;&gt;@LiyuanLacfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/NiteshKant&quot;&gt;@NiteshKant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/roycarser&quot;&gt;@roycarser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/skyguard1&quot;&gt;@skyguard1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Stwissel&quot;&gt;@Stwissel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/terrarier2111&quot;&gt;@terrarier2111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vietj&quot;&gt;@vietj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/05/03/quic-0-0-11-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.11.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-05-03T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/05/03/quic-0-0-11-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.11.Final.

This release introduces two new abstractions that allows:


Preload classes before calling native OnLoad function to prevent classloader leak (#260)
Only access static field once we ensured we could load the native lib (#255)
Update quiche so we can support QUIC v1 as well (#256)
Allow to configure which QUIC version is used (#254)
Allow the user to query which QUIC versions are currently supported (#253)
Allows use direct buffers when trying to read from a stream (#247)



Beside these there are various other small changes.

For more details related to this release see our bug-tracker.

For more details about...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.11.Final.&lt;/p&gt;

&lt;p&gt;This release introduces two new abstractions that allows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preload classes before calling native OnLoad function to prevent classloader leak (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/260&quot;&gt;#260&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only access static field once we ensured we could load the native lib (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/255&quot;&gt;#255&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update quiche so we can support QUIC v1 as well (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/256&quot;&gt;#256&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to configure which QUIC version is used (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/254&quot;&gt;#254&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow the user to query which QUIC versions are currently supported (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/253&quot;&gt;#253&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allows use direct buffers when trying to read from a stream (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/247&quot;&gt;#247&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Beside these there are various other small changes.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/10?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/04/01/4-1-63-Final.html</id>
<title>Netty 4.1.63.Final released - Regression fix</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-04-01T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/04/01/4-1-63-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we decided that we should do another netty release as just after we released  4.1.62.Final we noticed another regression that could lead to an re-entrance problem in the SslHandler. This could cause encoding problems in some rare cases. As the SslHandler is a critical component of netty we think a quick release is warranted.

For more details please see (#11133)....
</summary>
<content type="html">
&lt;p&gt;Today we decided that we should do another netty release as just after we released  &lt;a href=&quot;https://github.com/netty/netty/milestone/237?closed=1&quot;&gt;4.1.62.Final&lt;/a&gt; we noticed another regression that could lead to an re-entrance problem in the &lt;code&gt;SslHandler&lt;/code&gt;. This could cause encoding problems in some rare cases. As the &lt;code&gt;SslHandler&lt;/code&gt; is a critical component of netty we think a quick release is warranted.&lt;/p&gt;

&lt;p&gt;For more details please see (&lt;a href=&quot;https://github.com/netty/netty/pull/11133&quot;&gt;#11133&lt;/a&gt;).&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/31/release-day.html</id>
<title>Release day for HTTP/3, QUIC and IO_URING</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-03-31T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/31/release-day.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
After announcing the release of netty-4.1.62.Final earlier today I have more news to share... We did another three releases today.

Netty/Incubator/Codec/Quic 0.0.10.Final released

The new release of netty-incubator-codec-quic comes with a few small bug-fixes but most importantly with this release we started to also support linux-aarch64, which means you will not only be able to use the quic codec itself on linux-aarch64 but also our http3 codec that depends on it.

For more details about the included changes please check the issue-tracker

Netty/Incubator/Codec/Http3 0.0.3.Final released

As stated above you are now be able to run the http3 codec on linux-aarch64 as well, but thats not...
</summary>
<content type="html">
&lt;p&gt;After announcing the release of &lt;a href=&quot;https://netty.io/news/2021/03/31/4-1-62-Final.html&quot;&gt;netty-4.1.62.Final&lt;/a&gt; earlier today I have more news to share... We did another three releases today.&lt;/p&gt;

&lt;h2&gt;Netty/Incubator/Codec/Quic 0.0.10.Final released&lt;/h2&gt;

&lt;p&gt;The new release of netty-incubator-codec-quic comes with a few small bug-fixes but most importantly with this release we started to also support linux-aarch64, which means you will not only be able to use the quic codec itself on linux-aarch64 but also our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3&quot;&gt;http3 codec&lt;/a&gt; that depends on it.&lt;/p&gt;

&lt;p&gt;For more details about the included changes please check the &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/9?closed=1&quot;&gt;issue-tracker&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Netty/Incubator/Codec/Http3 0.0.3.Final released&lt;/h2&gt;

&lt;p&gt;As stated above you are now be able to run the http3 codec on linux-aarch64 as well, but thats not all. This release also includes a few small bugfixes when it comes to handling CONNECT requests and push streams in general&lt;/p&gt;

&lt;p&gt;For more details about the included changes please check the &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3/milestone/3?closed=1&quot;&gt;issue-tracker&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Netty/Incubator/Native/Transport/IOUring 0.0.5.Final released&lt;/h2&gt;

&lt;p&gt;The new release of netty-incubator-transport-io_uring contains various interesting changes. First of we now use GCC10 when cross compile and so may be able to make use of LSE when you run on aarch64. Beside this this release also add support for UDP_GSO to increase the performance when sending datagrams over the wire.&lt;/p&gt;

&lt;p&gt;For more details about the included changes please check the &lt;a href=&quot;https://github.com/netty/netty-incubator-transport-io_uring/milestone/5?closed=1&quot;&gt;issue-tracker&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/31/4-1-62-Final.html</id>
<title>Netty 4.1.62.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-03-31T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/31/4-1-62-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Just after releasing netty 4.1.61.Final yesterday we decided to do a quick followup release a.k.a netty 4.1.612.Final.  to fix a regression that slipped in. The regression affects only users that use the native KQueue transport. For more details please see (#11128). Special thanks to @violetagg for reporting the regression in such a fast manner and also providing a fix for it!...
</summary>
<content type="html">
&lt;p&gt;Just after releasing netty &lt;a href=&quot;https://github.com/netty/netty/milestone/236?closed=1&quot;&gt;4.1.61.Final&lt;/a&gt; yesterday we decided to do a quick followup release a.k.a netty &lt;a href=&quot;https://github.com/netty/netty/milestone/237?closed=1&quot;&gt;4.1.612.Final&lt;/a&gt;.  to fix a regression that slipped in. The regression affects only users that use the native KQueue transport. For more details please see (&lt;a href=&quot;https://github.com/netty/netty/pull/11128&quot;&gt;#11128&lt;/a&gt;). Special thanks to &lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt; for reporting the regression in such a fast manner and also providing a fix for it!&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/30/4-1-61-Final.html</id>
<title>Netty 4.1.61.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-03-30T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/30/4-1-61-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.61.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the codec-http2 package and proxy HTTP/2 to HTTP/1.1. This fix is a follow up of the previous fix done as part of CVE-2021-21295 as we missed to handle one case.

For more details about the impact of the CVE (CVE-2021-21409) check the Security Advisory.

The most important changes are:


Validate Content-Length header in HTTP/2 decoder (CVE-2021-21409)
Add support for UDP_GRO (#11120)
DefaultThreadFactory must not use Thread.currentThread() when constructed without ThreadGroup (#11119)
Let's use gcc10 when cross-compiling for LSE support...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.61.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the &lt;code&gt;codec-http2&lt;/code&gt; package and proxy HTTP/2 to HTTP/1.1. This fix is a follow up of the previous fix done as part of &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-wm47-8v5p-wjpj&quot;&gt;CVE-2021-21295&lt;/a&gt; as we missed to handle one case.&lt;/p&gt;

&lt;p&gt;For more details about the impact of the CVE (CVE-2021-21409) check the &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-f256-j965-7f32&quot;&gt;Security Advisory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validate Content-Length header in HTTP/2 decoder (&lt;a href=&quot;https://github.com/netty/netty/commit/b0fa4d5aab4215f3c22ce6123dd8dd5f38dc0432&quot;&gt;CVE-2021-21409&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for UDP_GRO (&lt;a href=&quot;https://github.com/netty/netty/pull/11120&quot;&gt;#11120&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DefaultThreadFactory must not use Thread.currentThread() when constructed without ThreadGroup (&lt;a href=&quot;https://github.com/netty/netty/pull/11119&quot;&gt;#11119&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Let&#39;s use gcc10 when cross-compiling for LSE support (&lt;a href=&quot;https://github.com/netty/netty/pull/11112&quot;&gt;#11112&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to have an empty path when convert a CONNECT request (&lt;a href=&quot;https://github.com/netty/netty/pull/11108&quot;&gt;#11108&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we can correctly propagate exceptions to streams even if endStream flag is set (&lt;a href=&quot;https://github.com/netty/netty/pull/11105&quot;&gt;#11105&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not send GOAWAY frame before connection preface (&lt;a href=&quot;https://github.com/netty/netty/pull/11107&quot;&gt;#11107&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Continue reading when the number of bytes is less then the configured number of bytes when using DatagramChannels (&lt;a href=&quot;https://github.com/netty/netty/pull/11089&quot;&gt;#11089&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to configure the maximum number of message to write per eventloop (&lt;a href=&quot;https://github.com/netty/netty/pull/11086&quot;&gt;#11086&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SslHandler flushing with TCP Fast Open fix (&lt;a href=&quot;https://github.com/netty/netty/pull/11077&quot;&gt;#11077&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Also support CompositeByteBuf with SegmentedDatagramPacket (&lt;a href=&quot;https://github.com/netty/netty/pull/11081&quot;&gt;#11081&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Return correct result for Futures that are returned from UnorderedThreadPoolExecutor (&lt;a href=&quot;https://github.com/netty/netty/pull/11074&quot;&gt;#11074&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix alignment handling for pooled direct buffers (&lt;a href=&quot;https://github.com/netty/netty/pull/11106&quot;&gt;#11106&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/236?closed=1&quot;&gt;4.1.61.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;CVE-2021-21409 - request smuggling&lt;/h2&gt;

&lt;p&gt;This release fixes a possible security problem which have allowes for request smuggling, check the &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-f256-j965-7f32&quot;&gt;Security Advisory&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h2&gt;GRO support for &lt;code&gt;EpollDatagramChannel&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This release also adds support for GRO (&lt;code&gt;UDP_SEGMENT&lt;/code&gt;) when using the native &lt;code&gt;EpollDatagramChannel&lt;/code&gt; and running on a system with a recent enough kernel. You can make use of this by using the &lt;code&gt;EpollChannelOption.UDP_GRO&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;For more detail on GRO please read &lt;a href=&quot;https://lwn.net/Articles/768995/&quot;&gt;the LWN article&lt;/a&gt; which explains how this can be used to maximize performance when using &lt;code&gt;QUIC&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;LSE support for AARCH64&lt;/h2&gt;

&lt;p&gt;This release switched to use GCC10 for cross-compiling and so enable the usage of LSE when running on AARCH64. Using LSE can have a huge performance impact. For more details please read the &lt;a href=&quot;https://mysqlonarm.github.io/ARM-LSE-and-MySQL/&quot;&gt;MySQL on ARM blogpost&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alalag1&quot;&gt;@alalag1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bennett-Lynch&quot;&gt;@Bennett-Lynch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elharo&quot;&gt;@elharo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/meshcow&quot;&gt;@meshcow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stuartwdouglas&quot;&gt;@stuartwdouglas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/25/quic-0-0-9-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.9.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-03-25T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/25/quic-0-0-9-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.9.Final.

This release introduces two new abstractions that allows:


support of GSO for any Channel that supports it by let the user plug-in the correct implementation (#222)
support for different flush strategies to ensure packets are transfered in a timely manner  (#228)



Beside these there are various other small changes.

For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.9.Final.&lt;/p&gt;

&lt;p&gt;This release introduces two new abstractions that allows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;support of GSO for any &lt;code&gt;Channel&lt;/code&gt; that supports it by let the user plug-in the correct implementation (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/222&quot;&gt;#222&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;support for different flush strategies to ensure packets are transfered in a timely manner  (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/228&quot;&gt;#228&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Beside these there are various other small changes.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/8?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/12/http3-0-0-2-Final.html</id>
<title>Netty/Incubator/Codec/Http3 0.0.2.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-03-12T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/12/http3-0-0-2-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
After we just announce the initial release of our http3 codec a week ago I am happy to announce the next release today. This release fixes various bugs and now fully pass the h3spec http3 tests.
Beside bug-fixes we also upgraded to netty 4.1.60.Final and netty-incubator-codec-quic 0.0.8.Final.

For more details on how to make use of this code please read our initial announcement.

All the details on the recent changes for this release can be found in our issue tracker.

Where can I find the project ?

The project itself lives on GitHub....
</summary>
<content type="html">
&lt;p&gt;After we just announce the initial release of our http3 codec a week ago I am happy to announce the next release today. This release fixes various bugs and now fully pass the &lt;a href=&quot;https://github.com/kazu-yamamoto/h3spec&quot;&gt;h3spec http3 tests&lt;/a&gt;.
Beside bug-fixes we also upgraded to &lt;a href=&quot;https://netty.io/news/2021/03/09/4-1-60-Final.html&quot;&gt;netty 4.1.60.Final&lt;/a&gt; and &lt;a href=&quot;https://netty.io/news/2021/03/09/quic-0-0-8-Final.html&quot;&gt;netty-incubator-codec-quic 0.0.8.Final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details on how to make use of this code please read our &lt;a href=&quot;https://netty.io/news/2021/03/04/http3-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All the details on the recent changes for this release can be found in our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3/milestone/2&quot;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Where can I find the project ?&lt;/h1&gt;

&lt;p&gt;The project itself lives on &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/09/quic-0-0-8-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.8.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-03-09T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/09/quic-0-0-8-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.8.Final, just after our release of netty 4.1.60.Final earlier today.

This release not only fixes a few bugs but also makes use of the new GSO support in netty if the EpollDatagramChannel is used. This change helps to improve the throughput in our benchmarks quite a bit when running h2load (patched for QUIC / HTTP3 support) against our HTTP3 implementation.

Without GSO:

norman@ubuntu-dev:~$ LD_PRELOAD="/home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libssl.so.1.1 /home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libcrypto.so.1.1"  /home/norman/Apps/nghttp2-quic/bin/h2load  -n 10 -m 1 -c 1 -t 1 -T 30 --npn-list=h3-29 https://10.211.55.8:8888
starting benchmark...
spawning thread #0: 1 total client(s). 10 total requests
TLS Protocol: TLSv1.3
Cipher: TLS_AES_128_GCM_SHA256
Server Temp Key:...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.8.Final, just after our release of netty 4.1.60.Final earlier today.&lt;/p&gt;

&lt;p&gt;This release not only fixes a few bugs but also makes use of the new &lt;a href=&quot;https://github.com/netty/netty/pull/11038&quot;&gt;GSO&lt;/a&gt; support in netty if the &lt;code&gt;EpollDatagramChannel&lt;/code&gt; is used. This change helps to improve the throughput in our benchmarks quite a bit when running &lt;a href=&quot;https://github.com/nghttp2/nghttp2/tree/quic&quot;&gt;h2load&lt;/a&gt; (patched for QUIC / HTTP3 support) against our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3&quot;&gt;HTTP3&lt;/a&gt; implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without GSO&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;norman@ubuntu-dev:~$ LD_PRELOAD=&quot;/home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libssl.so.1.1 /home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libcrypto.so.1.1&quot;  /home/norman/Apps/nghttp2-quic/bin/h2load  -n 10 -m 1 -c 1 -t 1 -T 30 --npn-list=h3-29 https://10.211.55.8:8888
starting benchmark...
spawning thread #0: 1 total client(s). 10 total requests
TLS Protocol: TLSv1.3
Cipher: TLS_AES_128_GCM_SHA256
Server Temp Key: X25519 253 bits
Application protocol: h3-29
progress: 10% done
progress: 20% done
progress: 30% done
progress: 40% done
progress: 50% done
progress: 60% done
progress: 70% done
progress: 80% done
progress: 90% done
progress: 100% done

finished in 4.00s, 2.50 req/s, 250.36MB/s
requests: 10 total, 10 started, 10 done, 10 succeeded, 0 failed, 0 errored, 0 timeout
status codes: 10 2xx, 0 3xx, 0 4xx, 0 5xx
traffic: 1000.31MB (1048896064) total, 30B (30) headers (space savings 70.00%), 1000.00MB (1048576000) data
UDP datagram: 18509 sent, 864619 received
                     min         max         mean         sd        +/- sd
time for request:   377.25ms    436.32ms    398.96ms     19.83ms    60.00%
time for connect:     4.46ms      4.46ms      4.46ms         0us   100.00%
time to 1st byte:     6.58ms      6.58ms      6.58ms         0us   100.00%
req/s           :       2.50        2.50        2.50        0.00   100.00%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;With GSO&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;norman@ubuntu-dev:~$ LD_PRELOAD=&quot;/home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libssl.so.1.1 /home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libcrypto.so.1.1&quot;  /home/norman/Apps/nghttp2-quic/bin/h2load  -n 10 -m 1 -c 1 -t 1 -T 30 --npn-list=h3-29 https://10.211.55.8:8888
starting benchmark...
spawning thread #0: 1 total client(s). 10 total requests
TLS Protocol: TLSv1.3
Cipher: TLS_AES_128_GCM_SHA256
Server Temp Key: X25519 253 bits
Application protocol: h3-29
progress: 10% done
progress: 20% done
progress: 30% done
progress: 40% done
progress: 50% done
progress: 60% done
progress: 70% done
progress: 80% done
progress: 90% done
progress: 100% done

finished in 2.51s, 3.98 req/s, 398.08MB/s
requests: 10 total, 10 started, 10 done, 10 succeeded, 0 failed, 0 errored, 0 timeout
status codes: 10 2xx, 0 3xx, 0 4xx, 0 5xx
traffic: 1000.31MB (1048896064) total, 30B (30) headers (space savings 70.00%), 1000.00MB (1048576000) data
UDP datagram: 4342 sent, 864341 received
                     min         max         mean         sd        +/- sd
time for request:   231.79ms    272.21ms    250.80ms     15.04ms    40.00%
time for connect:     3.50ms      3.50ms      3.50ms         0us   100.00%
time to 1st byte:     4.67ms      4.67ms      4.67ms         0us   100.00%
req/s           :       3.98        3.98        3.98        0.00   100.00%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/7?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add support for qlog (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/197&quot;&gt;#197&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add QuicStreamLimitChangedEvent that will be fired once we can create more streams again (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/198&quot;&gt;#198&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we always call quiche_conn_on_timeout(...) when a timeout is about to run (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/206&quot;&gt;#206&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Rewrite QuicheQuicStreamChannel to not do any extra queued and also handle writability better (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/208&quot;&gt;#208&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update to latest quiche commit (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/211&quot;&gt;#211&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support shutting down the stream with an error code (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/213&quot;&gt;#213&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make use of GSO when possible  (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/204&quot;&gt;#204&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/09/4-1-60-Final.html</id>
<title>Netty 4.1.60.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-03-09T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/09/4-1-60-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.60.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the codec-http2 package and proxy HTTP/2 to HTTP/1.1 .
This release also includes a change that makes it possible to enable client side SSL session caching when using our native SSL implementation.

For more details about the impact of the CVE (CVE-2021-21295) check the Security Advisory.

The most important changes are:


Validate Content-Length header in HTTP/2 decoder (CVE-2021-21295)
Enable stateless resumption for TLSv1.3 by default when using OpenSSL / BoringSSL (#10997)
Allow blocking calls when parsing etcResolver/hosts files (#11009)
fixed...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.60.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the &lt;code&gt;codec-http2&lt;/code&gt; package and proxy HTTP/2 to HTTP/1.1 .
This release also includes a change that makes it possible to enable client side SSL session caching when using our native SSL implementation.&lt;/p&gt;

&lt;p&gt;For more details about the impact of the CVE (CVE-2021-21295) check the &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-wm47-8v5p-wjpj&quot;&gt;Security Advisory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validate Content-Length header in HTTP/2 decoder (&lt;a href=&quot;https://github.com/netty/netty/commit/89c241e3b1795ff257af4ad6eadc616cb2fb3dc4&quot;&gt;CVE-2021-21295&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enable stateless resumption for TLSv1.3 by default when using OpenSSL / BoringSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/10997&quot;&gt;#10997&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow blocking calls when parsing etcResolver/hosts files (&lt;a href=&quot;https://github.com/netty/netty/pull/11009&quot;&gt;#11009&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;fixed ipv6 address join ipv4 group failed (&lt;a href=&quot;https://github.com/netty/netty/pull/11015&quot;&gt;#11015&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Propagate SSLException to the Http2StreamChannels (&lt;a href=&quot;https://github.com/netty/netty/pull/11023&quot;&gt;#11023&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Less noisy logging in DnsServerAddressStreamProviders (&lt;a href=&quot;https://github.com/netty/netty/pull/11031&quot;&gt;#11031&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HttpPostMultipartRequestDecoder performance regression (&lt;a href=&quot;https://github.com/netty/netty/issues/10508&quot;&gt;#10508&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for UDP_SEGMENT (GSO) when using sendmmsg (&lt;a href=&quot;https://github.com/netty/netty/pull/11038&quot;&gt;#11038&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure removal from queue happens before writeAndFlush(...) is called (&lt;a href=&quot;https://github.com/netty/netty/pull/11049&quot;&gt;#11049&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix NPE that can happen in the WriteTimeoutHandler when multiple executors are used (&lt;a href=&quot;https://github.com/netty/netty/pull/11053&quot;&gt;#11053&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support session cache for client and server when using native SSLEngine implementation (&lt;a href=&quot;https://github.com/netty/netty/pull/10994&quot;&gt;#10994&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to config dns bind address in DnsNameResolver (&lt;a href=&quot;https://github.com/netty/netty/pull/11061&quot;&gt;#11061&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;SSL Session caching&lt;/h2&gt;

&lt;p&gt;As stated before this release includes a change which allows to use SSL session caching on the client side when using our native SSL implementation. Unfortunally the use of the cache may trigger a JDK bug on the remote peer if the remote peer uses the JDK SSL implementation for TLSv1.3. Because of that we decided to not enable the session caching by default on the client-side. If you still want to enable it you can either use &lt;code&gt;-Dio.netty.handler.ssl.openssl.sessionCacheClient=true&lt;/code&gt; or explict enable it via the &lt;code&gt;OpenSslContext&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;OpenSslContext context = ...;
contest.sessionContext().setSessionCacheEnabled(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;GSO support for &lt;code&gt;EpollDatagramChannel&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This release also adds support for GSO (&lt;code&gt;UDP_SEGMENT&lt;/code&gt;) when using the native &lt;code&gt;EpollDatagramChannel&lt;/code&gt; and running on a system with a recent enough kernel. You can make use of this by writing &lt;code&gt;SegmentedDatagramPacket&lt;/code&gt;s to the channel.&lt;/p&gt;

&lt;p&gt;For more detail on GSO please read &lt;a href=&quot;https://blog.cloudflare.com/accelerating-udp-packet-transmission-for-quic/&quot;&gt;the blogpost by cloudflare&lt;/a&gt; which explains how this can be used to maximize performance when using &lt;code&gt;QUIC&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;CVE-2021-21295 - request smuggling&lt;/h2&gt;

&lt;p&gt;This release fixes a possible security problem which have allowes for request smuggling, check the &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-wm47-8v5p-wjpj&quot;&gt;Security Advisory&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artgon&quot;&gt;@artgon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Arun-LinkedIn&quot;&gt;@Arun-LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aztosca&quot;&gt;@aztosca&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bennett-Lynch&quot;&gt;@Bennett-Lynch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dadepo&quot;&gt;@dadepo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/discko&quot;&gt;@discko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/horizonzy&quot;&gt;@horizonzy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Shoothzj&quot;&gt;@Shoothzj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/strugcoder&quot;&gt;@strugcoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wineway&quot;&gt;@wineway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zentol&quot;&gt;@zentol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/04/http3-0-0-1-Final.html</id>
<title>Netty/Incubator/Codec/Http3 0.0.1.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-03-04T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/04/http3-0-0-1-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
After a few months of work I am happy to announce the first incubator release of our own HTTP/3 codec. This codec is a pure Java implementation (written from scratch) that is using our own QUIC abstraction under the hood.

While it is still early days this implementation is mostly "feature-complete" and as far as we are aware of full-functional. Please test it out and provide feedback and/or PRs :)

Incubator, what does this mean ?

To be able to work on new exciting features without "affecting" the core of netty we decided to start development of such features in the "incubator". This...
</summary>
<content type="html">
&lt;p&gt;After a few months of work I am happy to announce the first incubator release of our own &lt;a href=&quot;https://quicwg.org/base-drafts/draft-ietf-quic-http.html&quot;&gt;HTTP/3&lt;/a&gt; codec. This codec is a pure Java implementation (written from scratch) that is using our own &lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-quic-transport/?include_text=1&quot;&gt;QUIC&lt;/a&gt; abstraction under the hood.&lt;/p&gt;

&lt;p&gt;While it is still early days this implementation is mostly &quot;feature-complete&quot; and as far as we are aware of full-functional. Please test it out and provide feedback and/or PRs :)&lt;/p&gt;

&lt;h1&gt;Incubator, what does this mean ?&lt;/h1&gt;

&lt;p&gt;To be able to work on new exciting features without &quot;affecting&quot; the core of netty we decided to start development of such features in the &quot;incubator&quot;. This means these features will be developed in a seperate repository and only be merged back into the core netty repository once we feel that we can guarantee we not need to break the API anymore and consider these production ready. This hopefully helps to clarify expections and stability of the code and so people should be fully aware that APIs may change. Beside this it also allows to use different release schedules.&lt;/p&gt;

&lt;h1&gt;How can I use the HTTP/3 codec ?&lt;/h1&gt;

&lt;p&gt;You we will need to include the right dependency of the HTTP/3 codec and QUIC codec. At the moment we support Linux (x86_64), MacOS (x86_64) and Windows (x86_64) for the QUIC codec.&lt;/p&gt;

&lt;p&gt;An example for maven / linux would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-quic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.7.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;linux-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-http3&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you use macOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-quic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.7.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;osx-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-http3&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you use windows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-quic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.7.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;windows-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-http3&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also simplify things by using the &lt;a href=&quot;https://github.com/trustin/os-maven-plugin&quot;&gt;os-maven-plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;How would I setup a HTTP/3 server / HTTP/3 client?&lt;/h1&gt;

&lt;p&gt;Bootstrapping a HTTP/3 server looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public final class Http3ServerExample {
    private static final byte[] CONTENT = &quot;Hello World!\r\n&quot;.getBytes(CharsetUtil.US_ASCII);
    private Http3ServerExample() { }

    public static void main(String... args) throws Exception {
        class Http3ServerHandler extends Http3RequestStreamInboundHandler {
            @Override
            protected void channelRead(
                    ChannelHandlerContext ctx, Http3HeadersFrame frame, boolean isLast) {
                if (isLast) {
                    writeResponse(ctx);
                }
                ReferenceCountUtil.release(frame);
            }

            @Override
            protected void channelRead(
                    ChannelHandlerContext ctx, Http3DataFrame frame, boolean isLast) {
                if (isLast) {
                    writeResponse(ctx);
                }
                ReferenceCountUtil.release(frame);
            }

            private void writeResponse(ChannelHandlerContext ctx) {
                Http3HeadersFrame headersFrame = new DefaultHttp3HeadersFrame();
                headersFrame.headers().status(&quot;200&quot;);
                headersFrame.headers().set(&quot;server&quot;, &quot;netty&quot;);
                ctx.write(headersFrame);
                ctx.writeAndFlush(new DefaultHttp3DataFrame(Unpooled.wrappedBuffer(CONTENT)))
                            .addListener(QuicStreamChannel.SHUTDOWN_OUTPUT);
            }
        }

        SelfSignedCertificate cert = new SelfSignedCertificate();
        QuicSslContext sslContext = QuicSslContextBuilder.forServer(cert.key(), null, cert.cert())
                .applicationProtocols(Http3.supportedApplicationProtocols()).build();
        ChannelHandler codec = Http3.newQuicServerCodecBuilder()
                .sslContext(sslContext)
                .maxIdleTimeout(5000, TimeUnit.MILLISECONDS)
                .initialMaxData(10000000)
                .initialMaxStreamDataBidirectionalLocal(1000000)
                .initialMaxStreamDataBidirectionalRemote(1000000)
                .initialMaxStreamsBidirectional(100)
                .tokenHandler(InsecureQuicTokenHandler.INSTANCE)
                .handler(new ChannelInitializer&amp;lt;QuicChannel&amp;gt;() {
                    @Override
                    protected void initChannel(QuicChannel ch) {
                        // Called for each connection
                        ch.pipeline().addLast(new Http3ServerConnectionHandler(
                                new ChannelInitializer&amp;lt;QuicStreamChannel&amp;gt;() {
                                    // Called for each request-stream,
                                    @Override
                                    protected void initChannel(QuicStreamChannel ch) {
                                        ch.pipeline().addLast(new Http3ServerHandler());
                                    }
                                });
                    }
                }).build();

        NioEventLoopGroup group = new NioEventLoopGroup(1);
        try {
            Bootstrap bs = new Bootstrap();
            Channel channel = bs.group(group)
                    .channel(NioDatagramChannel.class)
                    .handler(codec)
                    .bind(new InetSocketAddress(9999)).sync().channel();
            channel.closeFuture().sync();
        } finally {
            group.shutdownGracefully();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the corespanding HTTP/3 client like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public final class Http3ClientExample {
    private Http3ClientExample() { }

    public static void main(String... args) throws Exception {
        class Http3ClientHandler extends Http3RequestStreamInboundHandler {
            @Override
            protected void channelRead(
                    ChannelHandlerContext ctx, Http3HeadersFrame frame, boolean isLast) {
                releaseFrameAndCloseIfLast(ctx, frame, isLast);
            }

            @Override
            protected void channelRead(
                    ChannelHandlerContext ctx, Http3DataFrame frame, boolean isLast) {
                System.out.print(frame.content().toString(CharsetUtil.US_ASCII));
                releaseFrameAndCloseIfLast(ctx, frame, isLast);
            }

            private void releaseFrameAndCloseIfLast(
                    ChannelHandlerContext ctx, Http3RequestStreamFrame frame, boolean isLast) {
                ReferenceCountUtil.release(frame);
                if (isLast) {
                    ctx.close();
                }
            }
        }

        QuicSslContext context = QuicSslContextBuilder.forClient()
                .trustManager(InsecureTrustManagerFactory.INSTANCE)
                .applicationProtocols(Http3.supportedApplicationProtocols()).build();
        ChannelHandler codec = Http3.newQuicClientCodecBuilder()
                .sslContext(context)
                .maxIdleTimeout(5000, TimeUnit.MILLISECONDS)
                .initialMaxData(10000000)
                .initialMaxStreamDataBidirectionalLocal(1000000)
                .build();
        NioEventLoopGroup group = new NioEventLoopGroup(1);

        try {
            Bootstrap bs = new Bootstrap();
            Channel channel = bs.group(group)
                    .channel(NioDatagramChannel.class)
                    .handler(codec)
                    .bind(0).sync().channel();

            QuicChannel quicChannel = QuicChannel.newBootstrap(channel)
                    .handler(new Http3ClientConnectionHandler())
                    .remoteAddress(new InetSocketAddress(NetUtil.LOCALHOST4, 9999))
                    .connect()
                    .get();

            QuicStreamChannel streamChannel = 
                    Http3.newRequestStream(quicChannel, new Http3ClientHandler()).sync().getNow();

            // Write the Header frame and send the FIN to mark the end of the request.
            // After this its not possible anymore to write any more data.
            Http3HeadersFrame frame = new DefaultHttp3HeadersFrame();
            frame.headers().method(&quot;GET&quot;).path(&quot;/&quot;);
            streamChannel.writeAndFlush(frame)
                    .addListener(QuicStreamChannel.SHUTDOWN_OUTPUT).sync();

            // Wait for the stream channel and quic channel to be closed (this will happen
            // after we received the FIN).
            // After this is done we will close the underlying datagram channel.
            streamChannel.closeFuture().sync();

            // After we received the response lets also close the underlying QUIC channel
            // and datagram channel.
            quicChannel.close().sync();
            channel.close().sync();
        } finally {
            group.shutdownGracefully();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Converting layer&lt;/h1&gt;

&lt;p&gt;To make it easier for people we also include a &quot;converting&quot; layer which allows to just act on the usual &lt;code&gt;HttpResponse&lt;/code&gt; / &lt;code&gt;HttpRequest&lt;/code&gt; and &lt;code&gt;HttpContent&lt;/code&gt; objects (like you are used too from the HTTP/1 codec). To make use of it just add it to the &lt;code&gt;ChannelPipeline&lt;/code&gt; as show here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Http1RequestHandler extends ChannelInboundHandlerAdapter {
    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
        if (msg instanceof LastHttpContent) {
             FullHttpResponse response = new DefaultFullHttpResponse(
                    HttpVersion.HTTP_1_1, OK, CONTENT.retainedDuplicate());
             response.headers().setInt(HttpHeaderNames.CONTENT_LENGTH, CONTENT.readableBytes());
             ctx.writeAndFlush(response);
        }
    }
}

SelfSignedCertificate cert = new SelfSignedCertificate();
QuicSslContext sslContext = QuicSslContextBuilder.forServer(cert.key(), null, cert.cert())
           .applicationProtocols(Http3.supportedApplicationProtocols()).earlyData(true).build();
ChannelHandler codec = Http3.newQuicServerCodecBuilder()
        .option(QuicChannelOption.UDP_SEGMENTS, 10)
        .sslContext(sslContext)
        .maxIdleTimeout(5000, TimeUnit.MILLISECONDS)
        .maxSendUdpPayloadSize(1500)
        .maxRecvUdpPayloadSize(1500)
        .initialMaxData(10000000)
        .initialMaxStreamDataBidirectionalLocal(1000000)
        .initialMaxStreamDataBidirectionalRemote(1000000)
        .initialMaxStreamsBidirectional(100000)
        .tokenHandler(InsecureQuicTokenHandler.INSTANCE)
        .handler(new ChannelInitializer&amp;lt;QuicChannel&amp;gt;() {
                    @Override
                    protected void initChannel(QuicChannel ch) {
                        ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {
                            @Override
                            public void channelInactive(ChannelHandlerContext ctx) throws Exception {
                                System.err.println(&quot;INACTIVE&quot;);
                                ((QuicChannel) ctx.channel()).collectStats().addListener(f -&amp;gt; {
                                    System.err.println(f.getNow());
                                });
                            }
                        });
                        ch.pipeline().addLast(new Http3ServerConnectionHandler(
                                new ChannelInitializer&amp;lt;QuicStreamChannel&amp;gt;() {
                                    // Called for each request-stream,
                                    @Override
                                    protected void initChannel(QuicStreamChannel ch) {
                                        ch.pipeline().addLast(new Http3FrameToHttpObjectCodec(true));
                                        ch.pipeline().addLast(new Http1RequestHandler());
                                    }
                                }));
                    }
        }).build();

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also note that this adapter handler supports server and client.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;p&gt;For maximal performance you should use the native &lt;code&gt;epoll&lt;/code&gt; (&lt;code&gt;EpollDatagramChannel&lt;/code&gt; / &lt;code&gt;EpollEventLoopGroup&lt;/code&gt;) transport that is included by netty as it can use &lt;code&gt;sendmmsg&lt;/code&gt; / &lt;code&gt;recvmmsg&lt;/code&gt; which will help to improve the throughtput.&lt;/p&gt;

&lt;h1&gt;Where can I find the project ?&lt;/h1&gt;

&lt;p&gt;The project itself lives on &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/02/08/4-1-59-Final.html</id>
<title>Netty 4.1.59.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-02-08T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/02/08/4-1-59-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.59.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the HttpPostRequestDecoder or HttpPostMultiPartRequestDecoder.

For more details about the impact of the CVE check the Security Advisory.

The most important changes are:


Implement SWAR indexOf byte search (#10737)
Correctly filter out TLSv1.3 ciphers if TLSv1.3 is not enabled (#10919)
Allow blocking calls in UnixResolverDnsServerAddressStreamProvider#parse (#10935)
Ignore priority frames for non existing streams and so prevent a NPE (#10943)
Make native loading logging less confusing (#10944)
Use GracefulShutdown when stream space is exhausted (#10946)
Correctly handle fragmentation in JdkZlibDecoder (#10948)
Merge WebSocket extensions (#10956)
Override...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.59.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the &lt;code&gt;HttpPostRequestDecoder&lt;/code&gt; or &lt;code&gt;HttpPostMultiPartRequestDecoder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details about the impact of the CVE check the &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2&quot;&gt;Security Advisory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement SWAR indexOf byte search (&lt;a href=&quot;https://github.com/netty/netty/pull/10737&quot;&gt;#10737&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly filter out TLSv1.3 ciphers if TLSv1.3 is not enabled (&lt;a href=&quot;https://github.com/netty/netty/pull/10919&quot;&gt;#10919&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow blocking calls in UnixResolverDnsServerAddressStreamProvider#parse (&lt;a href=&quot;https://github.com/netty/netty/pull/10935&quot;&gt;#10935&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ignore priority frames for non existing streams and so prevent a NPE (&lt;a href=&quot;https://github.com/netty/netty/pull/10943&quot;&gt;#10943&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make native loading logging less confusing (&lt;a href=&quot;https://github.com/netty/netty/pull/10944&quot;&gt;#10944&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use GracefulShutdown when stream space is exhausted (&lt;a href=&quot;https://github.com/netty/netty/pull/10946&quot;&gt;#10946&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle fragmentation in JdkZlibDecoder (&lt;a href=&quot;https://github.com/netty/netty/pull/10948&quot;&gt;#10948&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Merge WebSocket extensions (&lt;a href=&quot;https://github.com/netty/netty/pull/10956&quot;&gt;#10956&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Override ALPN methods on ReferenceCountedOpenSslEngine (&lt;a href=&quot;https://github.com/netty/netty/pull/10954&quot;&gt;#10954&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix possible SEGV when using native dns resolver on macos (&lt;a href=&quot;https://github.com/netty/netty/pull/10971&quot;&gt;#10971&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Revert &quot;Enable SSL_MODE_ENABLE_FALSE_START if jdkCompatibilityMode is false (&lt;a href=&quot;https://github.com/netty/netty/pull/10980&quot;&gt;#10980&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Introduce SslContextOption which can be used for &quot;optional&quot; features in SslContext implementations (&lt;a href=&quot;https://github.com/netty/netty/pull/10981&quot;&gt;#10981&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix memory release failure when &quot;maxNumElems == 1&quot; of PoolSubpage (&lt;a href=&quot;https://github.com/netty/netty/pull/10988&quot;&gt;#10988&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Revert HttpPostMultipartRequestDecoder and HttpPostStandardRequestDecoder to e5951d4 (&lt;a href=&quot;https://github.com/netty/netty/pull/10989&quot;&gt;#10989&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/atropnikov&quot;&gt;@atropnikov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/danielflower&quot;&gt;@danielflower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/duke-bartholomew&quot;&gt;@duke-bartholomew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mrksngl&quot;&gt;@mrksngl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetgo&quot;&gt;@violetgo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ZzxyNn&quot;&gt;@ZzxyNn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/01/15/io_uring-0-0-3-Final.html</id>
<title>Netty/Incubator/Transport/Native/io_uring 0.0.3.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-01-15T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/01/15/io_uring-0-0-3-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-transport-io_uring 0.0.3.Final. This release is a bug-fix release, please consider upgrading as soon as possible as it also contains a workaround for an io_uring bug that could lead to a memory leak.

For more details related to this release see our bug-tracker.

For more details about this transport in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-transport-io_uring 0.0.3.Final. This release is a bug-fix release, please consider upgrading as soon as possible as it also contains a workaround for an io_uring bug that could lead to a memory leak.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-transport-io_uring/milestone/3?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this transport in general please read our &lt;a href=&quot;https://netty.io/news/2020/11/16/io_uring-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/01/13/4-1-58-Final.html</id>
<title>Netty 4.1.58.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-01-13T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/01/13/4-1-58-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.58.Final, which contains only one bug-fix which fixes a regression which could cause the native libs to be not loaded correctly. This regression was introduced in netty 4.1.57.Final, which was released just yesterday. Due the nature of the regression we decided we should offer another release (with a fix) ASAP.

The related issue / pr for the regression can be found in the provided links:


Revert "Ensure we only register native methods once" (#10928)
4.1.57 could not load a native library: netty_transport_native_unix_linux aarch_64/x86_64 (#10926)



Thank You

Every idea and bug-report counts and so we thought it...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.58.Final, which contains only one bug-fix which fixes a regression which could cause the native libs to be not loaded correctly. This regression was introduced in netty 4.1.57.Final, which was released just yesterday. Due the nature of the regression we decided we should offer another release (with a fix) ASAP.&lt;/p&gt;

&lt;p&gt;The related issue / pr for the regression can be found in the provided links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Revert &quot;Ensure we only register native methods once&quot; (&lt;a href=&quot;https://github.com/netty/netty/pull/10928&quot;&gt;#10928&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;4.1.57 could not load a native library: netty_transport_native_unix_linux aarch_64/x86_64 (&lt;a href=&quot;https://github.com/netty/netty/issues/10926&quot;&gt;#10926&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/matteobertozzi&quot;&gt;@matteobertozzi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/01/12/4-1-57-Final.html</id>
<title>Netty 4.1.57.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-01-12T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/01/12/4-1-57-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.57.Final. This releases is a bug-fix release.

The most important changes in this release are:


We need to ensure we always drain the error stack when a callback throws
(#10920)
Add PushPromise and Priority Frame support in Http2FrameCodec (#10765)
Improve performance of HPACK static table lookup (#10840)
MQTT codec: foolproof SUBSCRIBE QoS encoding (#10874)
Ensure we only register native methods once (#10876)



For the details and all changes, please browse our issue tracker for 4.1.57.Final.

Thank You

Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.

Please report an unintended omission.


@AkiaCode
@andsel
@chrisvest
@delegacy
@ejona86
@hyperxpro
@kachayev
@Neustradamus
@normanmaurer
@trustin
@violetagg...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.57.Final. This releases is a bug-fix release.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to ensure we always drain the error stack when a callback throws
(&lt;a href=&quot;https://github.com/netty/netty/pull/10920&quot;&gt;#10920&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add PushPromise and Priority Frame support in Http2FrameCodec (&lt;a href=&quot;https://github.com/netty/netty/pull/10765&quot;&gt;#10765&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improve performance of HPACK static table lookup (&lt;a href=&quot;https://github.com/netty/netty/pull/10840&quot;&gt;#10840&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MQTT codec: foolproof SUBSCRIBE QoS encoding (&lt;a href=&quot;https://github.com/netty/netty/pull/10874&quot;&gt;#10874&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we only register native methods once (&lt;a href=&quot;https://github.com/netty/netty/pull/10876&quot;&gt;#10876&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.57.Final&quot;&gt;4.1.57.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AkiaCode&quot;&gt;@AkiaCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/andsel&quot;&gt;@andsel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/delegacy&quot;&gt;@delegacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kachayev&quot;&gt;@kachayev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Neustradamus&quot;&gt;@Neustradamus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/01/11/quic-0-0-3-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.3.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2021-01-11T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/01/11/quic-0-0-3-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.3.Final, which is our first release of the year :). This release is a bug-fix release, please consider upgrading as soon as possible as it also fixes a possible SEGV.

For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.3.Final, which is our first release of the year :). This release is a bug-fix release, please consider upgrading as soon as possible as it also fixes a possible SEGV.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/3?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2020/12/18/quic-0-0-2-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.2.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2020-12-18T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/12/18/quic-0-0-2-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.2.Final. This release adds support for Unreliable Datagram Extension. Beside this it also contains a few bug-fixes related to handling AUTO_READ.

For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.2.Final. This release adds support for &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-datagram-01&quot;&gt;Unreliable Datagram Extension&lt;/a&gt;. Beside this it also contains a few bug-fixes related to handling &lt;code&gt;AUTO_READ&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/2?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2020/12/17/4-1-56-Final.html</id>
<title>Netty 4.1.56.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2020-12-17T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/12/17/4-1-56-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.56.Final. This releases fixes a regression in the HttpPostMultipartRequestDecoder which was introduced in the last release that could lead to an infinite loop. If you make use of this class you should upgrade ASAP!

The most important changes in this release are:


Fix Bundle-NativeCode in MANIFEST file (#10867)
Workaround possible JDK bug in SSLEngineImpl when using TLSv1.3 that lead to multiple notifications (#10860)
Fix infinite loop decoding multipart requests  (#10855)
Ensure IovArray is usuable without sun.misc.Unsafe (#10870)
Improve logging in DnsServerAddressStreamProviders (#10848)



For the details and all changes, please browse our issue tracker for 4.1.56.Final.

Special notes

As this...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.56.Final. This releases fixes a regression in the &lt;code&gt;HttpPostMultipartRequestDecoder&lt;/code&gt; which was introduced in the last release that could lead to an infinite loop. If you make use of this class you should upgrade ASAP!&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix Bundle-NativeCode in MANIFEST file (&lt;a href=&quot;https://github.com/netty/netty/pull/10867&quot;&gt;#10867&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Workaround possible JDK bug in SSLEngineImpl when using TLSv1.3 that lead to multiple notifications (&lt;a href=&quot;https://github.com/netty/netty/pull/10860&quot;&gt;#10860&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix infinite loop decoding multipart requests  (&lt;a href=&quot;https://github.com/netty/netty/pull/10855&quot;&gt;#10855&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure IovArray is usuable without sun.misc.Unsafe (&lt;a href=&quot;https://github.com/netty/netty/pull/10870&quot;&gt;#10870&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improve logging in &lt;code&gt;DnsServerAddressStreamProviders&lt;/code&gt; (&lt;a href=&quot;https://github.com/netty/netty/pull/10848&quot;&gt;#10848&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.56.Final&quot;&gt;4.1.56.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Special notes&lt;/h1&gt;

&lt;p&gt;As this release includes a fix for a possible infinite loop it&#39;s advised to upgrade asap if you use 4.1.55.Final.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elharo&quot;&gt;@elharo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fredericBregier&quot;&gt;@fredericBregier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/henrychv&quot;&gt;@henrychv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jameskleeh&quot;&gt;@jameskleeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/imandy&quot;&gt;@imandy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/terrarier2111&quot;&gt;@terrarier2111&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/12/09/quic-0-0-1-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.1.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2020-12-09T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/12/09/quic-0-0-1-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
After a bit more than 1 month of developement we are finally ready to release our first incubator version of Netty/Incubator/Codec/Quic.

This codec provides a QUIC implementation of draft 32 by wrapping quiche and expose QUIC via the Channel API.

Incubator, what does this mean ?

To be able to work on new exciting features without "affecting" the core of netty we decided to start development of such features in the "incubator". This means these features will be developed in a seperate repository and only be merged back into the core netty repository once we feel that we can guarantee we not need...
</summary>
<content type="html">
&lt;p&gt;After a bit more than 1 month of developement we are finally ready to release our first incubator version of Netty/Incubator/Codec/Quic.&lt;/p&gt;

&lt;p&gt;This codec provides a QUIC implementation of &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-transport-32&quot;&gt;draft 32&lt;/a&gt; by wrapping &lt;a href=&quot;https://github.com/cloudflare/quiche&quot;&gt;quiche&lt;/a&gt; and expose QUIC via the &lt;code&gt;Channel&lt;/code&gt; API.&lt;/p&gt;

&lt;h1&gt;Incubator, what does this mean ?&lt;/h1&gt;

&lt;p&gt;To be able to work on new exciting features without &quot;affecting&quot; the core of netty we decided to start development of such features in the &quot;incubator&quot;. This means these features will be developed in a seperate repository and only be merged back into the core netty repository once we feel that we can guarantee we not need to break the API anymore and consider these production ready. This hopefully helps to clarify expections and stability of the code and so people should be fully aware that APIs may change. Beside this it also allows to use different release schedules.&lt;/p&gt;

&lt;h1&gt;How can I use the quic codec ?&lt;/h1&gt;

&lt;p&gt;You we will need to include the right dependency for your platform. At the moment we only support either macOS x86_64 or linux x86_64. That said, this may change in the future.&lt;/p&gt;

&lt;p&gt;An example for maven / linux would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-quic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;linux-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you use macOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-quic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;osx-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;How would I setup a QUIC server / client ?&lt;/h1&gt;

&lt;p&gt;Bootstrapping a QUIC server that speaks HTTP/0.9 would look like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;// We just want to support HTTP 0.9 as application protocol
byte[] proto = new byte[] {
        0x08, &#39;h&#39;, &#39;t&#39;, &#39;t&#39;, &#39;p&#39;, &#39;/&#39;, &#39;0&#39;, &#39;.&#39;, &#39;9&#39;
};

NioEventLoopGroup group = new NioEventLoopGroup(1);
ChannelHandler codec = new QuicServerCodecBuilder()
        .certificateChain(&quot;./src/test/resources/cert.crt&quot;)
        .privateKey(&quot;./src/test/resources/cert.key&quot;)
        .applicationProtocols(proto)
        .maxIdleTimeout(5000, TimeUnit.MILLISECONDS)
        // Configure some limits for the maximal number of streams (and the data) that we want to handle.
        .initialMaxData(10000000)
        .initialMaxStreamDataBidirectionalLocal(1000000)
        .initialMaxStreamDataBidirectionalRemote(1000000)
        .initialMaxStreamsBidirectional(100)
        .initialMaxStreamsUnidirectional(100)

        // Setup a token handler. In a production system you would want to implement and provide your
        // custom one.
        .tokenHandler(InsecureQuicTokenHandler.INSTANCE)
        // ChannelHandler that is added into QuicChannel pipeline.
        .handler(new ChannelInboundHandlerAdapter() {
            @Override
            public void channelActive(ChannelHandlerContext ctx) {
                QuicChannel channel = (QuicChannel) ctx.channel();
                // Create streams etc..
            }

            public void channelInactive(ChannelHandlerContext ctx) {
                ((QuicChannel) ctx.channel()).collectStats().addListener(f -&amp;gt; {
                    if (f.isSuccess()) {
                        LOGGER.info(&quot;Connection closed: {}&quot;, f.getNow());
                    }
                });
            }

            @Override
            public boolean isSharable() {
                return true;
            }
        })
        .streamHandler(new ChannelInitializer&amp;lt;QuicStreamChannel&amp;gt;() {
            @Override
            protected void initChannel(QuicStreamChannel ch)  {
                // Add a LineBasedFrameDecoder here as we just want to do some simple HTTP 0.9 handling.
                ch.pipeline().addLast(new LineBasedFrameDecoder(1024))
                        .addLast(new ChannelInboundHandlerAdapter() {
                    @Override
                    public void channelRead(ChannelHandlerContext ctx, Object msg) {
                        ByteBuf byteBuf = (ByteBuf) msg;
                        try {
                            if (byteBuf.toString(CharsetUtil.US_ASCII).trim().equals(&quot;GET /&quot;)) {
                                ByteBuf buffer = ctx.alloc().directBuffer();
                                buffer.writeCharSequence(&quot;Hello World!\r\n&quot;, CharsetUtil.US_ASCII);
                                // Write the buffer and shutdown the output by writing a FIN.
                                ctx.writeAndFlush(buffer).addListener(QuicStreamChannel.SHUTDOWN_OUTPUT);
                            }
                        } finally {
                            byteBuf.release();
                        }
                    }
                });
            }
        }).build();
try {
    Bootstrap bs = new Bootstrap();
    Channel channel = bs.group(group)
            .channel(NioDatagramChannel.class)
            .handler(codec)
            .bind(new InetSocketAddress(9999)).sync().channel();
    channel.closeFuture().sync();
} finally {
    group.shutdownGracefully();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the corespanding QUIC client like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;// We just want to support HTTP 0.9 as application protocol
byte[] proto = new byte[] {
        0x08, &#39;h&#39;, &#39;t&#39;, &#39;t&#39;, &#39;p&#39;, &#39;/&#39;, &#39;0&#39;, &#39;.&#39;, &#39;9&#39;
};

NioEventLoopGroup group = new NioEventLoopGroup(1);
try {
    ChannelHandler codec = new QuicClientCodecBuilder()
            .applicationProtocols(proto)
            .maxIdleTimeout(5000, TimeUnit.MILLISECONDS)
            .initialMaxData(10000000)
            // As we don&#39;t want to support remote initiated streams just setup the limit for
            // local initiated streams in this example.
            .initialMaxStreamDataBidirectionalLocal(1000000)
            .build();

    Bootstrap bs = new Bootstrap();
    Channel channel = bs.group(group)
            .channel(NioDatagramChannel.class)
            .handler(codec)
            .bind(0).sync().channel();

    QuicChannel quicChannel = QuicChannel.newBootstrap(channel)
            .streamHandler(new ChannelInboundHandlerAdapter() {
                @Override
                public void channelActive(ChannelHandlerContext ctx) {
                    // As we did not allow any remote initiated streams we will never see
                    // this method called. That said just let us keep it here to demonstrate
                    // that this handle would be called for each remote initiated stream.
                    ctx.close();
                }
            })
            .remoteAddress(new InetSocketAddress(NetUtil.LOCALHOST4, 9999))
            .connect()
            .get();

    QuicStreamChannel streamChannel = quicChannel.createStream(QuicStreamType.BIDIRECTIONAL,
            new ChannelInboundHandlerAdapter() {
                @Override
                public void channelRead(ChannelHandlerContext ctx, Object msg) {
                    ByteBuf byteBuf = (ByteBuf) msg;
                    System.err.println(byteBuf.toString(CharsetUtil.US_ASCII));
                    byteBuf.release();
                }

                @Override
                public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {
                    if (evt == ChannelInputShutdownReadComplete.INSTANCE) {
                        // Close the connection once the remote peer did send the FIN
                        // for this stream.
                        ((QuicChannel) ctx.channel().parent()).close(true, 0,
                                ctx.alloc().directBuffer(16)
                                        .writeBytes(new byte[]{&#39;k&#39;, &#39;t&#39;, &#39;h&#39;, &#39;x&#39;, &#39;b&#39;, &#39;y&#39;, &#39;e&#39;}));
                    }
                }
            }).sync().getNow();
    // Write the data and send the FIN. After this its not possible anymore to write any more data.
    streamChannel.writeAndFlush(Unpooled.copiedBuffer(&quot;GET /\r\n&quot;, CharsetUtil.US_ASCII))
            .addListener(QuicStreamChannel.SHUTDOWN_OUTPUT);

    // Wait for the stream channel and quic channel to be closed (this will happen after we
    // received the FIN).  After this is done we will close the underlying datagram channel.
    streamChannel.closeFuture().sync();
    quicChannel.closeFuture().sync();
    channel.close().sync();
} finally {
    group.shutdownGracefully();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Where can I find the project ?&lt;/h1&gt;

&lt;p&gt;The project itself lives on &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;What&#39;s next ?&lt;/h1&gt;

&lt;p&gt;While we are activly working on this project itself we also already started with an &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3&quot;&gt;HTTP3 implementation&lt;/a&gt; on top of it.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2020/12/08/4-1-55-Final.html</id>
<title>Netty 4.1.55.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2020-12-08T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/12/08/4-1-55-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.55.Final. This is mainly a bug-fix release.

The most important changes in this release are:


Enforce status code validation in CloseWebSocketFrame (#10846)
Use aarch_64 in a consistent way (#10845)
Initialize Recycler.INITIAL_CAPACITY before invoking InternalLogger.debug() (#10836)
Fix caching for normal allocations (#10825)
Fix NPE in ByteToMessageDecoder if the user removes the handler while channelInputClosed(...) is processing the buffer. (#10817)
IovArray should support when there is no unsafe present (#10814)
Don't use the cname cache when using DnsRecordResolveContext (#10808)
Fix native image build for the cases when io.netty.util.NetUtil is initialized at run-time (#10799)
Fix UnsafeByteBufUtil#setBytes() cause JVM crash (#10791)
Add ABORT and COMMIT STOMP...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.55.Final. This is mainly a bug-fix release.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enforce status code validation in CloseWebSocketFrame (&lt;a href=&quot;https://github.com/netty/netty/pull/10846&quot;&gt;#10846&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use aarch_64 in a consistent way (&lt;a href=&quot;https://github.com/netty/netty/pull/10845&quot;&gt;#10845&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Initialize Recycler.INITIAL_CAPACITY before invoking InternalLogger.debug() (&lt;a href=&quot;https://github.com/netty/netty/pull/10836&quot;&gt;#10836&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix caching for normal allocations (&lt;a href=&quot;https://github.com/netty/netty/pull/10825&quot;&gt;#10825&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix NPE in ByteToMessageDecoder if the user removes the handler while channelInputClosed(...) is processing the buffer. (&lt;a href=&quot;https://github.com/netty/netty/pull/10817&quot;&gt;#10817&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;IovArray should support when there is no unsafe present (&lt;a href=&quot;https://github.com/netty/netty/pull/10814&quot;&gt;#10814&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t use the cname cache when using DnsRecordResolveContext (&lt;a href=&quot;https://github.com/netty/netty/pull/10808&quot;&gt;#10808&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix native image build for the cases when io.netty.util.NetUtil is initialized at run-time (&lt;a href=&quot;https://github.com/netty/netty/pull/10799&quot;&gt;#10799&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix UnsafeByteBufUtil#setBytes() cause JVM crash (&lt;a href=&quot;https://github.com/netty/netty/pull/10791&quot;&gt;#10791&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add ABORT and COMMIT STOMP commands to the StompCommand enum (&lt;a href=&quot;https://github.com/netty/netty/pull/10790&quot;&gt;#10790&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.55.Final&quot;&gt;4.1.55.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Special notes&lt;/h1&gt;

&lt;p&gt;In this release we changed the classifer for Linux AARCH64 to &lt;code&gt;linux-arch_64&lt;/code&gt;. This is consistent with what the os maven plugin is using for the platform and so makes it easier for us and the users in general. We did the same for netty-tcnative-* as well to keep things consistent.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/adutra&quot;&gt;@adutra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ArjanSchouten&quot;&gt;@ArjanSchouten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benjaminroux&quot;&gt;@benjaminroux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Ech0Fan&quot;&gt;@Ech0Fan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fredericBregier&quot;&gt;@fredericBregier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/henrychv&quot;&gt;@henrychv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/izeye&quot;&gt;@izeye&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/martinfurmanski&quot;&gt;@martinfurmanski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/oxplay2&quot;&gt;@oxplay2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rpuch&quot;&gt;@rpuch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/XjCyan1de&quot;&gt;@XjCyan1de&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/11/16/io_uring-0-0-1-Final.html</id>
<title>Netty/Incubator/Transport/Native/io_uring 0.0.1.Final released</title>
<updated>2022-10-12T00:41:41+00:00</updated>
<published>2020-11-16T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/11/16/io_uring-0-0-1-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
After multiple months of development I am happy to announce the first incubator release of our native io_uring based transport.
If you don't know about io_uring I highly recommend getting up to speed by reading Efficient IO with io_uring and
Lord of the io_ring. To make it short, it is a new way how programs can talk to the kernel (and be notified back) via memory mapped ring-buffers. This way it is possible to almost eliminate all syscalls that are usually needed for network I/O.

Incubator, what does this mean ?

To be able to work on new exciting features without "affecting" the core...
</summary>
<content type="html">
&lt;p&gt;After multiple months of development I am happy to announce the first incubator release of our native io_uring based transport.
If you don&#39;t know about io_uring I highly recommend getting up to speed by reading &lt;a href=&quot;https://kernel.dk/io_uring.pdf&quot;&gt;Efficient IO with io_uring&lt;/a&gt; and
&lt;a href=&quot;https://unixism.net/loti/what_is_io_uring.html&quot;&gt;Lord of the io_ring&lt;/a&gt;. To make it short, it is a new way how programs can talk to the kernel (and be notified back) via memory mapped ring-buffers. This way it is possible to almost eliminate all syscalls that are usually needed for network I/O.&lt;/p&gt;

&lt;h1&gt;Incubator, what does this mean ?&lt;/h1&gt;

&lt;p&gt;To be able to work on new exciting features without &quot;affecting&quot; the core of netty we decided to start development of such features in the &quot;incubator&quot;. This means these features will be developed in a seperate repository and only be merged back into the core netty repository once we feel that we can guarantee we not need to break the API anymore and consider these production ready. This hopefully helps to clarify expections and stability of the code and so people should be fully aware that APIs may change. Beside this it also allows to use different release schedules.&lt;/p&gt;

&lt;h1&gt;How can I use the io_uring based transport?&lt;/h1&gt;

&lt;p&gt;First of you need to run on x86_64 linux and have a recent kernel. To be able to use io_uring without encountering &quot;slowdowns&quot; and &quot;bugs&quot; you need at least using &lt;a href=&quot;https://www.kernel.org&quot;&gt;Linux Kernel&lt;/a&gt; 5.9.0, any newer kernel will be fine as well. After this requirement is fullfilled it&#39;s just a matter of adding the right jar to your classpath and bootstrap using the right &lt;code&gt;EventLoopGroup&lt;/code&gt; and &lt;code&gt;Channel&lt;/code&gt; implementation.&lt;/p&gt;

&lt;p&gt;An example for maven would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-transport-native-io_uring&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;linux-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bootstrapping a server is as easy as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;EventLoopGroup group = new IOUringEventLoopGroup();
try {
    final ChannelHandler serverHandler = ...;

    ServerBootstrap b = new ServerBootstrap();
    b.group(bossGroup, workerGroup)
     .channel(IOUringServerSocketChannel.class)
     .childHandler(new ChannelInitializer&amp;lt;SocketChannel&amp;gt;() {
        @Override
        public void initChannel(SocketChannel ch) throws Exception {
            ChannelPipeline p = ch.pipeline();
            p.addLast(serverHandler);
        }
    });

    // Start the server.
    ChannelFuture f = b.bind(PORT).sync();

    // Wait until the server socket is closed.
    f.channel().closeFuture().sync();
} finally {
    // Shut down all event loops to terminate all threads.
    group.shutdownGracefully();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same is true for the client as well, just be sure you use the correct &lt;code&gt;Channel&lt;/code&gt; and &lt;code&gt;EventLoop&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h1&gt;What features are supported at the moment ?&lt;/h1&gt;

&lt;p&gt;At the moment we support &lt;code&gt;IOUringServerChannel&lt;/code&gt;, &lt;code&gt;IOUringChannel&lt;/code&gt; and &lt;code&gt;IOUringDatagramChannel&lt;/code&gt;, which basically means TCP and UDP. One gotcha is that &lt;code&gt;FileRegion&lt;/code&gt; is currently not supported, but will be added in the future.&lt;/p&gt;

&lt;h1&gt;Where can I find the issue tracker / code etc ?&lt;/h1&gt;

&lt;p&gt;As stated before this feature is developed outside of the &quot;normal&quot; netty tree. You can find it in the &lt;a href=&quot;https://github.com/netty/netty-incubator-transport-io_uring&quot;&gt;netty-incubator-transport-io_uring&lt;/a&gt; repository.&lt;/p&gt;

&lt;h1&gt;Are there any performance numbers?&lt;/h1&gt;

&lt;p&gt;While we plan to run some more advanced and real performance benchmarks in the future what we saw so far is really promising. To give you an idea let&#39;s have a look...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;epoll&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./tcpkali  -m xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  --connect-rate=200 -c 500 -T 30 127.0.0.1:8088
Destination: [127.0.0.1]:8088
Interface lo address [127.0.0.1]:0
Using interface lo to connect to [127.0.0.1]:8088
Ramped up to 500 connections.
Total data sent:     35254.6 MiB (36967084668 bytes)
Total data received: 35725.3 MiB (37460714661 bytes)
Bandwidth per channel: 39.688⇅ Mbps (4961.0 kBps)
Aggregate bandwidth: 9987.847↓, 9856.234↑ Mbps
Packet rate estimate: 861701.3↓, 851472.0↑ (11↓, 43↑ TCP MSS/op)
Test duration: 30.005 s.

Running `target/release/echo_bench --address &#39;localhost:8088&#39; --number 500 --duration 30 --length 128`
Benchmarking: localhost:8088
500 clients, running 128 bytes, 30 sec.

Speed: 80820 request/sec, 80820 response/sec
Requests: 2424626
Responses: 2424625
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;io_uring&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./tcpkali  -m xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  --connect-rate=200 -c 500 -T 30 127.0.0.1:8081
Destination: [127.0.0.1]:8081
Interface lo address [127.0.0.1]:0
Using interface lo to connect to [127.0.0.1]:8081
Ramped up to 500 connections.
Total data sent:     74653.1 MiB (78279409944 bytes)
Total data received: 75180.9 MiB (78832885977 bytes)
Bandwidth per channel: 83.793⇅ Mbps (10474.1 kBps)
Aggregate bandwidth: 21021.980↓, 20874.387↑ Mbps
Packet rate estimate: 1932417.0↓, 1793964.8↑ (11↓, 39↑ TCP MSS/op)
Test duration: 30.0002 s.

Running `target/release/echo_bench --address &#39;localhost:8081&#39; --number 500 --duration 30 --length 128`
Benchmarking: localhost:8081
500 clients, running 128 bytes, 30 sec.

Speed: 267371 request/sec, 267370 response/sec
Requests: 8021137
Responses: 8021128
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This benchmark is basically sending data and expect the data to be echoed back. The server itself uses 1 thread to handle all of this. Please be aware this is only a quick benchmark on localhost and a &quot;real&quot; benchmark over the network with real hardware should be done to full understand the wins and gains.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Sharable
public class EchoServerHandler extends ChannelInboundHandlerAdapter {

    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) {
        ctx.write(msg);
    }

    @Override
    public void channelReadComplete(ChannelHandlerContext ctx) {
        ctx.flush();
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
        // Close the connection when an exception is raised.
        ctx.close();
    }

    @Override
    public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {
        // Ensure we are not writing to fast by stop reading if we can not flush out data fast enough.
        if (ctx.channel().isWritable()) {
            ctx.channel().config().setAutoRead(true);
        } else {
            ctx.flush();
            if (!ctx.channel().isWritable()) {
                ctx.channel().config().setAutoRead(false);
            }
        }
    }
}

// This is using io_uring
public class EchoIOUringServer {
    private static final int PORT = Integer.parseInt(System.getProperty(&quot;port&quot;, &quot;8081&quot;));

    public static void main(String []args) {
        EventLoopGroup group = new IOUringEventLoopGroup(1);
        final EchoServerHandler serverHandler = new EchoServerHandler();
        try {
            ServerBootstrap b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
                    .option(ChannelOption.SO_REUSEADDR, true)
                    .channel(IOUringServerSocketChannel.class)
                    .childHandler(new ChannelInitializer&amp;lt;SocketChannel&amp;gt;() {
                        @Override
                        public void initChannel(SocketChannel ch) throws Exception {
                            ChannelPipeline p = ch.pipeline();
                            //p.addLast(new LoggingHandler(LogLevel.INFO));
                            p.addLast(serverHandler);
                        }
                    });

            // Start the server.
            ChannelFuture f = b.bind(PORT).sync();

            // Wait until the server socket is closed.
            f.channel().closeFuture().sync();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            // Shut down all event loops to terminate all threads.
            group.shutdownGracefully();
        }
    }
}

// This is using epoll / syscalls 
public class EchoNioServer {
    private static final int PORT = Integer.parseInt(System.getProperty(&quot;port&quot;, &quot;8088&quot;));

    public static void main(String []args) {
        EventLoopGroup group = new NioEventLoopGroup(1);
        final EchoServerHandler serverHandler = new EchoServerHandler();
        try {
            ServerBootstrap b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
                    .option(ChannelOption.SO_REUSEADDR, true)
                    .channel(NioServerSocketChannel.class)
                    .childHandler(new ChannelInitializer&amp;lt;SocketChannel&amp;gt;() {
                        @Override
                        public void initChannel(SocketChannel ch) throws Exception {
                            ChannelPipeline p = ch.pipeline();
                            //p.addLast(new LoggingHandler(LogLevel.INFO));
                            p.addLast(serverHandler);
                        }
                    });

            // Start the server.
            ChannelFuture f = b.bind(PORT).sync();

            // Wait until the server socket is closed.
            f.channel().closeFuture().sync();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            // Shut down all event loops to terminate all threads.
            group.shutdownGracefully();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Big thank you to all the people that were involved so far to make this happen. A special thank you goes out to &lt;a href=&quot;https://github.com/1Jo1&quot;&gt;Josef Grieb&lt;/a&gt; who did start this project as part of &lt;a href=&quot;https://github.com/netty/netty/wiki/Google-Summer-of-Code-Ideas-2020#add-io_uring-based-transport&quot;&gt;GSOC 2020&lt;/a&gt;. Without Josef this would not have been possible in this short time-frame. Beside Josef I would also like to say &quot;thank you&quot; to &lt;a href=&quot;https://github.com/axboe&quot;&gt;Jens Axboe&lt;/a&gt;, whom is the main author of io_uring. Whenever we had questions or problems he was happy to help. That&#39;s what OSS is really about. OSS FTW!.&lt;/p&gt;

</content>
</entry>
</feed>
