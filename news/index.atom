<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>http://netty.io/</id>
<title>Netty</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<link href="http://netty.io/news/index.atom" rel="self" type="application/atom+xml" />
<link href="http://netty.io/" rel="alternate" type="text/html" />
<entry>
<id>http://netty.io/news/2021/05/19/4-1-65-Final.html</id>
<title>Netty 4.1.65.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-05-19T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/05/19/4-1-65-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
We are happy to announce the release of netty 4.1.65.Final, which beside fixes multiple bugs and includes some performance improvements as well.
As netty 4.1.64.Final did include two regressions which were found quickly after the release we decided to not announce it all and just roll a 4.1.65.Final which includes everything.

The most important changes are:


Fire SslHandshakeCompletionEvent after the last decoded data chunk (#11148)
Log fewer stack traces from initialisation code (#11164)
Fix StreamBufferingEncoder GOAWAY bug (#11144)
Ensure DnsNameResolver resolves the host(computer) name on Windows (#11167)
Fix support for IP_RECVORIGDSTADDR when using native epoll transport (#11173)
BouncyCastle support (#11157)
SimpleChannelPromiseAggregator use first exception instead of last (#11168)
Add a...
</summary>
<content type="html">
&lt;p&gt;We are happy to announce the release of netty 4.1.65.Final, which beside fixes multiple bugs and includes some performance improvements as well.
As netty 4.1.64.Final did include two regressions which were found quickly after the release we decided to not announce it all and just roll a 4.1.65.Final which includes everything.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fire SslHandshakeCompletionEvent after the last decoded data chunk (&lt;a href=&quot;https://github.com/netty/netty/pull/11148&quot;&gt;#11148&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Log fewer stack traces from initialisation code (&lt;a href=&quot;https://github.com/netty/netty/pull/11164&quot;&gt;#11164&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix StreamBufferingEncoder GOAWAY bug (&lt;a href=&quot;https://github.com/netty/netty/pull/11144&quot;&gt;#11144&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure DnsNameResolver resolves the host(computer) name on Windows (&lt;a href=&quot;https://github.com/netty/netty/pull/11167&quot;&gt;#11167&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix support for IP_RECVORIGDSTADDR when using native epoll transport (&lt;a href=&quot;https://github.com/netty/netty/pull/11173&quot;&gt;#11173&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;BouncyCastle support (&lt;a href=&quot;https://github.com/netty/netty/pull/11157&quot;&gt;#11157&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SimpleChannelPromiseAggregator use first exception instead of last (&lt;a href=&quot;https://github.com/netty/netty/pull/11168&quot;&gt;#11168&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add a new HTTP/2 pseudo header :protocol (&lt;a href=&quot;https://github.com/netty/netty/pull/11192&quot;&gt;#11192&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enable TLSv1.3 when using BouncyCastle ALPN support (&lt;a href=&quot;https://github.com/netty/netty/pull/11193&quot;&gt;#11193&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly throw ErrorDataDecoderException for errors while decoding (&lt;a href=&quot;https://github.com/netty/netty/pull/11198&quot;&gt;#11198&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Destroy HttpPostMultipartRequestDecoder if contructor throws (&lt;a href=&quot;https://github.com/netty/netty/pull/11207&quot;&gt;#11207&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ReferenceCountedOpenSslEngine unwrap handshake complete status fix (&lt;a href=&quot;https://github.com/netty/netty/pull/11210&quot;&gt;#11210&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix Memory release not correctly in Multipart Decoder (&lt;a href=&quot;https://github.com/netty/netty/pull/11188&quot;&gt;#11188&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Preload classes before calling native OnLoad function to prevent classloader deadlock (&lt;a href=&quot;https://github.com/netty/netty/pull/11215&quot;&gt;#11215&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only fall back to CNAME on A/AAAA queries (&lt;a href=&quot;https://github.com/netty/netty/pull/11216&quot;&gt;#11216&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Re-order list of resolvers according to their searchOrder (&lt;a href=&quot;https://github.com/netty/netty/pull/11236&quot;&gt;#11236&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Disable TLSv1 and TLSv1.1 by default (&lt;a href=&quot;https://github.com/netty/netty/pull/11237&quot;&gt;#11237&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use tasks by default when using openssl based SSL provider (&lt;a href=&quot;https://github.com/netty/netty/pull/11242&quot;&gt;#11242&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add DefaultHostsFileEntriesResolver#addresses to provide all hosts file&#39;s entries for a hostname (&lt;a href=&quot;https://github.com/netty/netty/pull/11246&quot;&gt;#11246&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Introduce BrotliDecoder (&lt;a href=&quot;https://github.com/netty/netty/pull/10960&quot;&gt;#10960&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix loading of the native library for DNS resolution on MacOS (&lt;a href=&quot;https://github.com/netty/netty/pull/11260&quot;&gt;#11260&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/240?closed=1&quot;&gt;4.1.65.Final&lt;/a&gt; and &lt;a href=&quot;https://github.com/netty/netty/milestone/239?closed=1&quot;&gt;4.1.6.4.Final&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;Classloader deadlock workaround&lt;/h2&gt;

&lt;p&gt;It seems like more recent version of the JDK can trigger a classloader deadlock easily when trying to load our JNI based code. This release includes a work-around for this while the OpenJDK developers are investigating on how this can be fixed in the OpenJDK itself.
For more details please check (&lt;a href=&quot;https://github.com/netty/netty/pull/11215&quot;&gt;#11215&lt;/a&gt;), which contains all the related links.&lt;/p&gt;

&lt;h2&gt;Disable TLSv1 and TLSv1.1 by default&lt;/h2&gt;

&lt;p&gt;As TLSv1 and TLSv1.1 are considered insecure and are also disabled by default now in the OpenJDK we did follow the same path here. That said if you still need to supported these you can explicit enable them when using the &lt;code&gt;SslContextBuilder&lt;/code&gt; to build the &lt;code&gt;SslContext&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;HTTP Brotli support&lt;/h2&gt;

&lt;p&gt;To be able to make use of the new &lt;a href=&quot;https://github.com/netty/netty/pull/10960&quot;&gt;BrotliDecoder&lt;/a&gt; you need to ensure the &lt;a href=&quot;https://github.com/hyperxpro/Brotli4j&quot;&gt;Brotli4J&lt;/a&gt; jars are on your class-path.&lt;/p&gt;

&lt;p&gt;For example if you use maven this would be done by specify the following dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.aayushatharva.brotli4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;brotli4j&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
    &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.aayushatharva.brotli4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;native-linux-x86_64&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
    &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.aayushatharva.brotli4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;native-osx-x86_64&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
    &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.aayushatharva.brotli4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;native-windows-x86_64&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
    &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the dependencies are added HTTP decompression for brotli will be supported out of the box.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abezhovets&quot;&gt;@abezhovets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bhashinee&quot;&gt;@benevans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bhashinee&quot;&gt;@Bhashinee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/boris-unckel&quot;&gt;@boris-unckel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chenqwwq&quot;&gt;@chenqwwq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dapengzhang0&quot;&gt;@dapengzhang0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fredericBregier&quot;&gt;@fredericBregier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gwre-ivan&quot;&gt;@gwre-ivan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpron&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jameskleeh&quot;&gt;@jameskleeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kevinw66&quot;&gt;@kevinw66&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/koh-osug&quot;&gt;@koh-osug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LiyuanLacfo&quot;&gt;@LiyuanLacfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/NiteshKant&quot;&gt;@NiteshKant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/roycarser&quot;&gt;@roycarser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/skyguard1&quot;&gt;@skyguard1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Stwissel&quot;&gt;@Stwissel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/terrarier2111&quot;&gt;@terrarier2111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vietj&quot;&gt;@vietj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/05/03/quic-0-0-11-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.11.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-05-03T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/05/03/quic-0-0-11-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.11.Final.

This release introduces two new abstractions that allows:


Preload classes before calling native OnLoad function to prevent classloader leak (#260)
Only access static field once we ensured we could load the native lib (#255)
Update quiche so we can support QUIC v1 as well (#256)
Allow to configure which QUIC version is used (#254)
Allow the user to query which QUIC versions are currently supported (#253)
Allows use direct buffers when trying to read from a stream (#247)



Beside these there are various other small changes.

For more details related to this release see our bug-tracker.

For more details about...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.11.Final.&lt;/p&gt;

&lt;p&gt;This release introduces two new abstractions that allows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preload classes before calling native OnLoad function to prevent classloader leak (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/260&quot;&gt;#260&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only access static field once we ensured we could load the native lib (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/255&quot;&gt;#255&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update quiche so we can support QUIC v1 as well (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/256&quot;&gt;#256&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to configure which QUIC version is used (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/254&quot;&gt;#254&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow the user to query which QUIC versions are currently supported (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/253&quot;&gt;#253&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allows use direct buffers when trying to read from a stream (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/247&quot;&gt;#247&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Beside these there are various other small changes.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/10?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/04/01/4-1-63-Final.html</id>
<title>Netty 4.1.63.Final released - Regression fix</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-04-01T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/04/01/4-1-63-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we decided that we should do another netty release as just after we released  4.1.62.Final we noticed another regression that could lead to an re-entrance problem in the SslHandler. This could cause encoding problems in some rare cases. As the SslHandler is a critical component of netty we think a quick release is warranted.

For more details please see (#11133)....
</summary>
<content type="html">
&lt;p&gt;Today we decided that we should do another netty release as just after we released  &lt;a href=&quot;https://github.com/netty/netty/milestone/237?closed=1&quot;&gt;4.1.62.Final&lt;/a&gt; we noticed another regression that could lead to an re-entrance problem in the &lt;code&gt;SslHandler&lt;/code&gt;. This could cause encoding problems in some rare cases. As the &lt;code&gt;SslHandler&lt;/code&gt; is a critical component of netty we think a quick release is warranted.&lt;/p&gt;

&lt;p&gt;For more details please see (&lt;a href=&quot;https://github.com/netty/netty/pull/11133&quot;&gt;#11133&lt;/a&gt;).&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/31/release-day.html</id>
<title>Release day for HTTP/3, QUIC and IO_URING</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-03-31T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/31/release-day.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
After announcing the release of netty-4.1.62.Final earlier today I have more news to share... We did another three releases today.

Netty/Incubator/Codec/Quic 0.0.10.Final released

The new release of netty-incubator-codec-quic comes with a few small bug-fixes but most importantly with this release we started to also support linux-aarch64, which means you will not only be able to use the quic codec itself on linux-aarch64 but also our http3 codec that depends on it.

For more details about the included changes please check the issue-tracker

Netty/Incubator/Codec/Http3 0.0.3.Final released

As stated above you are now be able to run the http3 codec on linux-aarch64 as well, but thats not...
</summary>
<content type="html">
&lt;p&gt;After announcing the release of &lt;a href=&quot;https://netty.io/news/2021/03/31/4-1-62-Final.html&quot;&gt;netty-4.1.62.Final&lt;/a&gt; earlier today I have more news to share... We did another three releases today.&lt;/p&gt;

&lt;h2&gt;Netty/Incubator/Codec/Quic 0.0.10.Final released&lt;/h2&gt;

&lt;p&gt;The new release of netty-incubator-codec-quic comes with a few small bug-fixes but most importantly with this release we started to also support linux-aarch64, which means you will not only be able to use the quic codec itself on linux-aarch64 but also our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3&quot;&gt;http3 codec&lt;/a&gt; that depends on it.&lt;/p&gt;

&lt;p&gt;For more details about the included changes please check the &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/9?closed=1&quot;&gt;issue-tracker&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Netty/Incubator/Codec/Http3 0.0.3.Final released&lt;/h2&gt;

&lt;p&gt;As stated above you are now be able to run the http3 codec on linux-aarch64 as well, but thats not all. This release also includes a few small bugfixes when it comes to handling CONNECT requests and push streams in general&lt;/p&gt;

&lt;p&gt;For more details about the included changes please check the &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3/milestone/3?closed=1&quot;&gt;issue-tracker&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Netty/Incubator/Native/Transport/IOUring 0.0.5.Final released&lt;/h2&gt;

&lt;p&gt;The new release of netty-incubator-transport-io_uring contains various interesting changes. First of we now use GCC10 when cross compile and so may be able to make use of LSE when you run on aarch64. Beside this this release also add support for UDP_GSO to increase the performance when sending datagrams over the wire.&lt;/p&gt;

&lt;p&gt;For more details about the included changes please check the &lt;a href=&quot;https://github.com/netty/netty-incubator-transport-io_uring/milestone/5?closed=1&quot;&gt;issue-tracker&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/31/4-1-62-Final.html</id>
<title>Netty 4.1.62.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-03-31T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/31/4-1-62-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Just after releasing netty 4.1.61.Final yesterday we decided to do a quick followup release a.k.a netty 4.1.612.Final.  to fix a regression that slipped in. The regression affects only users that use the native KQueue transport. For more details please see (#11128). Special thanks to @violetagg for reporting the regression in such a fast manner and also providing a fix for it!...
</summary>
<content type="html">
&lt;p&gt;Just after releasing netty &lt;a href=&quot;https://github.com/netty/netty/milestone/236?closed=1&quot;&gt;4.1.61.Final&lt;/a&gt; yesterday we decided to do a quick followup release a.k.a netty &lt;a href=&quot;https://github.com/netty/netty/milestone/237?closed=1&quot;&gt;4.1.612.Final&lt;/a&gt;.  to fix a regression that slipped in. The regression affects only users that use the native KQueue transport. For more details please see (&lt;a href=&quot;https://github.com/netty/netty/pull/11128&quot;&gt;#11128&lt;/a&gt;). Special thanks to &lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt; for reporting the regression in such a fast manner and also providing a fix for it!&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/30/4-1-61-Final.html</id>
<title>Netty 4.1.61.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-03-30T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/30/4-1-61-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.61.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the codec-http2 package and proxy HTTP/2 to HTTP/1.1. This fix is a follow up of the previous fix done as part of CVE-2021-21295 as we missed to handle one case.

For more details about the impact of the CVE (CVE-2021-21409) check the Security Advisory.

The most important changes are:


Validate Content-Length header in HTTP/2 decoder (CVE-2021-21409)
Add support for UDP_GRO (#11120)
DefaultThreadFactory must not use Thread.currentThread() when constructed without ThreadGroup (#11119)
Let's use gcc10 when cross-compiling for LSE support...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.61.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the &lt;code&gt;codec-http2&lt;/code&gt; package and proxy HTTP/2 to HTTP/1.1. This fix is a follow up of the previous fix done as part of &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-wm47-8v5p-wjpj&quot;&gt;CVE-2021-21295&lt;/a&gt; as we missed to handle one case.&lt;/p&gt;

&lt;p&gt;For more details about the impact of the CVE (CVE-2021-21409) check the &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-f256-j965-7f32&quot;&gt;Security Advisory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validate Content-Length header in HTTP/2 decoder (&lt;a href=&quot;https://github.com/netty/netty/commit/b0fa4d5aab4215f3c22ce6123dd8dd5f38dc0432&quot;&gt;CVE-2021-21409&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for UDP_GRO (&lt;a href=&quot;https://github.com/netty/netty/pull/11120&quot;&gt;#11120&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DefaultThreadFactory must not use Thread.currentThread() when constructed without ThreadGroup (&lt;a href=&quot;https://github.com/netty/netty/pull/11119&quot;&gt;#11119&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Let&#39;s use gcc10 when cross-compiling for LSE support (&lt;a href=&quot;https://github.com/netty/netty/pull/11112&quot;&gt;#11112&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to have an empty path when convert a CONNECT request (&lt;a href=&quot;https://github.com/netty/netty/pull/11108&quot;&gt;#11108&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we can correctly propagate exceptions to streams even if endStream flag is set (&lt;a href=&quot;https://github.com/netty/netty/pull/11105&quot;&gt;#11105&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not send GOAWAY frame before connection preface (&lt;a href=&quot;https://github.com/netty/netty/pull/11107&quot;&gt;#11107&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Continue reading when the number of bytes is less then the configured number of bytes when using DatagramChannels (&lt;a href=&quot;https://github.com/netty/netty/pull/11089&quot;&gt;#11089&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to configure the maximum number of message to write per eventloop (&lt;a href=&quot;https://github.com/netty/netty/pull/11086&quot;&gt;#11086&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SslHandler flushing with TCP Fast Open fix (&lt;a href=&quot;https://github.com/netty/netty/pull/11077&quot;&gt;#11077&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Also support CompositeByteBuf with SegmentedDatagramPacket (&lt;a href=&quot;https://github.com/netty/netty/pull/11081&quot;&gt;#11081&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Return correct result for Futures that are returned from UnorderedThreadPoolExecutor (&lt;a href=&quot;https://github.com/netty/netty/pull/11074&quot;&gt;#11074&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix alignment handling for pooled direct buffers (&lt;a href=&quot;https://github.com/netty/netty/pull/11106&quot;&gt;#11106&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/236?closed=1&quot;&gt;4.1.61.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;CVE-2021-21409 - request smuggling&lt;/h2&gt;

&lt;p&gt;This release fixes a possible security problem which have allowes for request smuggling, check the &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-f256-j965-7f32&quot;&gt;Security Advisory&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h2&gt;GRO support for &lt;code&gt;EpollDatagramChannel&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This release also adds support for GRO (&lt;code&gt;UDP_SEGMENT&lt;/code&gt;) when using the native &lt;code&gt;EpollDatagramChannel&lt;/code&gt; and running on a system with a recent enough kernel. You can make use of this by using the &lt;code&gt;EpollChannelOption.UDP_GRO&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;For more detail on GRO please read &lt;a href=&quot;https://lwn.net/Articles/768995/&quot;&gt;the LWN article&lt;/a&gt; which explains how this can be used to maximize performance when using &lt;code&gt;QUIC&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;LSE support for AARCH64&lt;/h2&gt;

&lt;p&gt;This release switched to use GCC10 for cross-compiling and so enable the usage of LSE when running on AARCH64. Using LSE can have a huge performance impact. For more details please read the &lt;a href=&quot;https://mysqlonarm.github.io/ARM-LSE-and-MySQL/&quot;&gt;MySQL on ARM blogpost&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alalag1&quot;&gt;@alalag1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bennett-Lynch&quot;&gt;@Bennett-Lynch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elharo&quot;&gt;@elharo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/meshcow&quot;&gt;@meshcow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stuartwdouglas&quot;&gt;@stuartwdouglas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/25/quic-0-0-9-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.9.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-03-25T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/25/quic-0-0-9-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.9.Final.

This release introduces two new abstractions that allows:


support of GSO for any Channel that supports it by let the user plug-in the correct implementation (#222)
support for different flush strategies to ensure packets are transfered in a timely manner  (#228)



Beside these there are various other small changes.

For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.9.Final.&lt;/p&gt;

&lt;p&gt;This release introduces two new abstractions that allows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;support of GSO for any &lt;code&gt;Channel&lt;/code&gt; that supports it by let the user plug-in the correct implementation (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/222&quot;&gt;#222&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;support for different flush strategies to ensure packets are transfered in a timely manner  (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/228&quot;&gt;#228&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Beside these there are various other small changes.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/8?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/12/http3-0-0-2-Final.html</id>
<title>Netty/Incubator/Codec/Http3 0.0.2.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-03-12T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/12/http3-0-0-2-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
After we just announce the initial release of our http3 codec a week ago I am happy to announce the next release today. This release fixes various bugs and now fully pass the h3spec http3 tests.
Beside bug-fixes we also upgraded to netty 4.1.60.Final and netty-incubator-codec-quic 0.0.8.Final.

For more details on how to make use of this code please read our initial announcement.

All the details on the recent changes for this release can be found in our issue tracker.

Where can I find the project ?

The project itself lives on GitHub....
</summary>
<content type="html">
&lt;p&gt;After we just announce the initial release of our http3 codec a week ago I am happy to announce the next release today. This release fixes various bugs and now fully pass the &lt;a href=&quot;https://github.com/kazu-yamamoto/h3spec&quot;&gt;h3spec http3 tests&lt;/a&gt;.
Beside bug-fixes we also upgraded to &lt;a href=&quot;https://netty.io/news/2021/03/09/4-1-60-Final.html&quot;&gt;netty 4.1.60.Final&lt;/a&gt; and &lt;a href=&quot;https://netty.io/news/2021/03/09/quic-0-0-8-Final.html&quot;&gt;netty-incubator-codec-quic 0.0.8.Final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details on how to make use of this code please read our &lt;a href=&quot;https://netty.io/news/2021/03/04/http3-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All the details on the recent changes for this release can be found in our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3/milestone/2&quot;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Where can I find the project ?&lt;/h1&gt;

&lt;p&gt;The project itself lives on &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/09/quic-0-0-8-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.8.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-03-09T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/09/quic-0-0-8-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.8.Final, just after our release of netty 4.1.60.Final earlier today.

This release not only fixes a few bugs but also makes use of the new GSO support in netty if the EpollDatagramChannel is used. This change helps to improve the throughput in our benchmarks quite a bit when running h2load (patched for QUIC / HTTP3 support) against our HTTP3 implementation.

Without GSO:

norman@ubuntu-dev:~$ LD_PRELOAD="/home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libssl.so.1.1 /home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libcrypto.so.1.1"  /home/norman/Apps/nghttp2-quic/bin/h2load  -n 10 -m 1 -c 1 -t 1 -T 30 --npn-list=h3-29 https://10.211.55.8:8888
starting benchmark...
spawning thread #0: 1 total client(s). 10 total requests
TLS Protocol: TLSv1.3
Cipher: TLS_AES_128_GCM_SHA256
Server Temp Key:...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.8.Final, just after our release of netty 4.1.60.Final earlier today.&lt;/p&gt;

&lt;p&gt;This release not only fixes a few bugs but also makes use of the new &lt;a href=&quot;https://github.com/netty/netty/pull/11038&quot;&gt;GSO&lt;/a&gt; support in netty if the &lt;code&gt;EpollDatagramChannel&lt;/code&gt; is used. This change helps to improve the throughput in our benchmarks quite a bit when running &lt;a href=&quot;https://github.com/nghttp2/nghttp2/tree/quic&quot;&gt;h2load&lt;/a&gt; (patched for QUIC / HTTP3 support) against our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3&quot;&gt;HTTP3&lt;/a&gt; implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without GSO&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;norman@ubuntu-dev:~$ LD_PRELOAD=&quot;/home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libssl.so.1.1 /home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libcrypto.so.1.1&quot;  /home/norman/Apps/nghttp2-quic/bin/h2load  -n 10 -m 1 -c 1 -t 1 -T 30 --npn-list=h3-29 https://10.211.55.8:8888
starting benchmark...
spawning thread #0: 1 total client(s). 10 total requests
TLS Protocol: TLSv1.3
Cipher: TLS_AES_128_GCM_SHA256
Server Temp Key: X25519 253 bits
Application protocol: h3-29
progress: 10% done
progress: 20% done
progress: 30% done
progress: 40% done
progress: 50% done
progress: 60% done
progress: 70% done
progress: 80% done
progress: 90% done
progress: 100% done

finished in 4.00s, 2.50 req/s, 250.36MB/s
requests: 10 total, 10 started, 10 done, 10 succeeded, 0 failed, 0 errored, 0 timeout
status codes: 10 2xx, 0 3xx, 0 4xx, 0 5xx
traffic: 1000.31MB (1048896064) total, 30B (30) headers (space savings 70.00%), 1000.00MB (1048576000) data
UDP datagram: 18509 sent, 864619 received
                     min         max         mean         sd        +/- sd
time for request:   377.25ms    436.32ms    398.96ms     19.83ms    60.00%
time for connect:     4.46ms      4.46ms      4.46ms         0us   100.00%
time to 1st byte:     6.58ms      6.58ms      6.58ms         0us   100.00%
req/s           :       2.50        2.50        2.50        0.00   100.00%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;With GSO&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;norman@ubuntu-dev:~$ LD_PRELOAD=&quot;/home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libssl.so.1.1 /home/norman/Apps/OpenSSL_1_1_1g-quic-draft-33/lib/libcrypto.so.1.1&quot;  /home/norman/Apps/nghttp2-quic/bin/h2load  -n 10 -m 1 -c 1 -t 1 -T 30 --npn-list=h3-29 https://10.211.55.8:8888
starting benchmark...
spawning thread #0: 1 total client(s). 10 total requests
TLS Protocol: TLSv1.3
Cipher: TLS_AES_128_GCM_SHA256
Server Temp Key: X25519 253 bits
Application protocol: h3-29
progress: 10% done
progress: 20% done
progress: 30% done
progress: 40% done
progress: 50% done
progress: 60% done
progress: 70% done
progress: 80% done
progress: 90% done
progress: 100% done

finished in 2.51s, 3.98 req/s, 398.08MB/s
requests: 10 total, 10 started, 10 done, 10 succeeded, 0 failed, 0 errored, 0 timeout
status codes: 10 2xx, 0 3xx, 0 4xx, 0 5xx
traffic: 1000.31MB (1048896064) total, 30B (30) headers (space savings 70.00%), 1000.00MB (1048576000) data
UDP datagram: 4342 sent, 864341 received
                     min         max         mean         sd        +/- sd
time for request:   231.79ms    272.21ms    250.80ms     15.04ms    40.00%
time for connect:     3.50ms      3.50ms      3.50ms         0us   100.00%
time to 1st byte:     4.67ms      4.67ms      4.67ms         0us   100.00%
req/s           :       3.98        3.98        3.98        0.00   100.00%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/7?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add support for qlog (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/197&quot;&gt;#197&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add QuicStreamLimitChangedEvent that will be fired once we can create more streams again (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/198&quot;&gt;#198&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we always call quiche_conn_on_timeout(...) when a timeout is about to run (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/206&quot;&gt;#206&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Rewrite QuicheQuicStreamChannel to not do any extra queued and also handle writability better (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/208&quot;&gt;#208&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update to latest quiche commit (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/211&quot;&gt;#211&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support shutting down the stream with an error code (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/213&quot;&gt;#213&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make use of GSO when possible  (&lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/pull/204&quot;&gt;#204&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/09/4-1-60-Final.html</id>
<title>Netty 4.1.60.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-03-09T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/09/4-1-60-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.60.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the codec-http2 package and proxy HTTP/2 to HTTP/1.1 .
This release also includes a change that makes it possible to enable client side SSL session caching when using our native SSL implementation.

For more details about the impact of the CVE (CVE-2021-21295) check the Security Advisory.

The most important changes are:


Validate Content-Length header in HTTP/2 decoder (CVE-2021-21295)
Enable stateless resumption for TLSv1.3 by default when using OpenSSL / BoringSSL (#10997)
Allow blocking calls when parsing etcResolver/hosts files (#11009)
fixed...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.60.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the &lt;code&gt;codec-http2&lt;/code&gt; package and proxy HTTP/2 to HTTP/1.1 .
This release also includes a change that makes it possible to enable client side SSL session caching when using our native SSL implementation.&lt;/p&gt;

&lt;p&gt;For more details about the impact of the CVE (CVE-2021-21295) check the &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-wm47-8v5p-wjpj&quot;&gt;Security Advisory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validate Content-Length header in HTTP/2 decoder (&lt;a href=&quot;https://github.com/netty/netty/commit/89c241e3b1795ff257af4ad6eadc616cb2fb3dc4&quot;&gt;CVE-2021-21295&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enable stateless resumption for TLSv1.3 by default when using OpenSSL / BoringSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/10997&quot;&gt;#10997&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow blocking calls when parsing etcResolver/hosts files (&lt;a href=&quot;https://github.com/netty/netty/pull/11009&quot;&gt;#11009&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;fixed ipv6 address join ipv4 group failed (&lt;a href=&quot;https://github.com/netty/netty/pull/11015&quot;&gt;#11015&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Propagate SSLException to the Http2StreamChannels (&lt;a href=&quot;https://github.com/netty/netty/pull/11023&quot;&gt;#11023&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Less noisy logging in DnsServerAddressStreamProviders (&lt;a href=&quot;https://github.com/netty/netty/pull/11031&quot;&gt;#11031&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HttpPostMultipartRequestDecoder performance regression (&lt;a href=&quot;https://github.com/netty/netty/issues/10508&quot;&gt;#10508&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for UDP_SEGMENT (GSO) when using sendmmsg (&lt;a href=&quot;https://github.com/netty/netty/pull/11038&quot;&gt;#11038&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure removal from queue happens before writeAndFlush(...) is called (&lt;a href=&quot;https://github.com/netty/netty/pull/11049&quot;&gt;#11049&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix NPE that can happen in the WriteTimeoutHandler when multiple executors are used (&lt;a href=&quot;https://github.com/netty/netty/pull/11053&quot;&gt;#11053&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support session cache for client and server when using native SSLEngine implementation (&lt;a href=&quot;https://github.com/netty/netty/pull/10994&quot;&gt;#10994&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to config dns bind address in DnsNameResolver (&lt;a href=&quot;https://github.com/netty/netty/pull/11061&quot;&gt;#11061&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;SSL Session caching&lt;/h2&gt;

&lt;p&gt;As stated before this release includes a change which allows to use SSL session caching on the client side when using our native SSL implementation. Unfortunally the use of the cache may trigger a JDK bug on the remote peer if the remote peer uses the JDK SSL implementation for TLSv1.3. Because of that we decided to not enable the session caching by default on the client-side. If you still want to enable it you can either use &lt;code&gt;-Dio.netty.handler.ssl.openssl.sessionCacheClient=true&lt;/code&gt; or explict enable it via the &lt;code&gt;OpenSslContext&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;OpenSslContext context = ...;
contest.sessionContext().setSessionCacheEnabled(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;GSO support for &lt;code&gt;EpollDatagramChannel&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This release also adds support for GSO (&lt;code&gt;UDP_SEGMENT&lt;/code&gt;) when using the native &lt;code&gt;EpollDatagramChannel&lt;/code&gt; and running on a system with a recent enough kernel. You can make use of this by writing &lt;code&gt;SegmentedDatagramPacket&lt;/code&gt;s to the channel.&lt;/p&gt;

&lt;p&gt;For more detail on GSO please read &lt;a href=&quot;https://blog.cloudflare.com/accelerating-udp-packet-transmission-for-quic/&quot;&gt;the blogpost by cloudflare&lt;/a&gt; which explains how this can be used to maximize performance when using &lt;code&gt;QUIC&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;CVE-2021-21295 - request smuggling&lt;/h2&gt;

&lt;p&gt;This release fixes a possible security problem which have allowes for request smuggling, check the &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-wm47-8v5p-wjpj&quot;&gt;Security Advisory&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artgon&quot;&gt;@artgon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Arun-LinkedIn&quot;&gt;@Arun-LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aztosca&quot;&gt;@aztosca&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bennett-Lynch&quot;&gt;@Bennett-Lynch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dadepo&quot;&gt;@dadepo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/discko&quot;&gt;@discko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/horizonzy&quot;&gt;@horizonzy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Shoothzj&quot;&gt;@Shoothzj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/strugcoder&quot;&gt;@strugcoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wineway&quot;&gt;@wineway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zentol&quot;&gt;@zentol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/03/04/http3-0-0-1-Final.html</id>
<title>Netty/Incubator/Codec/Http3 0.0.1.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-03-04T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/03/04/http3-0-0-1-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
After a few months of work I am happy to announce the first incubator release of our own HTTP/3 codec. This codec is a pure Java implementation (written from scratch) that is using our own QUIC abstraction under the hood.

While it is still early days this implementation is mostly "feature-complete" and as far as we are aware of full-functional. Please test it out and provide feedback and/or PRs :)

Incubator, what does this mean ?

To be able to work on new exciting features without "affecting" the core of netty we decided to start development of such features in the "incubator". This...
</summary>
<content type="html">
&lt;p&gt;After a few months of work I am happy to announce the first incubator release of our own &lt;a href=&quot;https://quicwg.org/base-drafts/draft-ietf-quic-http.html&quot;&gt;HTTP/3&lt;/a&gt; codec. This codec is a pure Java implementation (written from scratch) that is using our own &lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-quic-transport/?include_text=1&quot;&gt;QUIC&lt;/a&gt; abstraction under the hood.&lt;/p&gt;

&lt;p&gt;While it is still early days this implementation is mostly &quot;feature-complete&quot; and as far as we are aware of full-functional. Please test it out and provide feedback and/or PRs :)&lt;/p&gt;

&lt;h1&gt;Incubator, what does this mean ?&lt;/h1&gt;

&lt;p&gt;To be able to work on new exciting features without &quot;affecting&quot; the core of netty we decided to start development of such features in the &quot;incubator&quot;. This means these features will be developed in a seperate repository and only be merged back into the core netty repository once we feel that we can guarantee we not need to break the API anymore and consider these production ready. This hopefully helps to clarify expections and stability of the code and so people should be fully aware that APIs may change. Beside this it also allows to use different release schedules.&lt;/p&gt;

&lt;h1&gt;How can I use the HTTP/3 codec ?&lt;/h1&gt;

&lt;p&gt;You we will need to include the right dependency of the HTTP/3 codec and QUIC codec. At the moment we support Linux (x86_64), MacOS (x86_64) and Windows (x86_64) for the QUIC codec.&lt;/p&gt;

&lt;p&gt;An example for maven / linux would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-quic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.7.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;linux-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-http3&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you use macOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-quic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.7.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;osx-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-http3&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you use windows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-quic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.7.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;windows-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-http3&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also simplify things by using the &lt;a href=&quot;https://github.com/trustin/os-maven-plugin&quot;&gt;os-maven-plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;How would I setup a HTTP/3 server / HTTP/3 client?&lt;/h1&gt;

&lt;p&gt;Bootstrapping a HTTP/3 server looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public final class Http3ServerExample {
    private static final byte[] CONTENT = &quot;Hello World!\r\n&quot;.getBytes(CharsetUtil.US_ASCII);
    private Http3ServerExample() { }

    public static void main(String... args) throws Exception {
        class Http3ServerHandler extends Http3RequestStreamInboundHandler {
            @Override
            protected void channelRead(
                    ChannelHandlerContext ctx, Http3HeadersFrame frame, boolean isLast) {
                if (isLast) {
                    writeResponse(ctx);
                }
                ReferenceCountUtil.release(frame);
            }

            @Override
            protected void channelRead(
                    ChannelHandlerContext ctx, Http3DataFrame frame, boolean isLast) {
                if (isLast) {
                    writeResponse(ctx);
                }
                ReferenceCountUtil.release(frame);
            }

            private void writeResponse(ChannelHandlerContext ctx) {
                Http3HeadersFrame headersFrame = new DefaultHttp3HeadersFrame();
                headersFrame.headers().status(&quot;200&quot;);
                headersFrame.headers().set(&quot;server&quot;, &quot;netty&quot;);
                ctx.write(headersFrame);
                ctx.writeAndFlush(new DefaultHttp3DataFrame(Unpooled.wrappedBuffer(CONTENT)))
                            .addListener(QuicStreamChannel.SHUTDOWN_OUTPUT);
            }
        }

        SelfSignedCertificate cert = new SelfSignedCertificate();
        QuicSslContext sslContext = QuicSslContextBuilder.forServer(cert.key(), null, cert.cert())
                .applicationProtocols(Http3.supportedApplicationProtocols()).build();
        ChannelHandler codec = Http3.newQuicServerCodecBuilder()
                .sslContext(sslContext)
                .maxIdleTimeout(5000, TimeUnit.MILLISECONDS)
                .initialMaxData(10000000)
                .initialMaxStreamDataBidirectionalLocal(1000000)
                .initialMaxStreamDataBidirectionalRemote(1000000)
                .initialMaxStreamsBidirectional(100)
                .tokenHandler(InsecureQuicTokenHandler.INSTANCE)
                .handler(new ChannelInitializer&amp;lt;QuicChannel&amp;gt;() {
                    @Override
                    protected void initChannel(QuicChannel ch) {
                        // Called for each connection
                        ch.pipeline().addLast(new Http3ServerConnectionHandler(
                                new ChannelInitializer&amp;lt;QuicStreamChannel&amp;gt;() {
                                    // Called for each request-stream,
                                    @Override
                                    protected void initChannel(QuicStreamChannel ch) {
                                        ch.pipeline().addLast(new Http3ServerHandler());
                                    }
                                });
                    }
                }).build();

        NioEventLoopGroup group = new NioEventLoopGroup(1);
        try {
            Bootstrap bs = new Bootstrap();
            Channel channel = bs.group(group)
                    .channel(NioDatagramChannel.class)
                    .handler(codec)
                    .bind(new InetSocketAddress(9999)).sync().channel();
            channel.closeFuture().sync();
        } finally {
            group.shutdownGracefully();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the corespanding HTTP/3 client like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public final class Http3ClientExample {
    private Http3ClientExample() { }

    public static void main(String... args) throws Exception {
        class Http3ClientHandler extends Http3RequestStreamInboundHandler {
            @Override
            protected void channelRead(
                    ChannelHandlerContext ctx, Http3HeadersFrame frame, boolean isLast) {
                releaseFrameAndCloseIfLast(ctx, frame, isLast);
            }

            @Override
            protected void channelRead(
                    ChannelHandlerContext ctx, Http3DataFrame frame, boolean isLast) {
                System.out.print(frame.content().toString(CharsetUtil.US_ASCII));
                releaseFrameAndCloseIfLast(ctx, frame, isLast);
            }

            private void releaseFrameAndCloseIfLast(
                    ChannelHandlerContext ctx, Http3RequestStreamFrame frame, boolean isLast) {
                ReferenceCountUtil.release(frame);
                if (isLast) {
                    ctx.close();
                }
            }
        }

        QuicSslContext context = QuicSslContextBuilder.forClient()
                .trustManager(InsecureTrustManagerFactory.INSTANCE)
                .applicationProtocols(Http3.supportedApplicationProtocols()).build();
        ChannelHandler codec = Http3.newQuicClientCodecBuilder()
                .sslContext(context)
                .maxIdleTimeout(5000, TimeUnit.MILLISECONDS)
                .initialMaxData(10000000)
                .initialMaxStreamDataBidirectionalLocal(1000000)
                .build();
        NioEventLoopGroup group = new NioEventLoopGroup(1);

        try {
            Bootstrap bs = new Bootstrap();
            Channel channel = bs.group(group)
                    .channel(NioDatagramChannel.class)
                    .handler(codec)
                    .bind(0).sync().channel();

            QuicChannel quicChannel = QuicChannel.newBootstrap(channel)
                    .handler(new Http3ClientConnectionHandler())
                    .remoteAddress(new InetSocketAddress(NetUtil.LOCALHOST4, 9999))
                    .connect()
                    .get();

            QuicStreamChannel streamChannel = 
                    Http3.newRequestStream(quicChannel, new Http3ClientHandler()).sync().getNow();

            // Write the Header frame and send the FIN to mark the end of the request.
            // After this its not possible anymore to write any more data.
            Http3HeadersFrame frame = new DefaultHttp3HeadersFrame();
            frame.headers().method(&quot;GET&quot;).path(&quot;/&quot;);
            streamChannel.writeAndFlush(frame)
                    .addListener(QuicStreamChannel.SHUTDOWN_OUTPUT).sync();

            // Wait for the stream channel and quic channel to be closed (this will happen
            // after we received the FIN).
            // After this is done we will close the underlying datagram channel.
            streamChannel.closeFuture().sync();

            // After we received the response lets also close the underlying QUIC channel
            // and datagram channel.
            quicChannel.close().sync();
            channel.close().sync();
        } finally {
            group.shutdownGracefully();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Converting layer&lt;/h1&gt;

&lt;p&gt;To make it easier for people we also include a &quot;converting&quot; layer which allows to just act on the usual &lt;code&gt;HttpResponse&lt;/code&gt; / &lt;code&gt;HttpRequest&lt;/code&gt; and &lt;code&gt;HttpContent&lt;/code&gt; objects (like you are used too from the HTTP/1 codec). To make use of it just add it to the &lt;code&gt;ChannelPipeline&lt;/code&gt; as show here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Http1RequestHandler extends ChannelInboundHandlerAdapter {
    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
        if (msg instanceof LastHttpContent) {
             FullHttpResponse response = new DefaultFullHttpResponse(
                    HttpVersion.HTTP_1_1, OK, CONTENT.retainedDuplicate());
             response.headers().setInt(HttpHeaderNames.CONTENT_LENGTH, CONTENT.readableBytes());
             ctx.writeAndFlush(response);
        }
    }
}

SelfSignedCertificate cert = new SelfSignedCertificate();
QuicSslContext sslContext = QuicSslContextBuilder.forServer(cert.key(), null, cert.cert())
           .applicationProtocols(Http3.supportedApplicationProtocols()).earlyData(true).build();
ChannelHandler codec = Http3.newQuicServerCodecBuilder()
        .option(QuicChannelOption.UDP_SEGMENTS, 10)
        .sslContext(sslContext)
        .maxIdleTimeout(5000, TimeUnit.MILLISECONDS)
        .maxSendUdpPayloadSize(1500)
        .maxRecvUdpPayloadSize(1500)
        .initialMaxData(10000000)
        .initialMaxStreamDataBidirectionalLocal(1000000)
        .initialMaxStreamDataBidirectionalRemote(1000000)
        .initialMaxStreamsBidirectional(100000)
        .tokenHandler(InsecureQuicTokenHandler.INSTANCE)
        .handler(new ChannelInitializer&amp;lt;QuicChannel&amp;gt;() {
                    @Override
                    protected void initChannel(QuicChannel ch) {
                        ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {
                            @Override
                            public void channelInactive(ChannelHandlerContext ctx) throws Exception {
                                System.err.println(&quot;INACTIVE&quot;);
                                ((QuicChannel) ctx.channel()).collectStats().addListener(f -&amp;gt; {
                                    System.err.println(f.getNow());
                                });
                            }
                        });
                        ch.pipeline().addLast(new Http3ServerConnectionHandler(
                                new ChannelInitializer&amp;lt;QuicStreamChannel&amp;gt;() {
                                    // Called for each request-stream,
                                    @Override
                                    protected void initChannel(QuicStreamChannel ch) {
                                        ch.pipeline().addLast(new Http3FrameToHttpObjectCodec(true));
                                        ch.pipeline().addLast(new Http1RequestHandler());
                                    }
                                }));
                    }
        }).build();

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also note that this adapter handler supports server and client.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;p&gt;For maximal performance you should use the native &lt;code&gt;epoll&lt;/code&gt; (&lt;code&gt;EpollDatagramChannel&lt;/code&gt; / &lt;code&gt;EpollEventLoopGroup&lt;/code&gt;) transport that is included by netty as it can use &lt;code&gt;sendmmsg&lt;/code&gt; / &lt;code&gt;recvmmsg&lt;/code&gt; which will help to improve the throughtput.&lt;/p&gt;

&lt;h1&gt;Where can I find the project ?&lt;/h1&gt;

&lt;p&gt;The project itself lives on &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/02/08/4-1-59-Final.html</id>
<title>Netty 4.1.59.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-02-08T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/02/08/4-1-59-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.59.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the HttpPostRequestDecoder or HttpPostMultiPartRequestDecoder.

For more details about the impact of the CVE check the Security Advisory.

The most important changes are:


Implement SWAR indexOf byte search (#10737)
Correctly filter out TLSv1.3 ciphers if TLSv1.3 is not enabled (#10919)
Allow blocking calls in UnixResolverDnsServerAddressStreamProvider#parse (#10935)
Ignore priority frames for non existing streams and so prevent a NPE (#10943)
Make native loading logging less confusing (#10944)
Use GracefulShutdown when stream space is exhausted (#10946)
Correctly handle fragmentation in JdkZlibDecoder (#10948)
Merge WebSocket extensions (#10956)
Override...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.59.Final, which beside fixing various bugs also contains a security fix which may affect you if you use the &lt;code&gt;HttpPostRequestDecoder&lt;/code&gt; or &lt;code&gt;HttpPostMultiPartRequestDecoder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details about the impact of the CVE check the &lt;a href=&quot;https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2&quot;&gt;Security Advisory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement SWAR indexOf byte search (&lt;a href=&quot;https://github.com/netty/netty/pull/10737&quot;&gt;#10737&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly filter out TLSv1.3 ciphers if TLSv1.3 is not enabled (&lt;a href=&quot;https://github.com/netty/netty/pull/10919&quot;&gt;#10919&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow blocking calls in UnixResolverDnsServerAddressStreamProvider#parse (&lt;a href=&quot;https://github.com/netty/netty/pull/10935&quot;&gt;#10935&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ignore priority frames for non existing streams and so prevent a NPE (&lt;a href=&quot;https://github.com/netty/netty/pull/10943&quot;&gt;#10943&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make native loading logging less confusing (&lt;a href=&quot;https://github.com/netty/netty/pull/10944&quot;&gt;#10944&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use GracefulShutdown when stream space is exhausted (&lt;a href=&quot;https://github.com/netty/netty/pull/10946&quot;&gt;#10946&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle fragmentation in JdkZlibDecoder (&lt;a href=&quot;https://github.com/netty/netty/pull/10948&quot;&gt;#10948&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Merge WebSocket extensions (&lt;a href=&quot;https://github.com/netty/netty/pull/10956&quot;&gt;#10956&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Override ALPN methods on ReferenceCountedOpenSslEngine (&lt;a href=&quot;https://github.com/netty/netty/pull/10954&quot;&gt;#10954&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix possible SEGV when using native dns resolver on macos (&lt;a href=&quot;https://github.com/netty/netty/pull/10971&quot;&gt;#10971&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Revert &quot;Enable SSL_MODE_ENABLE_FALSE_START if jdkCompatibilityMode is false (&lt;a href=&quot;https://github.com/netty/netty/pull/10980&quot;&gt;#10980&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Introduce SslContextOption which can be used for &quot;optional&quot; features in SslContext implementations (&lt;a href=&quot;https://github.com/netty/netty/pull/10981&quot;&gt;#10981&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix memory release failure when &quot;maxNumElems == 1&quot; of PoolSubpage (&lt;a href=&quot;https://github.com/netty/netty/pull/10988&quot;&gt;#10988&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Revert HttpPostMultipartRequestDecoder and HttpPostStandardRequestDecoder to e5951d4 (&lt;a href=&quot;https://github.com/netty/netty/pull/10989&quot;&gt;#10989&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/atropnikov&quot;&gt;@atropnikov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/danielflower&quot;&gt;@danielflower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/duke-bartholomew&quot;&gt;@duke-bartholomew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mrksngl&quot;&gt;@mrksngl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetgo&quot;&gt;@violetgo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ZzxyNn&quot;&gt;@ZzxyNn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/01/15/io_uring-0-0-3-Final.html</id>
<title>Netty/Incubator/Transport/Native/io_uring 0.0.3.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-01-15T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/01/15/io_uring-0-0-3-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-transport-io_uring 0.0.3.Final. This release is a bug-fix release, please consider upgrading as soon as possible as it also contains a workaround for an io_uring bug that could lead to a memory leak.

For more details related to this release see our bug-tracker.

For more details about this transport in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-transport-io_uring 0.0.3.Final. This release is a bug-fix release, please consider upgrading as soon as possible as it also contains a workaround for an io_uring bug that could lead to a memory leak.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-transport-io_uring/milestone/3?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this transport in general please read our &lt;a href=&quot;https://netty.io/news/2020/11/16/io_uring-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2021/01/13/4-1-58-Final.html</id>
<title>Netty 4.1.58.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-01-13T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/01/13/4-1-58-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.58.Final, which contains only one bug-fix which fixes a regression which could cause the native libs to be not loaded correctly. This regression was introduced in netty 4.1.57.Final, which was released just yesterday. Due the nature of the regression we decided we should offer another release (with a fix) ASAP.

The related issue / pr for the regression can be found in the provided links:


Revert "Ensure we only register native methods once" (#10928)
4.1.57 could not load a native library: netty_transport_native_unix_linux aarch_64/x86_64 (#10926)



Thank You

Every idea and bug-report counts and so we thought it...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.58.Final, which contains only one bug-fix which fixes a regression which could cause the native libs to be not loaded correctly. This regression was introduced in netty 4.1.57.Final, which was released just yesterday. Due the nature of the regression we decided we should offer another release (with a fix) ASAP.&lt;/p&gt;

&lt;p&gt;The related issue / pr for the regression can be found in the provided links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Revert &quot;Ensure we only register native methods once&quot; (&lt;a href=&quot;https://github.com/netty/netty/pull/10928&quot;&gt;#10928&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;4.1.57 could not load a native library: netty_transport_native_unix_linux aarch_64/x86_64 (&lt;a href=&quot;https://github.com/netty/netty/issues/10926&quot;&gt;#10926&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/matteobertozzi&quot;&gt;@matteobertozzi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/01/12/4-1-57-Final.html</id>
<title>Netty 4.1.57.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-01-12T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/01/12/4-1-57-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.57.Final. This releases is a bug-fix release.

The most important changes in this release are:


We need to ensure we always drain the error stack when a callback throws
(#10920)
Add PushPromise and Priority Frame support in Http2FrameCodec (#10765)
Improve performance of HPACK static table lookup (#10840)
MQTT codec: foolproof SUBSCRIBE QoS encoding (#10874)
Ensure we only register native methods once (#10876)



For the details and all changes, please browse our issue tracker for 4.1.57.Final.

Thank You

Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.

Please report an unintended omission.


@AkiaCode
@andsel
@chrisvest
@delegacy
@ejona86
@hyperxpro
@kachayev
@Neustradamus
@normanmaurer
@trustin
@violetagg...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.57.Final. This releases is a bug-fix release.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to ensure we always drain the error stack when a callback throws
(&lt;a href=&quot;https://github.com/netty/netty/pull/10920&quot;&gt;#10920&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add PushPromise and Priority Frame support in Http2FrameCodec (&lt;a href=&quot;https://github.com/netty/netty/pull/10765&quot;&gt;#10765&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improve performance of HPACK static table lookup (&lt;a href=&quot;https://github.com/netty/netty/pull/10840&quot;&gt;#10840&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MQTT codec: foolproof SUBSCRIBE QoS encoding (&lt;a href=&quot;https://github.com/netty/netty/pull/10874&quot;&gt;#10874&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we only register native methods once (&lt;a href=&quot;https://github.com/netty/netty/pull/10876&quot;&gt;#10876&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.57.Final&quot;&gt;4.1.57.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AkiaCode&quot;&gt;@AkiaCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/andsel&quot;&gt;@andsel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/delegacy&quot;&gt;@delegacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kachayev&quot;&gt;@kachayev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Neustradamus&quot;&gt;@Neustradamus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2021/01/11/quic-0-0-3-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.3.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2021-01-11T00:00:00+00:00</published>
<link href="http://netty.io/news/2021/01/11/quic-0-0-3-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.3.Final, which is our first release of the year :). This release is a bug-fix release, please consider upgrading as soon as possible as it also fixes a possible SEGV.

For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.3.Final, which is our first release of the year :). This release is a bug-fix release, please consider upgrading as soon as possible as it also fixes a possible SEGV.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/3?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2020/12/18/quic-0-0-2-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.2.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-12-18T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/12/18/quic-0-0-2-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty-incubator-codec-quic 0.0.2.Final. This release adds support for Unreliable Datagram Extension. Beside this it also contains a few bug-fixes related to handling AUTO_READ.

For more details related to this release see our bug-tracker.

For more details about this codec in general please read our initial announcement....
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty-incubator-codec-quic 0.0.2.Final. This release adds support for &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-datagram-01&quot;&gt;Unreliable Datagram Extension&lt;/a&gt;. Beside this it also contains a few bug-fixes related to handling &lt;code&gt;AUTO_READ&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details related to this release see our &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic/milestone/2?closed=1&quot;&gt;bug-tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details about this codec in general please read our &lt;a href=&quot;https://netty.io/news/2020/12/09/quic-0-0-1-Final.html&quot;&gt;initial announcement&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2020/12/17/4-1-56-Final.html</id>
<title>Netty 4.1.56.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-12-17T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/12/17/4-1-56-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.56.Final. This releases fixes a regression in the HttpPostMultipartRequestDecoder which was introduced in the last release that could lead to an infinite loop. If you make use of this class you should upgrade ASAP!

The most important changes in this release are:


Fix Bundle-NativeCode in MANIFEST file (#10867)
Workaround possible JDK bug in SSLEngineImpl when using TLSv1.3 that lead to multiple notifications (#10860)
Fix infinite loop decoding multipart requests  (#10855)
Ensure IovArray is usuable without sun.misc.Unsafe (#10870)
Improve logging in DnsServerAddressStreamProviders (#10848)



For the details and all changes, please browse our issue tracker for 4.1.56.Final.

Special notes

As this...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.56.Final. This releases fixes a regression in the &lt;code&gt;HttpPostMultipartRequestDecoder&lt;/code&gt; which was introduced in the last release that could lead to an infinite loop. If you make use of this class you should upgrade ASAP!&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix Bundle-NativeCode in MANIFEST file (&lt;a href=&quot;https://github.com/netty/netty/pull/10867&quot;&gt;#10867&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Workaround possible JDK bug in SSLEngineImpl when using TLSv1.3 that lead to multiple notifications (&lt;a href=&quot;https://github.com/netty/netty/pull/10860&quot;&gt;#10860&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix infinite loop decoding multipart requests  (&lt;a href=&quot;https://github.com/netty/netty/pull/10855&quot;&gt;#10855&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure IovArray is usuable without sun.misc.Unsafe (&lt;a href=&quot;https://github.com/netty/netty/pull/10870&quot;&gt;#10870&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improve logging in &lt;code&gt;DnsServerAddressStreamProviders&lt;/code&gt; (&lt;a href=&quot;https://github.com/netty/netty/pull/10848&quot;&gt;#10848&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.56.Final&quot;&gt;4.1.56.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Special notes&lt;/h1&gt;

&lt;p&gt;As this release includes a fix for a possible infinite loop it&#39;s advised to upgrade asap if you use 4.1.55.Final.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elharo&quot;&gt;@elharo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fredericBregier&quot;&gt;@fredericBregier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/henrychv&quot;&gt;@henrychv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jameskleeh&quot;&gt;@jameskleeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/imandy&quot;&gt;@imandy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/terrarier2111&quot;&gt;@terrarier2111&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/12/09/quic-0-0-1-Final.html</id>
<title>Netty/Incubator/Codec/Quic 0.0.1.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-12-09T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/12/09/quic-0-0-1-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
After a bit more than 1 month of developement we are finally ready to release our first incubator version of Netty/Incubator/Codec/Quic.

This codec provides a QUIC implementation of draft 32 by wrapping quiche and expose QUIC via the Channel API.

Incubator, what does this mean ?

To be able to work on new exciting features without "affecting" the core of netty we decided to start development of such features in the "incubator". This means these features will be developed in a seperate repository and only be merged back into the core netty repository once we feel that we can guarantee we not need...
</summary>
<content type="html">
&lt;p&gt;After a bit more than 1 month of developement we are finally ready to release our first incubator version of Netty/Incubator/Codec/Quic.&lt;/p&gt;

&lt;p&gt;This codec provides a QUIC implementation of &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-quic-transport-32&quot;&gt;draft 32&lt;/a&gt; by wrapping &lt;a href=&quot;https://github.com/cloudflare/quiche&quot;&gt;quiche&lt;/a&gt; and expose QUIC via the &lt;code&gt;Channel&lt;/code&gt; API.&lt;/p&gt;

&lt;h1&gt;Incubator, what does this mean ?&lt;/h1&gt;

&lt;p&gt;To be able to work on new exciting features without &quot;affecting&quot; the core of netty we decided to start development of such features in the &quot;incubator&quot;. This means these features will be developed in a seperate repository and only be merged back into the core netty repository once we feel that we can guarantee we not need to break the API anymore and consider these production ready. This hopefully helps to clarify expections and stability of the code and so people should be fully aware that APIs may change. Beside this it also allows to use different release schedules.&lt;/p&gt;

&lt;h1&gt;How can I use the quic codec ?&lt;/h1&gt;

&lt;p&gt;You we will need to include the right dependency for your platform. At the moment we only support either macOS x86_64 or linux x86_64. That said, this may change in the future.&lt;/p&gt;

&lt;p&gt;An example for maven / linux would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-quic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;linux-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you use macOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-codec-quic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;osx-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;How would I setup a QUIC server / client ?&lt;/h1&gt;

&lt;p&gt;Bootstrapping a QUIC server that speaks HTTP/0.9 would look like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;// We just want to support HTTP 0.9 as application protocol
byte[] proto = new byte[] {
        0x08, &#39;h&#39;, &#39;t&#39;, &#39;t&#39;, &#39;p&#39;, &#39;/&#39;, &#39;0&#39;, &#39;.&#39;, &#39;9&#39;
};

NioEventLoopGroup group = new NioEventLoopGroup(1);
ChannelHandler codec = new QuicServerCodecBuilder()
        .certificateChain(&quot;./src/test/resources/cert.crt&quot;)
        .privateKey(&quot;./src/test/resources/cert.key&quot;)
        .applicationProtocols(proto)
        .maxIdleTimeout(5000, TimeUnit.MILLISECONDS)
        // Configure some limits for the maximal number of streams (and the data) that we want to handle.
        .initialMaxData(10000000)
        .initialMaxStreamDataBidirectionalLocal(1000000)
        .initialMaxStreamDataBidirectionalRemote(1000000)
        .initialMaxStreamsBidirectional(100)
        .initialMaxStreamsUnidirectional(100)

        // Setup a token handler. In a production system you would want to implement and provide your
        // custom one.
        .tokenHandler(InsecureQuicTokenHandler.INSTANCE)
        // ChannelHandler that is added into QuicChannel pipeline.
        .handler(new ChannelInboundHandlerAdapter() {
            @Override
            public void channelActive(ChannelHandlerContext ctx) {
                QuicChannel channel = (QuicChannel) ctx.channel();
                // Create streams etc..
            }

            public void channelInactive(ChannelHandlerContext ctx) {
                ((QuicChannel) ctx.channel()).collectStats().addListener(f -&amp;gt; {
                    if (f.isSuccess()) {
                        LOGGER.info(&quot;Connection closed: {}&quot;, f.getNow());
                    }
                });
            }

            @Override
            public boolean isSharable() {
                return true;
            }
        })
        .streamHandler(new ChannelInitializer&amp;lt;QuicStreamChannel&amp;gt;() {
            @Override
            protected void initChannel(QuicStreamChannel ch)  {
                // Add a LineBasedFrameDecoder here as we just want to do some simple HTTP 0.9 handling.
                ch.pipeline().addLast(new LineBasedFrameDecoder(1024))
                        .addLast(new ChannelInboundHandlerAdapter() {
                    @Override
                    public void channelRead(ChannelHandlerContext ctx, Object msg) {
                        ByteBuf byteBuf = (ByteBuf) msg;
                        try {
                            if (byteBuf.toString(CharsetUtil.US_ASCII).trim().equals(&quot;GET /&quot;)) {
                                ByteBuf buffer = ctx.alloc().directBuffer();
                                buffer.writeCharSequence(&quot;Hello World!\r\n&quot;, CharsetUtil.US_ASCII);
                                // Write the buffer and shutdown the output by writing a FIN.
                                ctx.writeAndFlush(buffer).addListener(QuicStreamChannel.SHUTDOWN_OUTPUT);
                            }
                        } finally {
                            byteBuf.release();
                        }
                    }
                });
            }
        }).build();
try {
    Bootstrap bs = new Bootstrap();
    Channel channel = bs.group(group)
            .channel(NioDatagramChannel.class)
            .handler(codec)
            .bind(new InetSocketAddress(9999)).sync().channel();
    channel.closeFuture().sync();
} finally {
    group.shutdownGracefully();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the corespanding QUIC client like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;// We just want to support HTTP 0.9 as application protocol
byte[] proto = new byte[] {
        0x08, &#39;h&#39;, &#39;t&#39;, &#39;t&#39;, &#39;p&#39;, &#39;/&#39;, &#39;0&#39;, &#39;.&#39;, &#39;9&#39;
};

NioEventLoopGroup group = new NioEventLoopGroup(1);
try {
    ChannelHandler codec = new QuicClientCodecBuilder()
            .applicationProtocols(proto)
            .maxIdleTimeout(5000, TimeUnit.MILLISECONDS)
            .initialMaxData(10000000)
            // As we don&#39;t want to support remote initiated streams just setup the limit for
            // local initiated streams in this example.
            .initialMaxStreamDataBidirectionalLocal(1000000)
            .build();

    Bootstrap bs = new Bootstrap();
    Channel channel = bs.group(group)
            .channel(NioDatagramChannel.class)
            .handler(codec)
            .bind(0).sync().channel();

    QuicChannel quicChannel = QuicChannel.newBootstrap(channel)
            .streamHandler(new ChannelInboundHandlerAdapter() {
                @Override
                public void channelActive(ChannelHandlerContext ctx) {
                    // As we did not allow any remote initiated streams we will never see
                    // this method called. That said just let us keep it here to demonstrate
                    // that this handle would be called for each remote initiated stream.
                    ctx.close();
                }
            })
            .remoteAddress(new InetSocketAddress(NetUtil.LOCALHOST4, 9999))
            .connect()
            .get();

    QuicStreamChannel streamChannel = quicChannel.createStream(QuicStreamType.BIDIRECTIONAL,
            new ChannelInboundHandlerAdapter() {
                @Override
                public void channelRead(ChannelHandlerContext ctx, Object msg) {
                    ByteBuf byteBuf = (ByteBuf) msg;
                    System.err.println(byteBuf.toString(CharsetUtil.US_ASCII));
                    byteBuf.release();
                }

                @Override
                public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {
                    if (evt == ChannelInputShutdownReadComplete.INSTANCE) {
                        // Close the connection once the remote peer did send the FIN
                        // for this stream.
                        ((QuicChannel) ctx.channel().parent()).close(true, 0,
                                ctx.alloc().directBuffer(16)
                                        .writeBytes(new byte[]{&#39;k&#39;, &#39;t&#39;, &#39;h&#39;, &#39;x&#39;, &#39;b&#39;, &#39;y&#39;, &#39;e&#39;}));
                    }
                }
            }).sync().getNow();
    // Write the data and send the FIN. After this its not possible anymore to write any more data.
    streamChannel.writeAndFlush(Unpooled.copiedBuffer(&quot;GET /\r\n&quot;, CharsetUtil.US_ASCII))
            .addListener(QuicStreamChannel.SHUTDOWN_OUTPUT);

    // Wait for the stream channel and quic channel to be closed (this will happen after we
    // received the FIN).  After this is done we will close the underlying datagram channel.
    streamChannel.closeFuture().sync();
    quicChannel.closeFuture().sync();
    channel.close().sync();
} finally {
    group.shutdownGracefully();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Where can I find the project ?&lt;/h1&gt;

&lt;p&gt;The project itself lives on &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-quic&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;What&#39;s next ?&lt;/h1&gt;

&lt;p&gt;While we are activly working on this project itself we also already started with an &lt;a href=&quot;https://github.com/netty/netty-incubator-codec-http3&quot;&gt;HTTP3 implementation&lt;/a&gt; on top of it.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2020/12/08/4-1-55-Final.html</id>
<title>Netty 4.1.55.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-12-08T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/12/08/4-1-55-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.55.Final. This is mainly a bug-fix release.

The most important changes in this release are:


Enforce status code validation in CloseWebSocketFrame (#10846)
Use aarch_64 in a consistent way (#10845)
Initialize Recycler.INITIAL_CAPACITY before invoking InternalLogger.debug() (#10836)
Fix caching for normal allocations (#10825)
Fix NPE in ByteToMessageDecoder if the user removes the handler while channelInputClosed(...) is processing the buffer. (#10817)
IovArray should support when there is no unsafe present (#10814)
Don't use the cname cache when using DnsRecordResolveContext (#10808)
Fix native image build for the cases when io.netty.util.NetUtil is initialized at run-time (#10799)
Fix UnsafeByteBufUtil#setBytes() cause JVM crash (#10791)
Add ABORT and COMMIT STOMP...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.55.Final. This is mainly a bug-fix release.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enforce status code validation in CloseWebSocketFrame (&lt;a href=&quot;https://github.com/netty/netty/pull/10846&quot;&gt;#10846&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use aarch_64 in a consistent way (&lt;a href=&quot;https://github.com/netty/netty/pull/10845&quot;&gt;#10845&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Initialize Recycler.INITIAL_CAPACITY before invoking InternalLogger.debug() (&lt;a href=&quot;https://github.com/netty/netty/pull/10836&quot;&gt;#10836&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix caching for normal allocations (&lt;a href=&quot;https://github.com/netty/netty/pull/10825&quot;&gt;#10825&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix NPE in ByteToMessageDecoder if the user removes the handler while channelInputClosed(...) is processing the buffer. (&lt;a href=&quot;https://github.com/netty/netty/pull/10817&quot;&gt;#10817&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;IovArray should support when there is no unsafe present (&lt;a href=&quot;https://github.com/netty/netty/pull/10814&quot;&gt;#10814&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t use the cname cache when using DnsRecordResolveContext (&lt;a href=&quot;https://github.com/netty/netty/pull/10808&quot;&gt;#10808&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix native image build for the cases when io.netty.util.NetUtil is initialized at run-time (&lt;a href=&quot;https://github.com/netty/netty/pull/10799&quot;&gt;#10799&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix UnsafeByteBufUtil#setBytes() cause JVM crash (&lt;a href=&quot;https://github.com/netty/netty/pull/10791&quot;&gt;#10791&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add ABORT and COMMIT STOMP commands to the StompCommand enum (&lt;a href=&quot;https://github.com/netty/netty/pull/10790&quot;&gt;#10790&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.55.Final&quot;&gt;4.1.55.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Special notes&lt;/h1&gt;

&lt;p&gt;In this release we changed the classifer for Linux AARCH64 to &lt;code&gt;linux-arch_64&lt;/code&gt;. This is consistent with what the os maven plugin is using for the platform and so makes it easier for us and the users in general. We did the same for netty-tcnative-* as well to keep things consistent.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area.&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/adutra&quot;&gt;@adutra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ArjanSchouten&quot;&gt;@ArjanSchouten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benjaminroux&quot;&gt;@benjaminroux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Ech0Fan&quot;&gt;@Ech0Fan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fredericBregier&quot;&gt;@fredericBregier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/henrychv&quot;&gt;@henrychv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/izeye&quot;&gt;@izeye&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/martinfurmanski&quot;&gt;@martinfurmanski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/oxplay2&quot;&gt;@oxplay2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rpuch&quot;&gt;@rpuch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/XjCyan1de&quot;&gt;@XjCyan1de&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/11/16/io_uring-0-0-1-Final.html</id>
<title>Netty/Incubator/Transport/Native/io_uring 0.0.1.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-11-16T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/11/16/io_uring-0-0-1-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
After multiple months of development I am happy to announce the first incubator release of our native io_uring based transport.
If you don't know about io_uring I highly recommend getting up to speed by reading Efficient IO with io_uring and
Lord of the io_ring. To make it short, it is a new way how programs can talk to the kernel (and be notified back) via memory mapped ring-buffers. This way it is possible to almost eliminate all syscalls that are usually needed for network I/O.

Incubator, what does this mean ?

To be able to work on new exciting features without "affecting" the core...
</summary>
<content type="html">
&lt;p&gt;After multiple months of development I am happy to announce the first incubator release of our native io_uring based transport.
If you don&#39;t know about io_uring I highly recommend getting up to speed by reading &lt;a href=&quot;https://kernel.dk/io_uring.pdf&quot;&gt;Efficient IO with io_uring&lt;/a&gt; and
&lt;a href=&quot;https://unixism.net/loti/what_is_io_uring.html&quot;&gt;Lord of the io_ring&lt;/a&gt;. To make it short, it is a new way how programs can talk to the kernel (and be notified back) via memory mapped ring-buffers. This way it is possible to almost eliminate all syscalls that are usually needed for network I/O.&lt;/p&gt;

&lt;h1&gt;Incubator, what does this mean ?&lt;/h1&gt;

&lt;p&gt;To be able to work on new exciting features without &quot;affecting&quot; the core of netty we decided to start development of such features in the &quot;incubator&quot;. This means these features will be developed in a seperate repository and only be merged back into the core netty repository once we feel that we can guarantee we not need to break the API anymore and consider these production ready. This hopefully helps to clarify expections and stability of the code and so people should be fully aware that APIs may change. Beside this it also allows to use different release schedules.&lt;/p&gt;

&lt;h1&gt;How can I use the io_uring based transport?&lt;/h1&gt;

&lt;p&gt;First of you need to run on x86_64 linux and have a recent kernel. To be able to use io_uring without encountering &quot;slowdowns&quot; and &quot;bugs&quot; you need at least using &lt;a href=&quot;https://www.kernel.org&quot;&gt;Linux Kernel&lt;/a&gt; 5.9.0, any newer kernel will be fine as well. After this requirement is fullfilled it&#39;s just a matter of adding the right jar to your classpath and bootstrap using the right &lt;code&gt;EventLoopGroup&lt;/code&gt; and &lt;code&gt;Channel&lt;/code&gt; implementation.&lt;/p&gt;

&lt;p&gt;An example for maven would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty.incubator&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-incubator-transport-native-io_uring&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1.Final&amp;lt;/version&amp;gt;
    &amp;lt;classifier&amp;gt;linux-x86_64&amp;lt;/classifier&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bootstrapping a server is as easy as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;EventLoopGroup group = new IOUringEventLoopGroup();
try {
    final ChannelHandler serverHandler = ...;

    ServerBootstrap b = new ServerBootstrap();
    b.group(bossGroup, workerGroup)
     .channel(IOUringServerSocketChannel.class)
     .childHandler(new ChannelInitializer&amp;lt;SocketChannel&amp;gt;() {
        @Override
        public void initChannel(SocketChannel ch) throws Exception {
            ChannelPipeline p = ch.pipeline();
            p.addLast(serverHandler);
        }
    });

    // Start the server.
    ChannelFuture f = b.bind(PORT).sync();

    // Wait until the server socket is closed.
    f.channel().closeFuture().sync();
} finally {
    // Shut down all event loops to terminate all threads.
    group.shutdownGracefully();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same is true for the client as well, just be sure you use the correct &lt;code&gt;Channel&lt;/code&gt; and &lt;code&gt;EventLoop&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h1&gt;What features are supported at the moment ?&lt;/h1&gt;

&lt;p&gt;At the moment we support &lt;code&gt;IOUringServerChannel&lt;/code&gt;, &lt;code&gt;IOUringChannel&lt;/code&gt; and &lt;code&gt;IOUringDatagramChannel&lt;/code&gt;, which basically means TCP and UDP. One gotcha is that &lt;code&gt;FileRegion&lt;/code&gt; is currently not supported, but will be added in the future.&lt;/p&gt;

&lt;h1&gt;Where can I find the issue tracker / code etc ?&lt;/h1&gt;

&lt;p&gt;As stated before this feature is developed outside of the &quot;normal&quot; netty tree. You can find it in the &lt;a href=&quot;https://github.com/netty/netty-incubator-transport-io_uring&quot;&gt;netty-incubator-transport-io_uring&lt;/a&gt; repository.&lt;/p&gt;

&lt;h1&gt;Are there any performance numbers?&lt;/h1&gt;

&lt;p&gt;While we plan to run some more advanced and real performance benchmarks in the future what we saw so far is really promising. To give you an idea let&#39;s have a look...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;epoll&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./tcpkali  -m xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  --connect-rate=200 -c 500 -T 30 127.0.0.1:8088
Destination: [127.0.0.1]:8088
Interface lo address [127.0.0.1]:0
Using interface lo to connect to [127.0.0.1]:8088
Ramped up to 500 connections.
Total data sent:     35254.6 MiB (36967084668 bytes)
Total data received: 35725.3 MiB (37460714661 bytes)
Bandwidth per channel: 39.688⇅ Mbps (4961.0 kBps)
Aggregate bandwidth: 9987.847↓, 9856.234↑ Mbps
Packet rate estimate: 861701.3↓, 851472.0↑ (11↓, 43↑ TCP MSS/op)
Test duration: 30.005 s.

Running `target/release/echo_bench --address &#39;localhost:8088&#39; --number 500 --duration 30 --length 128`
Benchmarking: localhost:8088
500 clients, running 128 bytes, 30 sec.

Speed: 80820 request/sec, 80820 response/sec
Requests: 2424626
Responses: 2424625
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;io_uring&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./tcpkali  -m xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  --connect-rate=200 -c 500 -T 30 127.0.0.1:8081
Destination: [127.0.0.1]:8081
Interface lo address [127.0.0.1]:0
Using interface lo to connect to [127.0.0.1]:8081
Ramped up to 500 connections.
Total data sent:     74653.1 MiB (78279409944 bytes)
Total data received: 75180.9 MiB (78832885977 bytes)
Bandwidth per channel: 83.793⇅ Mbps (10474.1 kBps)
Aggregate bandwidth: 21021.980↓, 20874.387↑ Mbps
Packet rate estimate: 1932417.0↓, 1793964.8↑ (11↓, 39↑ TCP MSS/op)
Test duration: 30.0002 s.

Running `target/release/echo_bench --address &#39;localhost:8081&#39; --number 500 --duration 30 --length 128`
Benchmarking: localhost:8081
500 clients, running 128 bytes, 30 sec.

Speed: 267371 request/sec, 267370 response/sec
Requests: 8021137
Responses: 8021128
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This benchmark is basically sending data and expect the data to be echoed back. The server itself uses 1 thread to handle all of this. Please be aware this is only a quick benchmark on localhost and a &quot;real&quot; benchmark over the network with real hardware should be done to full understand the wins and gains.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Sharable
public class EchoServerHandler extends ChannelInboundHandlerAdapter {

    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) {
        ctx.write(msg);
    }

    @Override
    public void channelReadComplete(ChannelHandlerContext ctx) {
        ctx.flush();
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
        // Close the connection when an exception is raised.
        ctx.close();
    }

    @Override
    public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {
        // Ensure we are not writing to fast by stop reading if we can not flush out data fast enough.
        if (ctx.channel().isWritable()) {
            ctx.channel().config().setAutoRead(true);
        } else {
            ctx.flush();
            if (!ctx.channel().isWritable()) {
                ctx.channel().config().setAutoRead(false);
            }
        }
    }
}

// This is using io_uring
public class EchoIOUringServer {
    private static final int PORT = Integer.parseInt(System.getProperty(&quot;port&quot;, &quot;8081&quot;));

    public static void main(String []args) {
        EventLoopGroup group = new IOUringEventLoopGroup(1);
        final EchoServerHandler serverHandler = new EchoServerHandler();
        try {
            ServerBootstrap b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
                    .option(ChannelOption.SO_REUSEADDR, true)
                    .channel(IOUringServerSocketChannel.class)
                    .childHandler(new ChannelInitializer&amp;lt;SocketChannel&amp;gt;() {
                        @Override
                        public void initChannel(SocketChannel ch) throws Exception {
                            ChannelPipeline p = ch.pipeline();
                            //p.addLast(new LoggingHandler(LogLevel.INFO));
                            p.addLast(serverHandler);
                        }
                    });

            // Start the server.
            ChannelFuture f = b.bind(PORT).sync();

            // Wait until the server socket is closed.
            f.channel().closeFuture().sync();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            // Shut down all event loops to terminate all threads.
            group.shutdownGracefully();
        }
    }
}

// This is using epoll / syscalls 
public class EchoNioServer {
    private static final int PORT = Integer.parseInt(System.getProperty(&quot;port&quot;, &quot;8088&quot;));

    public static void main(String []args) {
        EventLoopGroup group = new NioEventLoopGroup(1);
        final EchoServerHandler serverHandler = new EchoServerHandler();
        try {
            ServerBootstrap b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
                    .option(ChannelOption.SO_REUSEADDR, true)
                    .channel(NioServerSocketChannel.class)
                    .childHandler(new ChannelInitializer&amp;lt;SocketChannel&amp;gt;() {
                        @Override
                        public void initChannel(SocketChannel ch) throws Exception {
                            ChannelPipeline p = ch.pipeline();
                            //p.addLast(new LoggingHandler(LogLevel.INFO));
                            p.addLast(serverHandler);
                        }
                    });

            // Start the server.
            ChannelFuture f = b.bind(PORT).sync();

            // Wait until the server socket is closed.
            f.channel().closeFuture().sync();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            // Shut down all event loops to terminate all threads.
            group.shutdownGracefully();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Big thank you to all the people that were involved so far to make this happen. A special thank you goes out to &lt;a href=&quot;https://github.com/1Jo1&quot;&gt;Josef Grieb&lt;/a&gt; who did start this project as part of &lt;a href=&quot;https://github.com/netty/netty/wiki/Google-Summer-of-Code-Ideas-2020#add-io_uring-based-transport&quot;&gt;GSOC 2020&lt;/a&gt;. Without Josef this would not have been possible in this short time-frame. Beside Josef I would also like to say &quot;thank you&quot; to &lt;a href=&quot;https://github.com/axboe&quot;&gt;Jens Axboe&lt;/a&gt;, whom is the main author of io_uring. Whenever we had questions or problems he was happy to help. That&#39;s what OSS is really about. OSS FTW!.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2020/11/11/4-1-54-Final.html</id>
<title>Netty 4.1.54.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-11-11T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/11/11/4-1-54-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.54.Final. This is mainly a bug-fix release.

The most important changes in this release are:


Use special exception when failing because the SSLEngine was closed (#10783)
codec-http2: Correct last-stream-id for HEADERS-triggered connection error (#10775)
Drop unknown frames on connection stream (#10771)
Avoid auto boxing in PoolChunk#removeAvailRun (#10769)
Add reflection config for JMX runtime (#10753)
Fix explicitly little-endian accessors in SwappedByteBuf (#10747)
Rethrow NoSuchMethodError with more hints about incompatible native library versions (#10740)
MQTT5: support multiple Subscription ID properties (#10734)
Unregister all previous registered native methods if loading of native lib fails (#10719)
Add NULL checks to fix possible undefined behaviour (#10718)
DatagramDnsResponseDecoder should...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.54.Final. This is mainly a bug-fix release.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use special exception when failing because the SSLEngine was closed (&lt;a href=&quot;https://github.com/netty/netty/pull/10783&quot;&gt;#10783&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;codec-http2: Correct last-stream-id for HEADERS-triggered connection error (&lt;a href=&quot;https://github.com/netty/netty/pull/10775&quot;&gt;#10775&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Drop unknown frames on connection stream (&lt;a href=&quot;https://github.com/netty/netty/pull/10771&quot;&gt;#10771&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Avoid auto boxing in PoolChunk#removeAvailRun (&lt;a href=&quot;https://github.com/netty/netty/pull/10769&quot;&gt;#10769&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add reflection config for JMX runtime (&lt;a href=&quot;https://github.com/netty/netty/pull/10753&quot;&gt;#10753&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix explicitly little-endian accessors in SwappedByteBuf (&lt;a href=&quot;https://github.com/netty/netty/pull/10747&quot;&gt;#10747&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Rethrow NoSuchMethodError with more hints about incompatible native library versions (&lt;a href=&quot;https://github.com/netty/netty/pull/10740&quot;&gt;#10740&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MQTT5: support multiple Subscription ID properties (&lt;a href=&quot;https://github.com/netty/netty/pull/10734&quot;&gt;#10734&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Unregister all previous registered native methods if loading of native lib fails (&lt;a href=&quot;https://github.com/netty/netty/pull/10719&quot;&gt;#10719&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add NULL checks to fix possible undefined behaviour (&lt;a href=&quot;https://github.com/netty/netty/pull/10718&quot;&gt;#10718&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DatagramDnsResponseDecoder should rethrow as CorruptedFrameException (&lt;a href=&quot;https://github.com/netty/netty/pull/10714&quot;&gt;#10714&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Minor performance improvement in websocket upgrade (&lt;a href=&quot;https://github.com/netty/netty/pull/10710&quot;&gt;#10710&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We should have a special config that allows to configure half closure for DuplexChannel (&lt;a href=&quot;https://github.com/netty/netty/pull/10701&quot;&gt;#10701&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow EventLoops to rethrow Error (&lt;a href=&quot;https://github.com/netty/netty/pull/10694&quot;&gt;#10694&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we don&#39;t leak the ClassLoader in the backtrace (&lt;a href=&quot;https://github.com/netty/netty/pull/10691&quot;&gt;#10691&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Better hash algorithm in FingerprintTrustManagerFactory (&lt;a href=&quot;https://github.com/netty/netty/pull/10683&quot;&gt;#10683&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix #10614 by making UnorderedTPEExecutor.scheduleAtFixedRate run tasks more than once (&lt;a href=&quot;https://github.com/netty/netty/pull/10659&quot;&gt;#10659&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Provide new client and server websocket handshake exceptions (&lt;a href=&quot;https://github.com/netty/netty/pull/10646&quot;&gt;#10646&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enable HTTP header validation in HttpServerUpgradeHandler (&lt;a href=&quot;https://github.com/netty/netty/pull/10643&quot;&gt;#10643&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix native image build on modern GraalVM versions for the cases when the program uses netty-dns (&lt;a href=&quot;https://github.com/netty/netty/pull/10630&quot;&gt;#10630&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.54.Final&quot;&gt;4.1.54.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. What makes me really proud and happy is that amount of new &quot;first-time contributors&quot; in this release. We &amp;lt;3 all of you :)&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artgon&quot;&gt;@artgon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aspcompiler&quot;&gt;@aspcompiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artem-smotrakov&quot;&gt;@artem-smotrakov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dsyer&quot;&gt;@dsyer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/greenjustin&quot;&gt;@greenjustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/matteobertozzi&quot;&gt;@matteobertozzi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paul-lysak&quot;&gt;@paul-lysak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rpuch&quot;&gt;@rpuch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stuartwdouglas&quot;&gt;@stuartwdouglas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yuzawa-san&quot;&gt;@yuzawa-san&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/10/13/4-1-53-Final.html</id>
<title>Netty 4.1.53.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-10-13T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/10/13/4-1-53-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.53.Final. This is mainly a bug-fix release but also fixes some regressions that may effect you.

The most important changes in this release are:


Fix regression when trying to bind an EpollDatagramChannel with port only (#10552)
Fix NPE with MqttUnsubAckMessage - regression of MQTT5 support (#10557)
Fix DeleteOnExitHook cause memory leak (#10560)
Not truncate MQTT SUBACK reason codes (#10584)
Only create ConnectTimeoutException if really needed (#10595)
Correctly report back when we fail to select the key material and ensure we wrap(...) until everything was produced (#10610)
Only set the keymaterial once and correctly handle errors during keymaterial setting on...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.53.Final. This is mainly a bug-fix release but also fixes some regressions that may effect you.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix regression when trying to bind an EpollDatagramChannel with port only (&lt;a href=&quot;https://github.com/netty/netty/pull/10552&quot;&gt;#10552&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix NPE with MqttUnsubAckMessage - regression of MQTT5 support (&lt;a href=&quot;https://github.com/netty/netty/pull/10557&quot;&gt;#10557&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix DeleteOnExitHook cause memory leak (&lt;a href=&quot;https://github.com/netty/netty/pull/10560&quot;&gt;#10560&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Not truncate MQTT SUBACK reason codes (&lt;a href=&quot;https://github.com/netty/netty/pull/10584&quot;&gt;#10584&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only create ConnectTimeoutException if really needed (&lt;a href=&quot;https://github.com/netty/netty/pull/10595&quot;&gt;#10595&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly report back when we fail to select the key material and ensure we wrap(...) until everything was produced (&lt;a href=&quot;https://github.com/netty/netty/pull/10610&quot;&gt;#10610&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only set the keymaterial once and correctly handle errors during keymaterial setting on the client-side as well (&lt;a href=&quot;https://github.com/netty/netty/pull/10613&quot;&gt;#10613&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Avoid integer overflow in ByteBuf.ensureWritable (&lt;a href=&quot;https://github.com/netty/netty/pull/10648&quot;&gt;#10648&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.53.Final&quot;&gt;4.1.53.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. What makes me really proud and happy is that amount of new &quot;first-time contributors&quot; in this release. We &amp;lt;3 all of you :)&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artem-smotrakov&quot;&gt;@artem-smotrakov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/divijvaidya&quot;&gt;@divijvaidya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ffiredom&quot;&gt;@ffiredom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mkavanagh&quot;&gt;@mkavanagh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paul-lysak&quot;&gt;@paul-lysak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wuxiansen&quot;&gt;@wuxiansen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yosfik&quot;&gt;@yosfik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/09/08/4-1-52-Final.html</id>
<title>Netty 4.1.52.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-09-08T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/09/08/4-1-52-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.52.Final. This is mainly a bug-fix release but also contains some new features like MQTT 5.0 support.

The most important changes in this release are:


Fix ByteBufUtil.getBytes() incorrectly sharing the array in some cases (#10529)
Create a stackless ClosedChannelException to reduce overhead when the Channel is closed (#10523)
Use all configured nameservers when using DnsNameResolver in all cases (#10503)
Expose a LoggingDnsQueryLifeCycleObserverFactory (#10490)
Binary search based IpSubnetFilter (#10492)
Include TLSv1.3 ciphers as recommented ciphers for HTTP2 (#10480)
Correctly limit queries done to resolve unresolved nameservers (#10478)
Add whitelist entry to BlockHound config to workaround issue when TLS1.3 is enabled and...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.52.Final. This is mainly a bug-fix release but also contains some new features like MQTT 5.0 support.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix ByteBufUtil.getBytes() incorrectly sharing the array in some cases (&lt;a href=&quot;https://github.com/netty/netty/pull/10529&quot;&gt;#10529&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Create a stackless ClosedChannelException to reduce overhead when the Channel is closed (&lt;a href=&quot;https://github.com/netty/netty/pull/10523&quot;&gt;#10523&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use all configured nameservers when using DnsNameResolver in all cases (&lt;a href=&quot;https://github.com/netty/netty/pull/10503&quot;&gt;#10503&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Expose a LoggingDnsQueryLifeCycleObserverFactory (&lt;a href=&quot;https://github.com/netty/netty/pull/10490&quot;&gt;#10490&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Binary search based IpSubnetFilter (&lt;a href=&quot;https://github.com/netty/netty/pull/10492&quot;&gt;#10492&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Include TLSv1.3 ciphers as recommented ciphers for HTTP2 (&lt;a href=&quot;https://github.com/netty/netty/pull/10480&quot;&gt;#10480&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly limit queries done to resolve unresolved nameservers (&lt;a href=&quot;https://github.com/netty/netty/pull/10478&quot;&gt;#10478&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add whitelist entry to BlockHound config to workaround issue when TLS1.3 is enabled and the SslProvider.JDK is used (&lt;a href=&quot;https://github.com/netty/netty/pull/10459&quot;&gt;#10459&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enable TLS1.3 by default of JDK SSLEngine implementation does by default (&lt;a href=&quot;https://github.com/netty/netty/pull/10451&quot;&gt;#10451&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix DnsNameResolver may have LEAK ByteBuf after cancelling the returned future (&lt;a href=&quot;https://github.com/netty/netty/pull/10448&quot;&gt;#10448&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Making AES_128_GCM_SHA256 have a higher priority over CHACHA20_POLY1305_SHA256 on HTTP2 (&lt;a href=&quot;https://github.com/netty/netty/pull/10418&quot;&gt;#10418&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enable SSL_MODE_ENABLE_FALSE_START if jdkCompatibilityMode is false (&lt;a href=&quot;https://github.com/netty/netty/pull/10407&quot;&gt;#10407&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reduce memory fragmentation caused by PooledByteBufAllocator (&lt;a href=&quot;https://github.com/netty/netty/pull/10267&quot;&gt;#10267&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MQTT5 support for netty-codec-mqtt (&lt;a href=&quot;https://github.com/netty/netty/pull/10483&quot;&gt;#10483&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.52.Final&quot;&gt;4.1.52.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. What makes me really proud and happy is that amount of new &quot;first-time contributors&quot; in this release. We &amp;lt;3 all of you :)&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/benjaminp&quot;&gt;@benjaminp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisvest&quot;&gt;@chrisvest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CremboC&quot;&gt;@CremboC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/danielflower&quot;&gt;@danielflower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/daschl&quot;&gt;@daschl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fanshanhong&quot;&gt;@fanshanhong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Gene1994&quot;&gt;@Gene1994&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/grahamedgecombe&quot;&gt;@grahamedgecombe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kireet&quot;&gt;@kireet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kojilin&quot;&gt;@kojilin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mostroverkhov&quot;&gt;@mostroverkhov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paul-lysak&quot;&gt;@paul-lysak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/qerub&quot;&gt;@qerub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/quaff&quot;&gt;@quaff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rpuch&quot;&gt;@rpuch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seedeed&quot;&gt;@seedeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/skyguard1&quot;&gt;@skyguard1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/veblush&quot;&gt;@veblush&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wuxiansen&quot;&gt;@wuxiansen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yuanrw&quot;&gt;@yuanrw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/07/09/4-1-51-Final.html</id>
<title>Netty 4.1.51.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-07-09T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/07/09/4-1-51-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.51.Final which took a bit longer then expected. That said it's out now and we hope you will enjoy it :)
This is mainly a bug-fix release but also contain a few other goodies. Also this release firstly supports AARCH64 for the native epoll transport!

The most important changes in this release are:


Modify OpenSSL native library loading to accommodate GraalVM (#10395)
Correctly include TLS1.3 ciphers in the enabled ciphersuites when using BoringSSL (#10388)
X509TrustManager with OPENSSL provider is not wrapped with hostname verification if Conscrypt is inserted in the first place (#10375)
Ensure we preserve the...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.51.Final which took a bit longer then expected. That said it&#39;s out now and we hope you will enjoy it :)
This is mainly a bug-fix release but also contain a few other goodies. Also this release firstly supports AARCH64 for the native epoll transport!&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify OpenSSL native library loading to accommodate GraalVM (&lt;a href=&quot;https://github.com/netty/netty/pull/10395&quot;&gt;#10395&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly include TLS1.3 ciphers in the enabled ciphersuites when using BoringSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/10388&quot;&gt;#10388&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;X509TrustManager with OPENSSL provider is not wrapped with hostname verification if Conscrypt is inserted in the first place (&lt;a href=&quot;https://github.com/netty/netty/pull/10375&quot;&gt;#10375&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we preserve the original cause of the SSLException in all cases when the native SSLEngine is used (&lt;a href=&quot;https://github.com/netty/netty/pull/10372&quot;&gt;#10372&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix memory leak in AbstractDiskHttpData when CompositeByteBuf is used (&lt;a href=&quot;https://github.com/netty/netty/pull/10360&quot;&gt;#10360&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix possible StackOverflowError when try to resolve authorative nameservers (&lt;a href=&quot;https://github.com/netty/netty/pull/10337&quot;&gt;#10337&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SslHandler#wrap to preserve exception if SSLEngine is closed (&lt;a href=&quot;https://github.com/netty/netty/pull/10327&quot;&gt;#10327&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;More values other than chunked defined in Transfer-Encoding header leads to decode failure (&lt;a href=&quot;https://github.com/netty/netty/pull/10321&quot;&gt;#10321&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We should fail fast when a CNAME loop is detected (&lt;a href=&quot;https://github.com/netty/netty/pull/10305&quot;&gt;#10305&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Dequeue all cached messages and destroy the queue instance after removing the FlowControlHandler from channel pipeline (&lt;a href=&quot;https://github.com/netty/netty/pull/10304&quot;&gt;#10304&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Check if SSL pointer was freed before using it in ReferenceCountedOpenSslEngine in all cases (&lt;a href=&quot;https://github.com/netty/netty/pull/10299&quot;&gt;#10299&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Guard against re-entrancy issues while draining AbstractCoalescingBufferQueue (&lt;a href=&quot;https://github.com/netty/netty/pull/10294&quot;&gt;#10294&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix regression in HttpPostStandardRequestDecoder to always decode + to whitespace (&lt;a href=&quot;https://github.com/netty/netty/pull/10285&quot;&gt;#10285&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to have the session tickets automatically managed by the native library (&lt;a href=&quot;https://github.com/netty/netty/pull/10280&quot;&gt;#10280&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.51.Final&quot;&gt;4.1.51.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. What makes me really proud and happy is that amount of new &quot;first-time contributors&quot; in this release. We &amp;lt;3 all of you :)&lt;/p&gt;

&lt;p&gt;Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/1Jo1&quot;&gt;@1Jo1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bennett-Lynch&quot;&gt;@Bennett-Lynch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dzou&quot;&gt;@dzou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Entea&quot;&gt;@Entea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fabienrenaud&quot;&gt;@fabienrenaud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gaol&quot;&gt;@gaol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kareemadel&quot;&gt;@kareemadel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kireet&quot;&gt;@kireet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/leeyazhou&quot;&gt;@leeyazhou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/louxiu&quot;&gt;@louxiu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/prgitpr&quot;&gt;@prgitpr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sanjaypujare&quot;&gt;@sanjaypujare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seedeed&quot;&gt;@seedeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/skyguard1&quot;&gt;@skyguard1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/VLoye&quot;&gt;@VLoye&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/voidzcy&quot;&gt;@voidzcy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiaozaiyuji&quot;&gt;@xiaozaiyuji&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/05/13/4-1-50-Final.html</id>
<title>Netty 4.1.50.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-05-13T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/05/13/4-1-50-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.50.Final after a bit more then one month of work. This is mainly a bug-fix release but also contain a few other goodies. Also this release firstly supports AARCH64 for the native epoll transport!

The most important changes in this release are:


OpenSslSession.getLocalCertificates() and getLocalPrincipal() must return null on client side if mTLS is not used (#10275)
Select correct nameserver for CNAME (#10272)
Fix date format in headers to use 2-digit day of month as per RFC 2616 (#10259)
Add GlobalEventExecutor#addTask to BlockHound exceptions (#10262)
Add option to configure recycler delayed queue drop ratio (#10255)
Use io.netty.recycler.ratio directly...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.50.Final after a bit more then one month of work. This is mainly a bug-fix release but also contain a few other goodies. Also this release firstly supports AARCH64 for the native epoll transport!&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenSslSession.getLocalCertificates() and getLocalPrincipal() must return null on client side if mTLS is not used (&lt;a href=&quot;https://github.com/netty/netty/pull/10275&quot;&gt;#10275&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Select correct nameserver for CNAME (&lt;a href=&quot;https://github.com/netty/netty/pull/10272&quot;&gt;#10272&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix date format in headers to use 2-digit day of month as per RFC 2616 (&lt;a href=&quot;https://github.com/netty/netty/pull/10259&quot;&gt;#10259&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add GlobalEventExecutor#addTask to BlockHound exceptions (&lt;a href=&quot;https://github.com/netty/netty/pull/10262&quot;&gt;#10262&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add option to configure recycler delayed queue drop ratio (&lt;a href=&quot;https://github.com/netty/netty/pull/10255&quot;&gt;#10255&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;io.netty.recycler.ratio&lt;/code&gt; directly (&lt;a href=&quot;https://github.com/netty/netty/pull/10253&quot;&gt;#10253&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t reuse ChannelPromise in WebSocketProtocolHandler (&lt;a href=&quot;https://github.com/netty/netty/pull/10248&quot;&gt;#10248&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle WrappedCompositeByteBufs in addFlattenedComponents() (&lt;a href=&quot;https://github.com/netty/netty/pull/10247&quot;&gt;#10247&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix memory leak in HttpPostMultipartRequestDecoder (&lt;a href=&quot;https://github.com/netty/netty/pull/10227&quot;&gt;#10227&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Detect CNAME loops in the CNAME cache while trying to resolve (&lt;a href=&quot;https://github.com/netty/netty/pull/10221&quot;&gt;#10221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Dns resolver: honor resolv.conf timeout, rotate and attempts options (&lt;a href=&quot;https://github.com/netty/netty/pull/10207&quot;&gt;#10207&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add check for DefaultFileRegion to calculate size of msg in AbstractTrafficShapingHandler (&lt;a href=&quot;https://github.com/netty/netty/pull/10215&quot;&gt;#10215&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP2: Guard against multiple ctx.close(...) calls with the same ChannelPromise (&lt;a href=&quot;https://github.com/netty/netty/pull/10201&quot;&gt;#10201&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add epoll aarch64 maven config and Dockerfile (&lt;a href=&quot;https://github.com/netty/netty/pull/9804&quot;&gt;#9804&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.50.Final&quot;&gt;4.1.50.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fabienrenaud&quot;&gt;@fabienrenaud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dineshjoshi&quot;&gt;@dineshjoshi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/igor-lukyanov&quot;&gt;@igor-lukyanov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/louxiu&quot;&gt;@louxiu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pbetkier&quot;&gt;@pbetkier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/PIYUSHgoyal16&quot;&gt;@PIYUSHgoyal16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rdicroce&quot;&gt;@rdicroce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rhenwood-arm&quot;&gt;@rhenwood-arm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rpnguyen&quot;&gt;@rpnguyen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sarankk&quot;&gt;@sarankk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seedeed&quot;&gt;@seedeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/timandy&quot;&gt;@timandy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wangxiyuan&quot;&gt;@wangxiyuan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/04/22/4-1-49-Final.html</id>
<title>Netty 4.1.49.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-04-22T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/04/22/4-1-49-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.49.Final after a bit more then one month of work. This is mainly a bug-fix release but also contain a few other goodies.

The most important changes in this release are:


Ensure we support ALPN when using java 8u251 (#10196)
Guard against overflow when calling CompositeByteBuf.addComponent(...) (#10197)
Correctly propagate exceptions from inbound operations in all cases (#10176)
Add support for HAProxyMessageEncoder (#10175)
Add workaround for possible classloader deadlock when trying to load JNI code (#10190)
Efficient BytBuf search algorithms (#9955)
Allow Conscrypt to be used on Android (#10182)
Stop sending DNS queries if promise is cancelled (#10171)
Set IPV4_ONLY as default...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.49.Final after a bit more then one month of work. This is mainly a bug-fix release but also contain a few other goodies.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensure we support ALPN when using java 8u251 (&lt;a href=&quot;https://github.com/netty/netty/pull/10196&quot;&gt;#10196&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Guard against overflow when calling CompositeByteBuf.addComponent(...) (&lt;a href=&quot;https://github.com/netty/netty/pull/10197&quot;&gt;#10197&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly propagate exceptions from inbound operations in all cases (&lt;a href=&quot;https://github.com/netty/netty/pull/10176&quot;&gt;#10176&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for HAProxyMessageEncoder (&lt;a href=&quot;https://github.com/netty/netty/pull/10175&quot;&gt;#10175&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add workaround for possible classloader deadlock when trying to load JNI code (&lt;a href=&quot;https://github.com/netty/netty/pull/10190&quot;&gt;#10190&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Efficient BytBuf search algorithms (&lt;a href=&quot;https://github.com/netty/netty/pull/9955&quot;&gt;#9955&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow Conscrypt to be used on Android (&lt;a href=&quot;https://github.com/netty/netty/pull/10182&quot;&gt;#10182&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Stop sending DNS queries if promise is cancelled (&lt;a href=&quot;https://github.com/netty/netty/pull/10171&quot;&gt;#10171&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Set IPV4_ONLY as default when NIC has only local IPv6 addresses (&lt;a href=&quot;https://github.com/netty/netty/pull/10170&quot;&gt;#10170&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SslHandler should fail handshake / close promise and notify pipeline on removal (&lt;a href=&quot;https://github.com/netty/netty/pull/10161&quot;&gt;#10161&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Replace usage() with freeBytes() in thresholds within hot paths of PoolChunkList (&lt;a href=&quot;https://github.com/netty/netty/pull/10141&quot;&gt;#10141&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Introduce DomainWildcardMappingBuilder to fix wildcard matching according to RFC6125 (&lt;a href=&quot;https://github.com/netty/netty/pull/10132&quot;&gt;#10132&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t produce multiple calls to exceptionCaught(...) on SSL handshake failure (&lt;a href=&quot;https://github.com/netty/netty/pull/10134&quot;&gt;#10134&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update to netty-tcnative 2.0.30.Final to fix small memory leak (&lt;a href=&quot;https://github.com/netty/netty/pull/10118&quot;&gt;#10118&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.49.Final&quot;&gt;4.1.49.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/asanglard&quot;&gt;@asanglard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BenD10&quot;&gt;@BenD10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carryxyh&quot;&gt;@carryxyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GeXin666&quot;&gt;@GeXin666&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hecenjie&quot;&gt;@hecenjie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jrhee17&quot;&gt;@jrhee17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gnarea&quot;&gt;@gnarea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lidavidm&quot;&gt;@lidavidm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/linasm&quot;&gt;@linasm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/luffyke&quot;&gt;@luffyke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/minwoox&quot;&gt;@minwoox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/netudima&quot;&gt;@netudima&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Neustradamus&quot;&gt;@Neustradamus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rmannibucau&quot;&gt;@rmannibucau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sdsantos&quot;&gt;@sdsantos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seedeed&quot;&gt;@seedeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/szegedi&quot;&gt;@szegedi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vitaliy-kuzmich&quot;&gt;@vitaliy-kuzmich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xxDark&quot;&gt;@xxDark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/03/17/4-1-48-Final.html</id>
<title>Netty 4.1.48.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-03-17T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/03/17/4-1-48-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.48.Final shortly after our last release. We decided to release this fast to be able to provide support for SameSite as fast as possible as more and more browsers are depending on it and also to ensure HttpObjectDecoder will limit the number of control-chars prior to parsing the initial line. If you use the HTTP/1.x codec of Netty please upgrade as soon as possible.

The most important changes in this release are:


HttpObjectDecoder should limit the number of control chars (#10112)
Close SocketChannel upon exceptions to avoid leaking (#10110)
Ensure WebSocket*Handshaker can not corrupt pipeline...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.48.Final shortly after our last release. We decided to release this fast to be able to provide support for &lt;code&gt;SameSite&lt;/code&gt; as fast as possible as more and more browsers are depending on it and also to ensure &lt;code&gt;HttpObjectDecoder&lt;/code&gt; will limit the number of control-chars prior to parsing the initial line. If you use the HTTP/1.x codec of Netty please upgrade as soon as possible.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HttpObjectDecoder should limit the number of control chars (&lt;a href=&quot;https://github.com/netty/netty/pull/10112&quot;&gt;#10112&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Close SocketChannel upon exceptions to avoid leaking (&lt;a href=&quot;https://github.com/netty/netty/pull/10110&quot;&gt;#10110&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure WebSocket*Handshaker can not corrupt pipeline when HttpProxyHandler is used (&lt;a href=&quot;https://github.com/netty/netty/pull/10103&quot;&gt;#10103&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix WebSocketClientHandshaker not generating correct handshake request when path is empty (&lt;a href=&quot;https://github.com/netty/netty/pull/10095&quot;&gt;#10095&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added support for the SameSite attribute in Cookies (&lt;a href=&quot;https://github.com/netty/netty/pull/10050&quot;&gt;#10050&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.48.Final&quot;&gt;4.1.48.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Details&lt;/h2&gt;

&lt;h3&gt;SameSite attribute&lt;/h3&gt;

&lt;p&gt;As we are not able to break APIs until we release a new major version we couldn&#39;t add support for &lt;code&gt;SameSite&lt;/code&gt; attribute to the &lt;code&gt;Cookie&lt;/code&gt; interface itself and so you can only set it on &lt;code&gt;DefaultCookie&lt;/code&gt; itself.&lt;/p&gt;

&lt;p&gt;For more details on what this is all about please have a look at the &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05#section-5.3.7&quot;&gt;related RFC section&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alunny&quot;&gt;@alunny&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/blindpirate&quot;&gt;@blindpirate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/caillette&quot;&gt;@caillette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dvlato&quot;&gt;@dvlato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seedeed&quot;&gt;@seedeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/03/09/4-1-47-Final.html</id>
<title>Netty 4.1.47.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-03-09T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/03/09/4-1-47-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.47.Final, just 1,5 weeks after our last release. This releases fixes an issue which could cause WINDOW_UPDATE_FRAMEs to be not flushed and so stale an HTTP/2 stream. This bug was serious enough that we decided we should do a followup release ASAP.

The most important changes in this release are:


Make sure we always flush window update frames in AbstractHttp2StreamChannel (#10075)
Use MacOSDnsServerAddressStreamProvider when on the classpath and we are running on MacOS (#10079)
Fix AssertionError in ScheduledFutureTask (#10073)
Preserve order when using alternate event loops (#10069)



For the details and all changes, please browse our issue...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.47.Final, just 1,5 weeks after our last release. This releases fixes an issue which could cause WINDOW_UPDATE_FRAMEs to be not flushed and so stale an HTTP/2 stream. This bug was serious enough that we decided we should do a followup release ASAP.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure we always flush window update frames in AbstractHttp2StreamChannel (&lt;a href=&quot;https://github.com/netty/netty/pull/10075&quot;&gt;#10075&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use MacOSDnsServerAddressStreamProvider when on the classpath and we are running on MacOS (&lt;a href=&quot;https://github.com/netty/netty/pull/10079&quot;&gt;#10079&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix AssertionError in ScheduledFutureTask (&lt;a href=&quot;https://github.com/netty/netty/pull/10073&quot;&gt;#10073&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Preserve order when using alternate event loops (&lt;a href=&quot;https://github.com/netty/netty/pull/10069&quot;&gt;#10069&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/issues?q=milestone%3A4.1.47.Final+is%3Aclosed&quot;&gt;4.1.47.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/atcurtis&quot;&gt;@atcurtis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/djelinski&quot;&gt;@djelinski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/parkcheolu&quot;&gt;@parkcheolu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seedeed&quot;&gt;@seedeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TristanPerry&quot;&gt;@TristanPerry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zlm0125&quot;&gt;@zlm0125&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/02/28/4-1-46-Final.html</id>
<title>Netty 4.1.46.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-02-28T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/02/28/4-1-46-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.46.Final, our second release of 2020. This is mostly a bug-fix release but also include a few new functionalities.

For more details please read-on.

The most important changes in this release are:


Fix snappy crc32c checksum (#10048)
Add SslHandshakeTimeoutException and use it for handshake timeouts (#10062)
Correctly calculate the produced bytes in all cases when calling ReferenceCountedOpenSslEngine.wrap(...) (#10063)
More strict parsing of initial line / http headers (#10058)
Correctly handle lifecycle of clientHello ByteBuf in SslClientHelloHandler (#10030)
HTTP/2 child channel may discard flush when done from an arbitrary thread (#10019)
Remove "Content-Length" when decoding HTTP/1.1 message with both "Transfer-Encoding: chunked"...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.46.Final, our second release of 2020. This is mostly a bug-fix release but also include a few new functionalities.&lt;/p&gt;

&lt;p&gt;For more details please read-on.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix snappy crc32c checksum (&lt;a href=&quot;https://github.com/netty/netty/pull/10048&quot;&gt;#10048&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add SslHandshakeTimeoutException and use it for handshake timeouts (&lt;a href=&quot;https://github.com/netty/netty/pull/10062&quot;&gt;#10062&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly calculate the produced bytes in all cases when calling ReferenceCountedOpenSslEngine.wrap(...) (&lt;a href=&quot;https://github.com/netty/netty/pull/10063&quot;&gt;#10063&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;More strict parsing of initial line / http headers (&lt;a href=&quot;https://github.com/netty/netty/pull/10058&quot;&gt;#10058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle lifecycle of clientHello ByteBuf in SslClientHelloHandler (&lt;a href=&quot;https://github.com/netty/netty/pull/10030&quot;&gt;#10030&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP/2 child channel may discard flush when done from an arbitrary thread (&lt;a href=&quot;https://github.com/netty/netty/pull/10019&quot;&gt;#10019&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove &quot;Content-Length&quot; when decoding HTTP/1.1 message with both &quot;Transfer-Encoding: chunked&quot; and &quot;Content-Length&quot; (&lt;a href=&quot;https://github.com/netty/netty/pull/10003&quot;&gt;#10003&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DefaultHttp2ConnectionDecoder notifies frame listener before connection of GOAWAYs (&lt;a href=&quot;https://github.com/netty/netty/pull/10009&quot;&gt;#10009&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure ChannelOptions are applied in the same order as configured in *Bootstrap (&lt;a href=&quot;https://github.com/netty/netty/pull/9998&quot;&gt;#9998&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Copy IPV6-mapped-IPV4 addresses correctly in native code (&lt;a href=&quot;https://github.com/netty/netty/pull/9996&quot;&gt;#9996&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add SslClientHelloHandler which allows to do something based on the SSL ClientHello (&lt;a href=&quot;https://github.com/netty/netty/pull/9827&quot;&gt;#9827&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SslHandler.wrap(...) must ensure it not loose the original exception when finishWrap(...) fails (&lt;a href=&quot;https://github.com/netty/netty/pull/9974&quot;&gt;#9974&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add ResolveAddressHandler which can be used to resolve addresses on the fly (&lt;a href=&quot;https://github.com/netty/netty/pull/9947&quot;&gt;#9947&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/221?closed=1&quot;&gt;4.1.46.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/andyxning&quot;&gt;@andyxning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/asalamon74&quot;&gt;@asalamon74&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/atcurtis&quot;&gt;@atcurtis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artem-smotrakov&quot;&gt;@artem-smotrakov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bennett-Lynch&quot;&gt;@Bennett-Lynch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bergerst&quot;&gt;@bergerst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carryxyh&quot;&gt;@carryxyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyeonisism&quot;&gt;@hyeonisism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ilopmar&quot;&gt;@ilopmar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jchambers&quot;&gt;@jchambers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kbeckmann&quot;&gt;@kbeckmann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kyze8439690&quot;&gt;@kyze8439690&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LinShunKang&quot;&gt;@LinShunKang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nitsanw&quot;&gt;@nitsanw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rdicroce&quot;&gt;@rdicroce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seedeed&quot;&gt;@seedeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spencergibb&quot;&gt;@spencergibb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/subbarao&quot;&gt;@subbarao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vitalybuka&quot;&gt;@vitalybuka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yuanrw&quot;&gt;@yuanrw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2020/01/13/4-1-45-Final.html</id>
<title>Netty 4.1.45.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2020-01-13T00:00:00+00:00</published>
<link href="http://netty.io/news/2020/01/13/4-1-45-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.45.Final, our first release of 2020. This is a bug-fix release which also fixes two regressions. Please upgrade as soon as possible.

For more details please read-on.

The most important changes in this release are:


Fix BufferOverflowException during non-Unsafe PooledDirectByteBuf resize (#9912)
FlushConsolidationHandler may suppress flushes by mistake (#9931)
Utf8FrameValidator must release buffer when validation fails (#9909)
Avoid possible comparison contract violation (#9883)
Ignore inline comments when parsing nameservers (#9894)



For the details and all changes, please browse our issue tracker for 4.1.45.Final.

Thank You

Every idea and bug-report counts and so we thought it is worth mentioning those who helped...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.45.Final, our first release of 2020. This is a bug-fix release which also fixes two regressions. Please upgrade as soon as possible.&lt;/p&gt;

&lt;p&gt;For more details please read-on.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix BufferOverflowException during non-Unsafe PooledDirectByteBuf resize (&lt;a href=&quot;https://github.com/netty/netty/pull/9912&quot;&gt;#9912&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;FlushConsolidationHandler may suppress flushes by mistake (&lt;a href=&quot;https://github.com/netty/netty/pull/9931&quot;&gt;#9931&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Utf8FrameValidator must release buffer when validation fails (&lt;a href=&quot;https://github.com/netty/netty/pull/9909&quot;&gt;#9909&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Avoid possible comparison contract violation (&lt;a href=&quot;https://github.com/netty/netty/pull/9883&quot;&gt;#9883&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ignore inline comments when parsing nameservers (&lt;a href=&quot;https://github.com/netty/netty/pull/9894&quot;&gt;#9894&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/219?closed=1&quot;&gt;4.1.45.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/anuraaga&quot;&gt;@anuraaga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bishwenduk029&quot;&gt;@bishwenduk029&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carryxyh&quot;&gt;@carryxyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cilki&quot;&gt;@cilki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Delorien84&quot;&gt;@Delorien84&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/denyska&quot;&gt;@denyska&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gerdriesselmann&quot;&gt;@gerdriesselmann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gilgamesjh&quot;&gt;@gilgamesjh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hyperxpro&quot;&gt;@hyperxpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ikhoon&quot;&gt;@ikhoon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kamma-cc&quot;&gt;@kamma-cc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ursaj&quot;&gt;@ursaj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2019/12/18/4-1-44-Final.html</id>
<title>Netty 4.1.44.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-12-18T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/12/18/4-1-44-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.44.Final after almost 2 months of work. This is a bug-fix release which fixes some critical issues. Please upgrade as soon as possible.

For more details please read-on.

The most important changes in this release are:


Verify we do not receive multiple content-length headers or a content-length and transfer-encoding: chunked header when using HTTP/1.1 (#9865)
Detect missing colon when parsing http headers with no value (#9871)
Fix #9770, last frame may contain extra data that doesn't affect decompression (#9832)
Ensure scheduled tasks are executed before shutdown (#9858)
Change DefaultByteBufHolder.equals() to treat instances of different classes as not equal...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.44.Final after almost 2 months of work. This is a bug-fix release which fixes some critical issues. Please upgrade as soon as possible.&lt;/p&gt;

&lt;p&gt;For more details please read-on.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verify we do not receive multiple content-length headers or a content-length and transfer-encoding: chunked header when using HTTP/1.1 (&lt;a href=&quot;https://github.com/netty/netty/pull/9865&quot;&gt;#9865&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Detect missing colon when parsing http headers with no value (&lt;a href=&quot;https://github.com/netty/netty/pull/9871&quot;&gt;#9871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix #9770, last frame may contain extra data that doesn&#39;t affect decompression (&lt;a href=&quot;https://github.com/netty/netty/pull/9832&quot;&gt;#9832&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure scheduled tasks are executed before shutdown (&lt;a href=&quot;https://github.com/netty/netty/pull/9858&quot;&gt;#9858&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Change DefaultByteBufHolder.equals() to treat instances of different classes as not equal (&lt;a href=&quot;https://github.com/netty/netty/pull/9855&quot;&gt;#9855&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DefaultHttp2ConnectionEncoder writeHeaders method always send an header frame with a priority  (&lt;a href=&quot;https://github.com/netty/netty/pull/9852&quot;&gt;#9852&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Prevent any leaks when HttpPostStandardRequestDecoder constructor throws (&lt;a href=&quot;https://github.com/netty/netty/pull/9837&quot;&gt;#9837&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle fragmented Handshake message when trying to detect SNI (&lt;a href=&quot;https://github.com/netty/netty/pull/9806&quot;&gt;#9806&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Call ctx.flush() when onStreamClosed(...) produces a window update frame (&lt;a href=&quot;https://github.com/netty/netty/pull/9818&quot;&gt;#9818&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t send window update frame for unconsumed bytes when stream is already closed (&lt;a href=&quot;https://github.com/netty/netty/pull/9816&quot;&gt;#9816&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly set writerIndex when EpollChannelOption.MAX_DATAGRAM_PAYLOAD_SIZE is used in all cases (&lt;a href=&quot;https://github.com/netty/netty/pull/9819&quot;&gt;#9819&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly guard against multiple RST frames for the same stream (&lt;a href=&quot;https://github.com/netty/netty/pull/9811&quot;&gt;#9811&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Log expected STREAM_CLOSED exceptions for already closed streams at DEBUG level (&lt;a href=&quot;https://github.com/netty/netty/pull/9798&quot;&gt;#9798&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove dependency on GLIBC 2.12 by using syscalls directly (&lt;a href=&quot;https://github.com/netty/netty/pull/9797&quot;&gt;#9797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t cache key material if sun.security.ssl.X509KeyManagerImpl is used (&lt;a href=&quot;https://github.com/netty/netty/pull/9762&quot;&gt;#9762&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Prevent memory leak when SimpleChannelPools are destroyed (&lt;a href=&quot;https://github.com/netty/netty/pull/9760&quot;&gt;#9760&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove padding when writing CONTINUATION frame (&lt;a href=&quot;https://github.com/netty/netty/pull/9752&quot;&gt;#9752&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove usage of finalizer in Recycler (&lt;a href=&quot;https://github.com/netty/netty/pull/9726&quot;&gt;#9726&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly update size of the Stack before doing any validation in Recycler (&lt;a href=&quot;https://github.com/netty/netty/pull/9731&quot;&gt;#9731&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HttpClientCodec need to keep request / response pairs in sync all the time (&lt;a href=&quot;https://github.com/netty/netty/pull/9721&quot;&gt;#9721&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Introduce MacOSDnsServerAddressStreamProvider which correctly detect all nameserver configuration on MacOS (&lt;a href=&quot;https://github.com/netty/netty/pull/9161&quot;&gt;#9161&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Changed Netty JDK SSL to use default protocols instead of hardcoded supported protocols, to respect jvm flags(eg. jdk.tls.client.protocols) (&lt;a href=&quot;https://github.com/netty/netty/pull/9707&quot;&gt;#9707&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/218?closed=1&quot;&gt;4.1.44.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/anuraaga&quot;&gt;@anuraaga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bennett-Lynch&quot;&gt;@Bennett-Lynch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bsideup&quot;&gt;@bsideup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carryxyh&quot;&gt;@carryxyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cstancu&quot;&gt;@cstancu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dlutsniper&quot;&gt;@dlutsniper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eginez&quot;&gt;@eginez&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gs88pansh&quot;&gt;@gs88pansh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jasonstack&quot;&gt;@jasonstack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jffree&quot;&gt;@jffree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jiafu1115&quot;&gt;@jiafu1115&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/juggernaut&quot;&gt;@juggernaut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kapsterio&quot;&gt;@kapsterio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LinShunKang&quot;&gt;@LinShunKang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/martinfurmanski&quot;&gt;@martinfurmanski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/michaelmao999&quot;&gt;@michaelmao999&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mihalyr&quot;&gt;@mihalyr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/millems&quot;&gt;@millems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/monkey-nas&quot;&gt;@monkey-mas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/morvael&quot;&gt;@morvael&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mosesn&quot;&gt;@mosesn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MrYangxf&quot;&gt;@MrYangxf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ursaj&quot;&gt;@ursaj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vietj&quot;&gt;@vietj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shorea&quot;&gt;@shorea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sskrobotov&quot;&gt;@sskrobotov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tsegismont&quot;&gt;@tsegismont&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ZeddYu&quot;&gt;@ZeddYu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2019/10/24/4-1-43-Final.html</id>
<title>Netty 4.1.43.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-10-24T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/10/24/4-1-43-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.43.Final. This is a bug-fix release but also contains a few performance enhancements and features.

For more details please read-on.

The most important changes in this release are:


Support semicolons in query parameters as explain in the W3C recommendation (#9701)
Ignore invalid entries in /etc/resolv.conf when parsing (#9697)
Refactor SslHandler internals to always use heap buffers for JDK SSLEngine implementation (#9696)
Bugfix #9667: FlowControllerHandler swallows read-complete event when auto-read is disabled (#9691)
HTTP/2: Prevent memory leak when trying to create new streams on a connection that received a GOAWAY (#9674)
fix remove handler cause ByteToMessageDecoder out disorder (#9670)
Correctly propagate...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.43.Final. This is a bug-fix release but also contains a few performance enhancements and features.&lt;/p&gt;

&lt;p&gt;For more details please read-on.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support semicolons in query parameters as explain in the W3C recommendation (&lt;a href=&quot;https://github.com/netty/netty/pull/9701&quot;&gt;#9701&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ignore invalid entries in /etc/resolv.conf when parsing (&lt;a href=&quot;https://github.com/netty/netty/pull/9697&quot;&gt;#9697&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Refactor SslHandler internals to always use heap buffers for JDK SSLEngine implementation (&lt;a href=&quot;https://github.com/netty/netty/pull/9696&quot;&gt;#9696&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Bugfix #9667: FlowControllerHandler swallows read-complete event when auto-read is disabled (&lt;a href=&quot;https://github.com/netty/netty/pull/9691&quot;&gt;#9691&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP/2: Prevent memory leak when trying to create new streams on a connection that received a GOAWAY (&lt;a href=&quot;https://github.com/netty/netty/pull/9674&quot;&gt;#9674&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;fix remove handler cause ByteToMessageDecoder out disorder (&lt;a href=&quot;https://github.com/netty/netty/pull/9670&quot;&gt;#9670&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly propagate failures while update the flow-controller to the multiplexed channel (&lt;a href=&quot;https://github.com/netty/netty/pull/9664&quot;&gt;#9664&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not mandate direct bytes in SslHandler queue (&lt;a href=&quot;https://github.com/netty/netty/pull/9656&quot;&gt;#9656&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add ability to set attributes on a SslContext (&lt;a href=&quot;https://github.com/netty/netty/pull/9654&quot;&gt;#9654&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix DnsNameResolver TCP fallback test and message leaks (&lt;a href=&quot;https://github.com/netty/netty/pull/9647&quot;&gt;#9647&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reference-counted SslEngines retain a reference to their parent SslContext (&lt;a href=&quot;https://github.com/netty/netty/pull/9626&quot;&gt;#9626&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use fast HPACK comparisons when not checking sensitive headers (&lt;a href=&quot;https://github.com/netty/netty/pull/9259&quot;&gt;#9259&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/217?closed=1&quot;&gt;4.1.43.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/brucelwl&quot;&gt;@brucelwl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carryxyh&quot;&gt;@carryxyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CodingFabian&quot;&gt;@CodingFabian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cstancu&quot;&gt;@cstancu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dziemba&quot;&gt;@dziemba&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fenik17&quot;&gt;@fenik17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/inatatsu&quot;&gt;@inatatsu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jiafu1115&quot;&gt;@jiafu1115&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JLLeitschuh&quot;&gt;@JLLeitschuh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KangZhiDong&quot;&gt;@KangZhiDong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marcban&quot;&gt;@marcban&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/millems&quot;&gt;@millems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nicmunroe&quot;&gt;@nicmunroe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pete-woods&quot;&gt;@pete-woods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vkostyukov&quot;&gt;@vkostyukov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ran-su&quot;&gt;@ran-su&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rkapsi&quot;&gt;@rkapsi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/switchYello&quot;&gt;@switchYello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tbrooks8&quot;&gt;@tbrooks8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ti2ger92&quot;&gt;@ti2ger92&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ursaj&quot;&gt;@ursaj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vietj&quot;&gt;@vietj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2019/09/25/4-1-42-Final.html</id>
<title>Netty 4.1.42.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-09-25T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/09/25/4-1-42-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.42.Final. This is a bug-fix release but also contains a few performance enhancements and features.

For more details please read-on.

The most important changes in this release are:


Correctly reset cached local and remote address when disconnect() is called (#9545)
Correctly synchronize before trying to set key material to fix possible native crash (#9566)
Correctly handle task offloading when using BoringSSL / OpenSSL (#9575)
Fix possible infinite while loop in NonStickyEventExecutorGroup due misusage of MPSC queue (#9579)
Correctly handle whitespaces in HTTP header names as defined by RFC7230#section-3.2.4 (#9585)
Close eventfd shutdown/wakeup race by closely tracking epoll edges (#9586)
Fix...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.42.Final. This is a bug-fix release but also contains a few performance enhancements and features.&lt;/p&gt;

&lt;p&gt;For more details please read-on.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Correctly reset cached local and remote address when disconnect() is called (&lt;a href=&quot;https://github.com/netty/netty/pull/9545&quot;&gt;#9545&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly synchronize before trying to set key material to fix possible native crash (&lt;a href=&quot;https://github.com/netty/netty/pull/9566&quot;&gt;#9566&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle task offloading when using BoringSSL / OpenSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/9575&quot;&gt;#9575&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix possible infinite while loop in NonStickyEventExecutorGroup due misusage of MPSC queue (&lt;a href=&quot;https://github.com/netty/netty/pull/9579&quot;&gt;#9579&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle whitespaces in HTTP header names as defined by RFC7230#section-3.2.4 (&lt;a href=&quot;https://github.com/netty/netty/pull/9585&quot;&gt;#9585&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Close eventfd shutdown/wakeup race by closely tracking epoll edges (&lt;a href=&quot;https://github.com/netty/netty/pull/9586&quot;&gt;#9586&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix GraalVM native image build error (&lt;a href=&quot;https://github.com/netty/netty/pull/9593&quot;&gt;#9593&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We need to use NewGloblRef when caching jclass instances (&lt;a href=&quot;https://github.com/netty/netty/pull/9595&quot;&gt;#9595&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Cleanup JNI code to always correctly free memory when loading fails and also correctly respect out of memory in all cases (&lt;a href=&quot;https://github.com/netty/netty/pull/9596&quot;&gt;#9596&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/216?closed=1&quot;&gt;4.1.42.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/axeBig&quot;&gt;@axeBig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bi3g0&quot;&gt;@Bi3g0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ellisjoe&quot;&gt;@ellisjoe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jiafu1115&quot;&gt;@jiafu1115&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Liyixin95&quot;&gt;@Liyixin95&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pete-woods&quot;&gt;@pete-woods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wyzhang&quot;&gt;@wyzhang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SantoshMagdum&quot;&gt;@SantoshMagdum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/switchYello&quot;&gt;@switchYello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2019/09/12/4-1-41-Final.html</id>
<title>Netty 4.1.41.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-09-12T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/09/12/4-1-41-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.41.Final. This is a bug-fix release but also contains a few performance enhancements and features. For more details please read-on.

The most important changes in this release are:


Http2EmptyDataFrameConnectionDecoder.frameListener() should return unwrapped Http2FrameListener (#9467)
Don't zero non-readable buffer regions when capacity is decreased (#9427)
AsciiString contentEqualsIgnoreCase fails when arrayOffset is non-zero (#9477)
Detect truncated responses caused by EDNS0 and MTU miss-match (#9468)
Ensure we replace WebSocketServerProtocolHandshakeHandler before doing the handshake (#9472)
Fix unexpected IllegalReferenceCountException on decode multipart request (#8660)
Correctly handle client side http2 upgrades when Http2FrameCodec is used together with Http2MultiplexHandler (#9501)
Reduce GC produced by AbstractByteBuf.indexOf(..) implementation (#9502)
Support...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.41.Final. This is a bug-fix release but also contains a few performance enhancements and features. For more details please read-on.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Http2EmptyDataFrameConnectionDecoder.frameListener() should return unwrapped Http2FrameListener (&lt;a href=&quot;https://github.com/netty/netty/pull/9467&quot;&gt;#9467&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t zero non-readable buffer regions when capacity is decreased (&lt;a href=&quot;https://github.com/netty/netty/pull/9427&quot;&gt;#9427&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AsciiString contentEqualsIgnoreCase fails when arrayOffset is non-zero (&lt;a href=&quot;https://github.com/netty/netty/pull/9477&quot;&gt;#9477&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Detect truncated responses caused by EDNS0 and MTU miss-match (&lt;a href=&quot;https://github.com/netty/netty/pull/9468&quot;&gt;#9468&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure we replace WebSocketServerProtocolHandshakeHandler before doing the handshake (&lt;a href=&quot;https://github.com/netty/netty/pull/9472&quot;&gt;#9472&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix unexpected IllegalReferenceCountException on decode multipart request (&lt;a href=&quot;https://github.com/netty/netty/pull/8660&quot;&gt;#8660&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle client side http2 upgrades when Http2FrameCodec is used together with Http2MultiplexHandler (&lt;a href=&quot;https://github.com/netty/netty/pull/9501&quot;&gt;#9501&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reduce GC produced by AbstractByteBuf.indexOf(..) implementation (&lt;a href=&quot;https://github.com/netty/netty/pull/9502&quot;&gt;#9502&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support cancellation in the Http2StreamChannelBootstrap (&lt;a href=&quot;https://github.com/netty/netty/pull/9519&quot;&gt;#9519&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Include native-image properties in the netty-all jar (&lt;a href=&quot;https://github.com/netty/netty/pull/9518&quot;&gt;#9518&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix sending an empty String like &quot;&quot; causes an error (&lt;a href=&quot;https://github.com/netty/netty/pull/9512&quot;&gt;#9512&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HttpPostStandardRequestDecoder leaks memory when constructor throws ErrorDataDecoderException (&lt;a href=&quot;https://github.com/netty/netty/pull/9517&quot;&gt;#9517&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update GraalVM Native Image configuration for 19.2.0 (&lt;a href=&quot;https://github.com/netty/netty/pull/9515&quot;&gt;#9515&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix for incorrect values from CompositeByteBuf#component(int) (&lt;a href=&quot;https://github.com/netty/netty/pull/9525&quot;&gt;#9525&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly protect DefaultChannelPipeline nodes when concurrent removals happen due handlerAdded(...) throwing (&lt;a href=&quot;https://github.com/netty/netty/pull/9530&quot;&gt;#9530&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for recvmmsg when using epoll transport (&lt;a href=&quot;https://github.com/netty/netty/pull/9509&quot;&gt;#9509&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Avoid CancellationException construction in DefaultPromise (&lt;a href=&quot;https://github.com/netty/netty/pull/9534&quot;&gt;#9534&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Also support sendmmsg(...) on connected UDP channels when using native epoll transport (&lt;a href=&quot;https://github.com/netty/netty/pull/9536&quot;&gt;#9536&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for recvmmsg(...) even with connected datagram channels when using native epoll transport (&lt;a href=&quot;https://github.com/netty/netty/pull/9539&quot;&gt;#9539&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SimpleChannelPool POOL_KEY attribute name is easy to get conflict from user code. (&lt;a href=&quot;https://github.com/netty/netty/pull/9548&quot;&gt;#9548&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SocksAuthRequest constructor occasionally throws IllegalStateException (&lt;a href=&quot;https://github.com/netty/netty/pull/9558&quot;&gt;#9558&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix HttpContentEncoder does not handle multiple Accept-Encoding (&lt;a href=&quot;https://github.com/netty/netty/pull/9557&quot;&gt;#9557&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/215?closed=1&quot;&gt;4.1.41.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;Enable usage of &lt;code&gt;recvmmsg(...)&lt;/code&gt; to reduce syscalls&lt;/h2&gt;

&lt;p&gt;On linux you can use &lt;code&gt;recvmmsg(...)&lt;/code&gt; to reduce syscalls when using UDP. This allows to read multiple datagram packets via one syscall. This can drastically reduce the overhead and increase performance. To prove this we did a very naive benchmark which basically tried to read X messages as fast as possible while being flooded by 4 concurrent clients. With &lt;code&gt;recvmmsg(...)&lt;/code&gt; the time of reading the messages decreased easily by a factor of &lt;strong&gt;4-5x&lt;/strong&gt;. This is by no means a &quot;fixed number&quot;, but shows the possible gains.&lt;/p&gt;

&lt;p&gt;For more details on the change and and the benchmark check (&lt;a href=&quot;https://github.com/netty/netty/pull/9509&quot;&gt;#9509&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To enable &lt;code&gt;recvmmsg(...)&lt;/code&gt; you will need to specify a new &lt;code&gt;EpollChannelOption&lt;/code&gt; when bootstrap your &lt;code&gt;EpollDatagramChannel&lt;/code&gt;. You will see the best possible ratio of memory overhead &lt;-&gt; performance improvements when using it together with the &lt;code&gt;AdaptiveRecvByteBufAllocator&lt;/code&gt;.&lt;/-&gt;

&lt;p&gt;This example illustrate how you can change your existing code to use the new feature:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;EventLoopGroup group = new EpollEventLoopGroup();
Bootstrap bootstrap = new Bootstrap();
bootstrap.group(group)
         .channel(EpollDatagramChannel.class)
         .option(ChannelOption.RCVBUF_ALLOCATOR, new FixedRecvByteBufAllocator(512))
         .handler(new SimpleChannelInboundHandler&amp;lt;DatagramPacket&amp;gt;() {
            @Override
            protected void channelRead0(ChannelHandlerContext ctx, DatagramPacket msg) {
                // Do something
            }
         })
         .bind(new InetSocketAddress(9999)).syncUninterruptibly().channel();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable the usage of &lt;code&gt;recvmmsg(...)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;EventLoopGroup group = new EpollEventLoopGroup();
Bootstrap bootstrap = new Bootstrap();
bootstrap.group(group)
         .channel(EpollDatagramChannel.class)
         .option(ChannelOption.RCVBUF_ALLOCATOR, new AdaptiveRecvByteBufAllocator(512, 512, 64 * 1024))
         .option(EpollChannelOption.MAX_DATAGRAM_PAYLOAD_SIZE, 512)
         .handler(new SimpleChannelInboundHandler&amp;lt;DatagramPacket&amp;gt;() {
            @Override
            protected void channelRead0(ChannelHandlerContext ctx, DatagramPacket msg) {
                // Do something
            }
         })
         .bind(new InetSocketAddress(9999)).syncUninterruptibly().channel();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above configuration will start with trying to read one &lt;code&gt;DatagramPacket&lt;/code&gt; first and then increase the number of &lt;code&gt;DatagramPacket&lt;/code&gt;s in a graceful manner depending on how many could be read on the last try. It will also decrease the number when needed.&lt;/p&gt;

&lt;h2&gt;Fix of performance regression when calling &lt;code&gt;*Future.cancel(...)&lt;/code&gt; / &lt;code&gt;*Promise.cancel(...)&lt;/code&gt;.&lt;/h2&gt;

&lt;p&gt;This release also fixes a performance regression that was introduced in an earlier release which made the usage of &lt;code&gt;*Future.cancel(...)&lt;/code&gt; and &lt;code&gt;*Promise.cancel(...)&lt;/code&gt; quite expensive in some cases.&lt;/p&gt;

&lt;p&gt;The regression was caused by creating new &lt;code&gt;CancellationException&lt;/code&gt; instances and so caused &lt;code&gt;fillInStackTrace()&lt;/code&gt; to be called quite frequently. This is a very expensive operation when executed on the &quot;hot-path&quot;.&lt;/p&gt;

&lt;p&gt;This showed up in flamegraphs during profiling and so was fixed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/261310/64210791-07d01780-ce59-11e9-9994-11384670c461.png&quot; width=&quot;800&quot; title=&quot;Flamegraph&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more details see (&lt;a href=&quot;https://github.com/netty/netty/issues/9522&quot;&gt;#9522&lt;/a&gt;).&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/atcurtis&quot;&gt;@atcurtis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/battleblow&quot;&gt;@battleblow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dagnir&quot;&gt;@dagnir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fabienrenaud&quot;&gt;@fabienrenaud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jingene&quot;&gt;@jingene&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kimifdw&quot;&gt;@kimifdw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lechiefe&quot;&gt;@lechiefe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/leotu&quot;&gt;@leotu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/leventov&quot;&gt;@leventov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lwlee2608&quot;&gt;@lwlee2608&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nictas&quot;&gt;@nictas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nizarm&quot;&gt;@nizarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ssserj&quot;&gt;@ssserj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vietj&quot;&gt;@vietj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xqfu&quot;&gt;@xqfu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zoewangg&quot;&gt;@zoewangg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/p&gt;
</content>
</entry>
<entry>
<id>http://netty.io/news/2019/08/13/4-1-39-Final.html</id>
<title>Netty 4.1.39.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-08-13T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/08/13/4-1-39-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.39.Final. This is a bug-fix release but also contains a few performance enhancements.
Most importantly it fixed multiple HTTP/2 security issues, for more details see the section below.

The most important changes in this release are:


HTTP2: Guard against empty DATA frames (without end_of_stream flag) set (#9461)
HTTP2: Add protection against remote control frames that are triggered by a remote peer (#9460)
Set the ORIGIN header from a custom headers if present (#9435)
Do not cache local/remote address when creating EpollDatagramChannel with InternetProtocolFamily (#9436)
Fix HttpUtil.getCharset to not throw IllegalCharsetNameException (#9439)



For the details and all changes, please browse...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.39.Final. This is a bug-fix release but also contains a few performance enhancements.
Most importantly it fixed multiple HTTP/2 security issues, for more details see the section below.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP2: Guard against empty DATA frames (without end_of_stream flag) set (&lt;a href=&quot;https://github.com/netty/netty/pull/9461&quot;&gt;#9461&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP2: Add protection against remote control frames that are triggered by a remote peer (&lt;a href=&quot;https://github.com/netty/netty/pull/9460&quot;&gt;#9460&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Set the ORIGIN header from a custom headers if present (&lt;a href=&quot;https://github.com/netty/netty/pull/9435&quot;&gt;#9435&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not cache local/remote address when creating EpollDatagramChannel with InternetProtocolFamily (&lt;a href=&quot;https://github.com/netty/netty/pull/9436&quot;&gt;#9436&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix HttpUtil.getCharset to not throw IllegalCharsetNameException (&lt;a href=&quot;https://github.com/netty/netty/pull/9439&quot;&gt;#9439&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/213?closed=1&quot;&gt;4.1.39.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;HTTP/2 Security issues&lt;/h1&gt;

&lt;p&gt;Multiple servers / libraries that contain a HTTP/2 implementations have been discovered to be affected by multiple DOS attacks, if the user itself does not provide special handlers for protection. Netty&#39;s HTTP/2 implementation is affected by the vulnerabilities as listed below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CVE-2019-9512: Ping Flood&lt;/li&gt;
&lt;li&gt;CVE-2019-9514: Reset Flood&lt;/li&gt;
&lt;li&gt;CVE-2019-9515: Settings Flood&lt;/li&gt;
&lt;li&gt;CVE-2019-9518: Empty DATA frame flooding&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more details please read the full report by &lt;a href=&quot;https://github.com/Netflix/security-bulletins/blob/master/advisories/third-party/2019-002.md&quot;&gt;Netflix&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Ping Flood, Reset Flood, Settings Flood (CVE-2019-9512, CVE-2019-9514, CVE-2019-9515)&lt;/h2&gt;

&lt;p&gt;A Netty based HTTP/2 server can be forced to buffer unbounded amounts of memory when flooded with control frames that require an automatic response.&lt;/p&gt;

&lt;p&gt;This attack is addressed by Netty by counting the number of outstanding control frames that needs to be written and if a limit is hit closing the connection. The limit is configurable to allow more flexibility and lower the risk of false-positives.&lt;/p&gt;

&lt;h2&gt;Empty DATA frame flooding (CVE-2019-9518)&lt;/h2&gt;

&lt;p&gt;A Netty based HTTP/2 server could be forced to consume substantial CPU resources by sending it an unbounded sequence of empty DATA frames that do not have END_STREAM set on them.&lt;/p&gt;

&lt;p&gt;This attack was addressed by Netty by counting the number of empty DATA frames whithout the END_STREAM flag set, and if such an attach is detected closing the connection.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/NicoK&quot;&gt;@NicoK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/noSim&quot;&gt;@noSim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tbrooks8&quot;&gt;@tbrooks8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2019/07/24/4-1-38-Final.html</id>
<title>Netty 4.1.38.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-07-24T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/07/24/4-1-38-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I am happy to announce the release of netty 4.1.38.Final. This is a bug-fix release but also contains a few performance enhancements.

The most important changes in this release are:


Prevent ByteToMessageDecoder from overreading when !isAutoRead (#9252)
Http2FrameCodecBuilder.autoAckSettingsFrame(...) must be public (#9295)
Disable Huffman encoding for small headers (#9269)
Use Table lookup for HPACK decoder (#9307)
Correctly take length of ByteBufInputStream into account for readLine() / readByte() (#9310)
Pre-decompressed DNS record RData that may contain compression pointers (#9311)
Fixed incorrect Sec-WebSocket-Origin header for v13, see #9134 (#9312)
Correctly handle http2 upgrades when Http2FrameCodec is used together with Http2MultiplexHandler (#9318)
Fix NPE caused by re-entrance calls in FlowControlHandler (#9320)
Allow to disable...
</summary>
<content type="html">
&lt;p&gt;I am happy to announce the release of netty 4.1.38.Final. This is a bug-fix release but also contains a few performance enhancements.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prevent ByteToMessageDecoder from overreading when !isAutoRead (&lt;a href=&quot;https://github.com/netty/netty/pull/9252&quot;&gt;#9252&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Http2FrameCodecBuilder.autoAckSettingsFrame(...) must be public (&lt;a href=&quot;https://github.com/netty/netty/pull/9295&quot;&gt;#9295&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Disable Huffman encoding for small headers (&lt;a href=&quot;https://github.com/netty/netty/pull/9269&quot;&gt;#9269&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use Table lookup for HPACK decoder (&lt;a href=&quot;https://github.com/netty/netty/pull/9307&quot;&gt;#9307&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly take length of ByteBufInputStream into account for readLine() / readByte() (&lt;a href=&quot;https://github.com/netty/netty/pull/9310&quot;&gt;#9310&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Pre-decompressed DNS record RData that may contain compression pointers (&lt;a href=&quot;https://github.com/netty/netty/pull/9311&quot;&gt;#9311&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed incorrect Sec-WebSocket-Origin header for v13, see #9134 (&lt;a href=&quot;https://github.com/netty/netty/pull/9312&quot;&gt;#9312&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle http2 upgrades when Http2FrameCodec is used together with Http2MultiplexHandler (&lt;a href=&quot;https://github.com/netty/netty/pull/9318&quot;&gt;#9318&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix NPE caused by re-entrance calls in FlowControlHandler (&lt;a href=&quot;https://github.com/netty/netty/pull/9320&quot;&gt;#9320&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to disable automatically sending PING acks (&lt;a href=&quot;https://github.com/netty/netty/pull/9338&quot;&gt;#9338&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP2: Always apply the graceful shutdown timeout if configured (&lt;a href=&quot;https://github.com/netty/netty/pull/9340&quot;&gt;#9340&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DecoratingHttp2ConnectionEncoder.consumeReceivedSettings must not throw if delegate is instance of Http2SettingsReceivedConsumer (&lt;a href=&quot;https://github.com/netty/netty/pull/9343&quot;&gt;#9343&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix epoll spliceTo file descriptor with offset (&lt;a href=&quot;https://github.com/netty/netty/pull/9369&quot;&gt;#9369&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix an NPE in AbstractHttp2StreamChannel (&lt;a href=&quot;https://github.com/netty/netty/pull/9379&quot;&gt;#9379&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP/2 multiplex: Correctly process buffered inbound data even if autoRead is false (&lt;a href=&quot;https://github.com/netty/netty/pull/9389&quot;&gt;#9389&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;availableSharedCapacity will be slowly exhausted (&lt;a href=&quot;https://github.com/netty/netty/pull/9394&quot;&gt;#9394&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP/2: Ensure newStream() is called only once per connection upgrade and the correct handler is used (&lt;a href=&quot;https://github.com/netty/netty/pull/9396&quot;&gt;#9396&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/212?closed=1&quot;&gt;4.1.38.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davydotcom&quot;&gt;@davydotcom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/emlittleworth&quot;&gt;@emlittleworth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/graemerocher&quot;&gt;@graemerocher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iamaleksey&quot;&gt;@iamaleksey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jingene&quot;&gt;@jingene&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KevinBlandy&quot;&gt;@KevinBlandy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ljnelson&quot;&gt;@ljnelson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nzhenry&quot;&gt;@nzhenry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/perlun&quot;&gt;@perlun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/qeesung&quot;&gt;@qeesung&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RobinGG&quot;&gt;@RobinGG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiaoheng1&quot;&gt;@xiaoheng1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/YuanHuCoding&quot;&gt;@YuanHuCoding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2019/06/28/4-1-37-Final.html</id>
<title>Netty 4.1.37.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-06-28T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/06/28/4-1-37-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we announce the release of netty 4.1.37.Final. This release contains mostly bugfixes, but also deprecated some HTTP/2 related classes and added replacements and adds some features. If you use HTTP/2 please ensure to read the Important notes section

The most important changes in this release are:


Don't filter out TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (#9274)
Add null check to isSkippable. Fixes #9278 (#9280)
Preserve the original filename when encoding a multipart/form in mixed mode (#9270)
Fixed the haproxy message mem leak issue due unreleased TLVs (#9250)
Allow to specify a EventLoopTaskQueueFactory for various EventLoopGroup implementations (#9247)
codec-http2: Lazily translate cookies for HTTP/1 (#9251)
Try to mark child channel writable again once...
</summary>
<content type="html">
&lt;p&gt;Today we announce the release of netty 4.1.37.Final. This release contains mostly bugfixes, but also deprecated some &lt;code&gt;HTTP/2&lt;/code&gt; related classes and added replacements and adds some features. If you use &lt;code&gt;HTTP/2&lt;/code&gt; please ensure to read the Important notes section&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&#39;t filter out TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (&lt;a href=&quot;https://github.com/netty/netty/pull/9274&quot;&gt;#9274&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add null check to isSkippable. Fixes #9278 (&lt;a href=&quot;https://github.com/netty/netty/pull/9280&quot;&gt;#9280&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Preserve the original filename when encoding a multipart/form in mixed mode (&lt;a href=&quot;https://github.com/netty/netty/pull/9270&quot;&gt;#9270&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed the haproxy message mem leak issue due unreleased TLVs (&lt;a href=&quot;https://github.com/netty/netty/pull/9250&quot;&gt;#9250&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to specify a EventLoopTaskQueueFactory for various EventLoopGroup implementations (&lt;a href=&quot;https://github.com/netty/netty/pull/9247&quot;&gt;#9247&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;codec-http2: Lazily translate cookies for HTTP/1 (&lt;a href=&quot;https://github.com/netty/netty/pull/9251&quot;&gt;#9251&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Try to mark child channel writable again once the parent channel becomes writable (&lt;a href=&quot;https://github.com/netty/netty/pull/9254&quot;&gt;#9254&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WebSocket is closed without an error on protocol violations (&lt;a href=&quot;https://github.com/netty/netty/pull/9116&quot;&gt;#9116&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Writability state of http2 child channels should be decoupled from the flow-controller (&lt;a href=&quot;https://github.com/netty/netty/pull/9235&quot;&gt;#9235&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix LZ4 encoder/decoder performance with (default) xxHash32 (&lt;a href=&quot;https://github.com/netty/netty/pull/9249&quot;&gt;#9249&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix ReflectiveByteBufChecksum with direct buffers (&lt;a href=&quot;https://github.com/netty/netty/pull/9244&quot;&gt;#9244&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SslHandler to fail handshake and pending writes if non-application write fails (&lt;a href=&quot;https://github.com/netty/netty/pull/9240&quot;&gt;#9240&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix ByteBufChecksum optimisation for CRC32 and Adler32 (&lt;a href=&quot;https://github.com/netty/netty/pull/9242&quot;&gt;#9242&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Handle missing methods on ChannelHandlerMask (&lt;a href=&quot;https://github.com/netty/netty/pull/9221&quot;&gt;#9221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP/2 avoid closing connection when writing GOAWAY (&lt;a href=&quot;https://github.com/netty/netty/pull/9227&quot;&gt;#9227&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Properly debounce wakeups (&lt;a href=&quot;https://github.com/netty/netty/pull/9191&quot;&gt;#9191&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Close delegate resolver from RoundRobinInetAddressResolver (&lt;a href=&quot;https://github.com/netty/netty/pull/9214&quot;&gt;#9214&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t read from timerfd and eventfd on each EventLoop tick (&lt;a href=&quot;https://github.com/netty/netty/pull/9192&quot;&gt;#9192&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for multicast when using native epoll transport (&lt;a href=&quot;https://github.com/netty/netty/pull/9146&quot;&gt;#9146&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly detect that KeyManagerFactory is not supported when using OpenSSL 1.1.0+ (&lt;a href=&quot;https://github.com/netty/netty/pull/9170&quot;&gt;#9170&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support handshake timeout in websocket handlers (&lt;a href=&quot;https://github.com/netty/netty/pull/8856&quot;&gt;#8856&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix possible unsafe sharing of internal NIO buffer in CompositeByteBuf (&lt;a href=&quot;https://github.com/netty/netty/pull/9169&quot;&gt;#9169&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;KQueueEventLoop won&#39;t unregister active channels reusing a file descriptor (&lt;a href=&quot;https://github.com/netty/netty/pull/9149&quot;&gt;#9149&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Prefer direct io buffers if direct buffers pooled (&lt;a href=&quot;https://github.com/netty/netty/pull/9167&quot;&gt;#9167&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for TCP fallback when we receive a truncated DnsResponse (&lt;a href=&quot;https://github.com/netty/netty/pull/9139&quot;&gt;#9139&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ApplicationProtocolNegotiationHandler loses its place in the context too soon (&lt;a href=&quot;https://github.com/netty/netty/issues/9131&quot;&gt;#9131&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DnsNameResolver.resolveAll(DnsQuestion) should not try to filter duplicates  (&lt;a href=&quot;https://github.com/netty/netty/pull/9141&quot;&gt;#9141&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to have DnsNameResolver.resolveAll(...) notify as soon as the preferred records were resolved (&lt;a href=&quot;https://github.com/netty/netty/pull/9136&quot;&gt;#9136&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/210?closed=1&quot;&gt;4.1.37.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;p&gt;Some of the changes done in the release deserve some more explantion. This section lists all of these.&lt;/p&gt;

&lt;h1&gt;&lt;code&gt;Http2MultiplexCodec*&lt;/code&gt; deprecation&lt;/h1&gt;

&lt;p&gt;If you used &lt;code&gt;Http2MultiplexCodec*&lt;/code&gt; in the past you will notice that &lt;code&gt;Http2MultiplexCode&lt;/code&gt; and &lt;code&gt;Http2MultiplexCodecBuilder&lt;/code&gt; are marked as &lt;code&gt;@deprecated&lt;/code&gt; in this release. The reason for this is that how it was implemented did result in a too tight coupling of &lt;code&gt;Http2FrameCodec&lt;/code&gt; and &lt;code&gt;Http2MultplexCodec&lt;/code&gt; which made it impossible to add special handling of frames before these are multiplexed to the &lt;code&gt;Http2StreamChannel&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;As a replacement we now offer &lt;code&gt;Http2MultiplexHandler&lt;/code&gt; which only has the responsible of multiplexing and nothing more. This means that instead of having only &lt;code&gt;Http2MultiplexCodec&lt;/code&gt; in the &lt;code&gt;ChannelPipeline&lt;/code&gt; you will now need to add &lt;code&gt;Http2FrameCodec&lt;/code&gt; and &lt;code&gt;Http2MultiplexHandler&lt;/code&gt; to the pipeline.&lt;/p&gt;

&lt;p&gt;As an example this is how your &quot;old&quot; code may look as of today:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;ChannelPipeline pipeline = ...
pipeline.addLast(Http2MultiplexCodecBuilder.forServer(new HelloWorldHttp2Handler()).build());
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the future it should be changed to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;ChannelPipeline pipeline = ...
pipeline.addLast(Http2FrameCodecBuilder.forServer().build());
pipeline.addLast(new Http2MultiplexHandler(new HelloWorldHttp2Handler());
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While the semantics of the child channels ( &lt;code&gt;Http2StreamChannel&lt;/code&gt; ) are mostly unchanged &lt;code&gt;Http2MultiplexHandler&lt;/code&gt; changes 2 things to make it easier for users to re-use code between &lt;code&gt;HTTP/1&lt;/code&gt; and &lt;code&gt;HTTP/2&lt;/code&gt;:
* &lt;code&gt;Http2ResetFrame&lt;/code&gt;s are propagated to the &lt;code&gt;Http2StreamChannel&lt;/code&gt; as an user-event as these should not be affected on &lt;code&gt;AutoRead&lt;/code&gt; configurations of the child-channels and the user should be able to receive them ASAP (even if the user stopped reading for back-pressure reasons).
* &lt;code&gt;Http2WindowUpdateFrame&lt;/code&gt;s are not propagated as these are not meaningful to the &lt;code&gt;Http2StreamChannel&lt;/code&gt; and just make writing generic code more difficult&lt;/p&gt;

&lt;p&gt;The old &lt;code&gt;Http2MultiplexCodec&lt;/code&gt; behave the same as before to not affect people that depend on the behavior.&lt;/p&gt;

&lt;h1&gt;DnsNameResolver TCP fallback&lt;/h1&gt;

&lt;p&gt;As defined by RFC7766(https://tools.ietf.org/html/rfc7766) resolvers should support TCP fallback in case the response is too large and so is truncated. This release add support for TCP fallback if you configure your &lt;code&gt;DnsNameResolverBuilder&lt;/code&gt; to do so before building the final &lt;code&gt;DnsNameResolver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example this code doesn&#39;t use TCP fallback (old behavior):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;DnsNameResolver resolver = new DnsNameResolverBuilder(eventLoop)
        .channelType(NioDatagramChannel.class).build();
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable TCP fallback specify &lt;code&gt;socketChannelType&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;DnsNameResolver resolver = new DnsNameResolverBuilder(eventLoop)
        .channelType(NioDatagramChannel.class)
        .socketChannelType(NioSocketChannel.class).build();
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alblue&quot;&gt;@alblue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/anuraaga&quot;&gt;@anuraaga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/belliottsmith&quot;&gt;@belliottsmith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/DanielBauman88&quot;&gt;@DanielBauman88&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/divijvaidya&quot;&gt;@divijvaidya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/EliyahuStern&quot;&gt;@EliyahuStern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fabienrenaud&quot;&gt;@fabienrenaud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fredericBregier&quot;&gt;@fredericBregier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/graemerocher&quot;&gt;@graemerocher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hban&quot;&gt;@hban&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iamaleksey&quot;&gt;@iamaleksey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idelpivnitskiy&quot;&gt;@idelpivnitskiy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ilopmar&quot;&gt;@ilopmar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jameskleeh&quot;&gt;@jameskleeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jchambers&quot;&gt;@jchambers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jorcasso&quot;&gt;@jorcasso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kachayev&quot;&gt;@kachayev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kevinoliver&quot;&gt;@kevinoliver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/noSim&quot;&gt;@noSim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ursaj&quot;&gt;@ursaj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vietj&quot;&gt;@vietj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/voidzcy&quot;&gt;@voidzcy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/qeesung&quot;&gt;@qeesung&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rkapsi&quot;&gt;@rkapsi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RoganDawes&quot;&gt;@RoganDawes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ryanoneill&quot;&gt;@ryanoneill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shevah&quot;&gt;@shevah&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slievrly&quot;&gt;@slievrly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SplotyCode&quot;&gt;@SplotyCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tbrooks8&quot;&gt;@tbrooks8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TristanPerry&quot;&gt;@TristanPerry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vjovanov&quot;&gt;@vjovanov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiangwangcheng&quot;&gt;@xiangwangcheng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yipulash&quot;&gt;@yipulash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2019/04/30/4-1-36-Final.html</id>
<title>Netty 4.1.36.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-04-30T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/04/30/4-1-36-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we announce the release of netty 4.1.36.Final. This release contains mostly bugfixes, 2 of them are fixes for regressions so please consider upgrading as soon as possible.

The most important changes in this release are:


Add SVM metadata to netty modules (#8963)
Introduce DynamicAddressConnectHandler which can be used to dynamically change remoteAddress / localAddress when a connect is issued (#8982)
Fix regression in CompositeByteBuf.discard*ReadBytes() (#9063)
HTTP/2 to support asynchronous SETTINGS ACK (#9069)
Invoke channelAcquired callback on first time channel acquire (#9093)
Http2ConnectionHandler to allow decoupling close(..) from GOAWAY graceful close (#9094)
Http2FrameCodec to simulate GOAWAY received when stream IDs are exhausted (#9095)
Ensure channel handler close() is not...
</summary>
<content type="html">
&lt;p&gt;Today we announce the release of netty 4.1.36.Final. This release contains mostly bugfixes, 2 of them are fixes for regressions so please consider upgrading as soon as possible.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add SVM metadata to netty modules (&lt;a href=&quot;https://github.com/netty/netty/pull/8963&quot;&gt;#8963&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Introduce DynamicAddressConnectHandler which can be used to dynamically change remoteAddress / localAddress when a connect is issued (&lt;a href=&quot;https://github.com/netty/netty/pull/8982&quot;&gt;#8982&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix regression in CompositeByteBuf.discard*ReadBytes() (&lt;a href=&quot;https://github.com/netty/netty/pull/9063&quot;&gt;#9063&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP/2 to support asynchronous SETTINGS ACK (&lt;a href=&quot;https://github.com/netty/netty/pull/9069&quot;&gt;#9069&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Invoke channelAcquired callback on first time channel acquire (&lt;a href=&quot;https://github.com/netty/netty/pull/9093&quot;&gt;#9093&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Http2ConnectionHandler to allow decoupling close(..) from GOAWAY graceful close (&lt;a href=&quot;https://github.com/netty/netty/pull/9094&quot;&gt;#9094&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Http2FrameCodec to simulate GOAWAY received when stream IDs are exhausted (&lt;a href=&quot;https://github.com/netty/netty/pull/9095&quot;&gt;#9095&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure channel handler close() is not skipped in !hasDisconnect case  (&lt;a href=&quot;https://github.com/netty/netty/pull/9098&quot;&gt;#9098&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/209?closed=1&quot;&gt;4.1.36.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/daschl&quot;&gt;@daschl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/divijvaidya&quot;&gt;@divijvaidya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ivmaykov&quot;&gt;@ivmaykov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/loganrosen&quot;&gt;@loganrosen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pmlopes&quot;&gt;@pmlopes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sdeleuze&quot;&gt;@sdeleuze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2019/04/17/4-1-35-Final.html</id>
<title>Netty 4.1.35.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-04-17T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/04/17/4-1-35-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we announce the release of netty 4.1.35.Final. This release contains mostly bugfixes, some improvements and a few performance wins.
If you use netty-tcnative or netty-tcnative-boringssl-static you also need to upgrade to 2.0.25.Final.

The most important changes in this release are:


Only try to use OpenSslX509TrustManagerWrapper when using Java 7+ (#9065)
DnsNameResolver.resolve(...) should notify future as soon as one preferred record was resolved (#9050)
Correctly calculate ttl for AuthoritativeNameServer when update existing records (#9051)
DnsNameResolver.resolveAll(...) should also contain non preferred addresses (#9044)
Websocket client closing handshake to support "force close" after given timeout (#8883)
Correctly handle overflow in Native.kevent(...) when EINTR is detected (#9024)
DnsNameResolver.resolveAll(...) should not include duplicates...
</summary>
<content type="html">
&lt;p&gt;Today we announce the release of netty 4.1.35.Final. This release contains mostly bugfixes, some improvements and a few performance wins.
If you use netty-tcnative or netty-tcnative-boringssl-static you also need to upgrade to 2.0.25.Final.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only try to use OpenSslX509TrustManagerWrapper when using Java 7+ (&lt;a href=&quot;https://github.com/netty/netty/pull/9065&quot;&gt;#9065&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DnsNameResolver.resolve(...) should notify future as soon as one preferred record was resolved (&lt;a href=&quot;https://github.com/netty/netty/pull/9050&quot;&gt;#9050&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly calculate ttl for AuthoritativeNameServer when update existing records (&lt;a href=&quot;https://github.com/netty/netty/pull/9051&quot;&gt;#9051&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DnsNameResolver.resolveAll(...) should also contain non preferred addresses (&lt;a href=&quot;https://github.com/netty/netty/pull/9044&quot;&gt;#9044&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Websocket client closing handshake to support &quot;force close&quot; after given timeout (&lt;a href=&quot;https://github.com/netty/netty/pull/8883&quot;&gt;#8883&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle overflow in Native.kevent(...) when EINTR is detected (&lt;a href=&quot;https://github.com/netty/netty/pull/9024&quot;&gt;#9024&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DnsNameResolver.resolveAll(...) should not include duplicates (&lt;a href=&quot;https://github.com/netty/netty/pull/9021&quot;&gt;#9021&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Skip execution of Channel*Handler method if annotated with @Skip and just use the next handler in the pipeline (&lt;a href=&quot;https://github.com/netty/netty/pull/8988&quot;&gt;#8988&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to offload / customize key signing operations when using BoringSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/8943&quot;&gt;#8943&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to offload certificate validation when using BoringSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/8974&quot;&gt;#8974&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add user possibility to skip the evaluation of a certain websocket extensions (&lt;a href=&quot;https://github.com/netty/netty/pull/8910&quot;&gt;#8910&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t try to put back MemoryRegionCache.Entry objects into the Recycler when recycled because of a finalizer (&lt;a href=&quot;https://github.com/netty/netty/pull/8955&quot;&gt;#8955&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix possible ByteBuf leak when CompositeByteBuf is resized (&lt;a href=&quot;https://github.com/netty/netty/pull/8946&quot;&gt;#8946&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to automatically trim the PoolThreadCache in a timely interval (&lt;a href=&quot;https://github.com/netty/netty/pull/8941&quot;&gt;#8941&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support ALLOW_HALF_CLOSURE channel option on Unix domain socket. (&lt;a href=&quot;https://github.com/netty/netty/pull/8932&quot;&gt;#8932&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly produce ssl alert when certificate validation fails on the client-side when using native SSL implementation (&lt;a href=&quot;https://github.com/netty/netty/pull/8949&quot;&gt;#8949&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix HttpUtil.isKeepAlive to behave correctly when Connection is a comma separated list defect (&lt;a href=&quot;https://github.com/netty/netty/pull/8924&quot;&gt;#8924&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for &lt;a href=&quot;https://github.com/netty/netty/milestone/208?closed=1&quot;&gt;4.1.35.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Notes about new features / improvements&lt;/h1&gt;

&lt;p&gt;This section contains some details about some changes that deserve a bit more attentions. Please check the related PRs for even more details.&lt;/p&gt;

&lt;h2&gt;Offload various handshake related operations from the EventLoop&lt;/h2&gt;

&lt;p&gt;This release added various features related to offload handshake related operations from the EventLoop when netty-tcnative-boringssl-static is used. This can be very helpfully if you need to do any blocking operation in your &lt;code&gt;KeyManager&lt;/code&gt; or &lt;code&gt;TrustManager&lt;/code&gt; implementation. As these are still considered as &quot;experimental&quot; as these were just added you explicit need to enable the offloading via &lt;code&gt;-Dio.netty.handler.ssl.openssl.useTasks=true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Beside this you will need to use the &lt;code&gt;SslContext&lt;/code&gt; methods that take another Executor in its parameters.&lt;/p&gt;

&lt;p&gt;Related PRs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow to offload / customize key signing operations when using BoringSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/8943&quot;&gt;#8943&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to offload certificate validation when using BoringSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/8974&quot;&gt;#8974&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Offload key signing operations&lt;/h2&gt;

&lt;p&gt;When using netty-tcnative-boringssl-static it is now possible to offload the key-signing completely (a.k.a keyless SSL). This can be done by implementations &lt;code&gt;OpenSslPrivateKeyMethod&lt;/code&gt; and set your implementation via &lt;code&gt;ReferenceCountedOpenSslContext.setPrivateKeyMethod(...)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please note that this feature is still considered experimental and so is marked with &lt;code&gt;@UnstableApi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details see (&lt;a href=&quot;https://github.com/netty/netty/pull/8943&quot;&gt;#8943&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;Performance improvements when using BoringSSL&lt;/h2&gt;

&lt;p&gt;We now use &lt;a href=&quot;https://boringssl.googlesource.com/boringssl/+/chromium-stable/PORTING.md#crypto_buffer&quot;&gt;CRYPTO_BUFFER&lt;/a&gt; when netty-tcnative-boringssl-static is used which allows us to remove the overhead of multiple parsing operations related to the certificate chain.&lt;/p&gt;

&lt;p&gt;For more details see (&lt;a href=&quot;https://github.com/netty/netty-tcnative/pull/445&quot;&gt;#455&lt;/a&gt;).&lt;/p&gt;

&lt;h1&gt;New Team Members&lt;/h1&gt;

&lt;p&gt;I am happy to announce that &lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt; and &lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt; were added to the Netty Team to recognize all the hard and amazing work both of them did in the past. Congratulations to both!&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BELUGABEHR&quot;&gt;@BELUGABEHR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/daschl&quot;&gt;@daschl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eolivelli&quot;&gt;@eolivelli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fzakaria&quot;&gt;@fzakaria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gfYaya&quot;&gt;@gfYaya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kachayev&quot;&gt;@kachayev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kwart&quot;&gt;@kwart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lh44&quot;&gt;@lh44&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/liuhaozzu&quot;&gt;@liuhaozzu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/magnus-gustafsson&quot;&gt;@magnus-gustafsson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Mr00Anderson&quot;&gt;@Mr00Anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pcperera&quot;&gt;@pcperera&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/qeesung&quot;&gt;@qeesung&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rkapsi&quot;&gt;@rkapsi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sureshkrishnamoorthy&quot;&gt;@sureshkrishnamoorthy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vikashsingh009&quot;&gt;@vikashsingh009&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vkostyukov&quot;&gt;@vkostyukov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Wingfril&quot;&gt;@Wingfril&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhongl&quot;&gt;@zhongl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2019/03/08/4-1-34-Final.html</id>
<title>Netty 4.1.34.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-03-08T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/03/08/4-1-34-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we announce the release of netty 4.1.34.Final. This release contains mostly bugfixes, some improvements and a few performance wins.

The most important changes in this release are:


HttpContentDecoder must continue read when it did not produce any message and auto read is false (#8922)
Do not use GetPrimitiveArrayCritical(...) due multiple not-fixed bugs related to GCLocker (#8921)
Correctly monkey-patch id also in whe os / arch is used within library name (#8913)
Use maven plugin to prevent API/ABI breakage as part of build process (#8904)
Optimize Hpack and AsciiString hashcode and equals (#8902)
Further reduce ensureAccessible() overhead (#8895)
DefaultFileRegion.transferTo with invalid count may cause busy-spin (#8885)
Don't deregister Channel...
</summary>
<content type="html">
&lt;p&gt;Today we announce the release of netty 4.1.34.Final. This release contains mostly bugfixes, some improvements and a few performance wins.&lt;/p&gt;

&lt;p&gt;The most important changes in this release are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HttpContentDecoder must continue read when it did not produce any message and auto read is false (&lt;a href=&quot;https://github.com/netty/netty/pull/8922&quot;&gt;#8922&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not use GetPrimitiveArrayCritical(...) due multiple not-fixed bugs related to GCLocker (&lt;a href=&quot;https://github.com/netty/netty/pull/8921&quot;&gt;#8921&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly monkey-patch id also in whe os / arch is used within library name (&lt;a href=&quot;https://github.com/netty/netty/pull/8913&quot;&gt;#8913&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use maven plugin to prevent API/ABI breakage as part of build process (&lt;a href=&quot;https://github.com/netty/netty/pull/8904&quot;&gt;#8904&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Optimize Hpack and AsciiString hashcode and equals (&lt;a href=&quot;https://github.com/netty/netty/pull/8902&quot;&gt;#8902&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Further reduce ensureAccessible() overhead (&lt;a href=&quot;https://github.com/netty/netty/pull/8895&quot;&gt;#8895&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DefaultFileRegion.transferTo with invalid count may cause busy-spin (&lt;a href=&quot;https://github.com/netty/netty/pull/8885&quot;&gt;#8885&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t deregister Channel as part of closing it when using native kqueue transport (&lt;a href=&quot;https://github.com/netty/netty/pull/8881&quot;&gt;#8881&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Close consumed inputs in ChunkedWriteHandler (&lt;a href=&quot;https://github.com/netty/netty/pull/8876&quot;&gt;#8876&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Include the original Exception that caused the Channel to be closed in the ClosedChannelException (&lt;a href=&quot;https://github.com/netty/netty/pull/8863&quot;&gt;#8863&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix h2c upgrade failure when multiple connection headers are present in upgrade request (&lt;a href=&quot;https://github.com/netty/netty/pull/8848&quot;&gt;#8848&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support using an Executor to offload blocking / long-running tasks when processing TLS / SSL via the SslHandler (&lt;a href=&quot;https://github.com/netty/netty/pull/8847&quot;&gt;#8847&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reduce direct memory overhead per EpollEventLoop when using EpollDatagramChannel (&lt;a href=&quot;https://github.com/netty/netty/pull/8825&quot;&gt;#8825&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reduce GC produced by native DatagramChannel implementations when in connected mode  (&lt;a href=&quot;https://github.com/netty/netty/pull/8806&quot;&gt;#8806&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HttpObjectDecoder ignores HTTP trailer header when empty line is received in seperate ByteBuf (&lt;a href=&quot;https://github.com/netty/netty/pull/8799&quot;&gt;#8799&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Minimize memory footprint for AbstractChannelHandlerContext for handlers that execute in the EventExecutor (&lt;a href=&quot;https://github.com/netty/netty/pull/8786&quot;&gt;#8786&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix three bugs in CompositeByteBuf (&lt;a href=&quot;https://github.com/netty/netty/pull/8773&quot;&gt;#8773&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for  &lt;a href=&quot;https://github.com/netty/netty/milestone/207?closed=1&quot;&gt;4.1.34.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aimozg&quot;&gt;@aimozg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/andreisilviudragnea&quot;&gt;@andreisilviudragnea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artem-m&quot;&gt;@artem-m&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/arukshani&quot;&gt;@arukshani&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/georgeOsdDev&quot;&gt;@georgeOsdDev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kachayev&quot;&gt;@kachayev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kezhenxu94&quot;&gt;@kezhenxu94&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KowalczykBartek&quot;&gt;@KowalczykBartek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lutovich&quot;&gt;@lutovich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/michaelandrepearce&quot;&gt;@michaelandrepearce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rkapsi&quot;&gt;@rkapsi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thinkerou&quot;&gt;@thinkerou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/violetagg&quot;&gt;@violetagg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhengdehui&quot;&gt;@zhengdehui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2019/01/21/4-1-33-Final.html</id>
<title>Netty 4.1.33.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2019-01-21T00:00:00+00:00</published>
<link href="http://netty.io/news/2019/01/21/4-1-33-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we announce the release of netty 4.1.33.Final as the first release in 2019. This release contains mostly bugfixes, some improvements and a few performance wins.


Allowed IP_FREEBIND option for UDP epoll (#8727)
Ensure FlowControlled data frames will be correctly removed from the flow-controller when a write error happens. (#8726)
Only handle NXDOMAIN as failure when nameserver is authoritive or no the other nameservers are left (#8731)
Correctly buffer multiple outbound streams if needed. (#8694)
Only call handlerRemoved(...) if handlerAdded(...) was called during adding the handler to the pipeline (#8684)
Correctly detect and handle CNAME loops. (#8691)
Fix ClassCastException and native crash when using kqueue transport (#8665)
Support...
</summary>
<content type="html">
&lt;p&gt;Today we announce the release of netty 4.1.33.Final as the first release in 2019. This release contains mostly bugfixes, some improvements and a few performance wins.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allowed IP_FREEBIND option for UDP epoll (&lt;a href=&quot;https://github.com/netty/netty/pull/8727&quot;&gt;#8727&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure FlowControlled data frames will be correctly removed from the flow-controller when a write error happens. (&lt;a href=&quot;https://github.com/netty/netty/pull/8726&quot;&gt;#8726&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only handle NXDOMAIN as failure when nameserver is authoritive or no the other nameservers are left (&lt;a href=&quot;https://github.com/netty/netty/pull/8731&quot;&gt;#8731&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly buffer multiple outbound streams if needed. (&lt;a href=&quot;https://github.com/netty/netty/pull/8694&quot;&gt;#8694&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only call handlerRemoved(...) if handlerAdded(...) was called during adding the handler to the pipeline (&lt;a href=&quot;https://github.com/netty/netty/pull/8684&quot;&gt;#8684&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly detect and handle CNAME loops. (&lt;a href=&quot;https://github.com/netty/netty/pull/8691&quot;&gt;#8691&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix ClassCastException and native crash when using kqueue transport (&lt;a href=&quot;https://github.com/netty/netty/pull/8665&quot;&gt;#8665&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support 1012, 1013 and 1014 WebSocket close status code (&lt;a href=&quot;https://github.com/netty/netty/pull/8664&quot;&gt;#8664&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;NoClassDefFoundError on Android platform when try to use DefaultDnsServerAddressStreamProvider (&lt;a href=&quot;https://github.com/netty/netty/pull/8656&quot;&gt;#8656&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ChannelInitializer may be invoked multiple times when used with custom EventExecutor (&lt;a href=&quot;https://github.com/netty/netty/pull/8620&quot;&gt;#8620&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Respect ctx.read() calls while processing reads for the child channels when using Http2MultiplexCodec (&lt;a href=&quot;https://github.com/netty/netty/pull/8617&quot;&gt;#8617&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Loosen bounds check on CompositeByteBuf&#39;s maxNumComponents (&lt;a href=&quot;https://github.com/netty/netty/pull/8621&quot;&gt;#8621&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Provide a way to cache the internal nioBuffer of the PooledByteBuffer to reduce GC (&lt;a href=&quot;https://github.com/netty/netty/pull/8603&quot;&gt;#8603&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for  &lt;a href=&quot;https://github.com/netty/netty/milestone/206?closed=1&quot;&gt;4.1.33.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alex-vas&quot;&gt;@alex-vas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angn&quot;&gt;@angn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/atcurtis&quot;&gt;@atcurtis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cooooderr&quot;&gt;@cooooderr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Feri73&quot;&gt;@Feri73&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jchambers&quot;&gt;@jchambers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnjaylward&quot;&gt;@johnjaylward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kachayev&quot;&gt;@kachayev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kashike&quot;&gt;@kashike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kezhenxu94&quot;&gt;@kezhenxu94&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KowalczykBartek&quot;&gt;@KowalczykBartek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lewisd32&quot;&gt;@lewisd32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/madgnome&quot;&gt;@madgnome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mingyu89&quot;&gt;@mingyu89&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mrniko&quot;&gt;@mrniko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nicktrav&quot;&gt;@nicktrav&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paulvi&quot;&gt;@paulvi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/riyafa&quot;&gt;@riyafa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rkapsi&quot;&gt;@rkapsi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rschmitt&quot;&gt;@rschmitt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slggamerTrue&quot;&gt;@slggamerTrue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sshntt&quot;&gt;@sshntt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tomerd&quot;&gt;@tomerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yogeshvedpathak&quot;&gt;@yogeshvedpathak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yulianoifa-mobius&quot;&gt;@yulianoifa-mobius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zunpiau&quot;&gt;@zunpiau&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2018/11/29/4-1-32-Final.html</id>
<title>Netty 4.1.32.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2018-11-29T00:00:00+00:00</published>
<link href="http://netty.io/news/2018/11/29/4-1-32-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we announce the release of netty 4.1.32.Final. This release contains mostly bugfixes, some improvements and a few performance wins. Together with this you should also update to netty-tcnative 2.0.20.Final.

Please also check the Important notes section below before upgrading.

The most important changes are:


PlatformDependent.maxDirectMemory() must respect io.netty.maxDirectMemory (#8452)
Don't swallow intermediate write failures in MessageToMessageEncoder (#8454)
Make Http2StreamFrameToHttpObjectCodec truly @Sharable (#8482)
Fix incorrect sizing of temp byte arrays in (Unsafe)ByteBufUtil (#8484)
SSLHandler may throw AssertionError if writes occur before channelActive (#8486)
Handshake timeout may never be scheduled if handshake starts via a flush (#8494)
Defer HTTP/2 stream transition state on initial write until headers are written (#8471)
Correctly...
</summary>
<content type="html">
&lt;p&gt;Today we announce the release of netty 4.1.32.Final. This release contains mostly bugfixes, some improvements and a few performance wins. Together with this you should also update to netty-tcnative 2.0.20.Final.&lt;/p&gt;

&lt;p&gt;Please also check the &lt;code&gt;Important notes&lt;/code&gt; section below before upgrading.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PlatformDependent.maxDirectMemory() must respect io.netty.maxDirectMemory (&lt;a href=&quot;https://github.com/netty/netty/pull/8452&quot;&gt;#8452&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t swallow intermediate write failures in MessageToMessageEncoder (&lt;a href=&quot;https://github.com/netty/netty/pull/8454&quot;&gt;#8454&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make Http2StreamFrameToHttpObjectCodec truly @Sharable (&lt;a href=&quot;https://github.com/netty/netty/pull/8482&quot;&gt;#8482&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix incorrect sizing of temp byte arrays in (Unsafe)ByteBufUtil (&lt;a href=&quot;https://github.com/netty/netty/pull/8484&quot;&gt;#8484&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SSLHandler may throw AssertionError if writes occur before channelActive (&lt;a href=&quot;https://github.com/netty/netty/pull/8486&quot;&gt;#8486&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Handshake timeout may never be scheduled if handshake starts via a flush (&lt;a href=&quot;https://github.com/netty/netty/pull/8494&quot;&gt;#8494&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Defer HTTP/2 stream transition state on initial write until headers are written (&lt;a href=&quot;https://github.com/netty/netty/pull/8471&quot;&gt;#8471&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly convert between openssl / boringssl and java cipher names when using TLSv1.3 (&lt;a href=&quot;https://github.com/netty/netty/pull/8485&quot;&gt;#8485&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly convert supported signature algorithms when using BoringSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/8481&quot;&gt;#8481&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Nio|Epoll|KqueueEventLoop task execution might throw UnsupportedOperationException (&lt;a href=&quot;https://github.com/netty/netty/pull/8476&quot;&gt;#8476&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Return the correct pointer from ReferenceCountedOpenSslContext.context() and sslCtxPointer() (&lt;a href=&quot;https://github.com/netty/netty/pull/8562&quot;&gt;#8562&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ReferenceCountedOpenSslEngine SSLSession.getLocalCertificates() / getLocalPrincipial() did not work when KeyManagerFactory was used (&lt;a href=&quot;https://github.com/netty/netty/pull/8560&quot;&gt;#8560&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AbstractChannel swallows potential errors by ignoring throwable (&lt;a href=&quot;https://github.com/netty/netty/pull/8499&quot;&gt;#8499&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow adjusting of lead detection sampling interval (&lt;a href=&quot;https://github.com/netty/netty/pull/8568&quot;&gt;#8568&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Recover from Selector IOException (&lt;a href=&quot;https://github.com/netty/netty/pull/8569&quot;&gt;#8569&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Combine flushes in DnsNameResolver to allow usage of sendmmsg to reduce syscall costs (&lt;a href=&quot;https://github.com/netty/netty/pull/8470&quot;&gt;#8470&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mark OIO based transports as deprecated as preparation for removal in Netty 5 (&lt;a href=&quot;https://github.com/netty/netty/pull/8579&quot;&gt;#8579&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;LocationAwareSlf4jLogger does not correctly format log message (&lt;a href=&quot;https://github.com/netty/netty/pull/8595&quot;&gt;#8595&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix offset calculation in PooledByteBufAllocator when used (&lt;a href=&quot;https://github.com/netty/netty/pull/8597&quot;&gt;#8597&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Harden ref-counting concurrency semantics (&lt;a href=&quot;https://github.com/netty/netty/pull/8583&quot;&gt;#8583&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for  &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.32.Final&quot;&gt;4.1.32.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;p&gt;This section will give some more details about more important changes that either change behaviour or add support for some important feature.&lt;/p&gt;

&lt;h2&gt;Deprecation of OIO and &quot;sub-transports&quot;&lt;/h2&gt;

&lt;p&gt;In preparation of Netty 5 we marked the OIO transpor (and any sub-transports that depend on it) as &lt;code&gt;@deprecated&lt;/code&gt;. These will be removed in netty 5 and everyone should switch to either the NIO transport or one of the native transports, EPOLL or KQueue. For more details see &lt;a href=&quot;https://github.com/netty/netty/pull/8579&quot;&gt;#8579&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Andremoniy&quot;&gt;@Andremoniy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carryxyh&quot;&gt;@carryxyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Feri73&quot;&gt;@Feri73&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gartmann&quot;&gt;@gartmann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/IgorAlelekov&quot;&gt;@IgorAlelekov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JStroom&quot;&gt;@JStroom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/luastar&quot;&gt;@luastar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/merlimat&quot;&gt;@merlimat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rkapsi&quot;&gt;@rkapsi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sullis&quot;&gt;@sullis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/strongmanwj&quot;&gt;@strongmanwj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tbrooks8&quot;&gt;@tbrooks8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tjake&quot;&gt;@tjake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/uxgnoz&quot;&gt;@uxgnoz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vietj&quot;&gt;@vietj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2018/10/30/4-1-31-Final.html</id>
<title>Netty 4.1.31.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2018-10-30T00:00:00+00:00</published>
<link href="http://netty.io/news/2018/10/30/4-1-31-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we announce the release of netty 4.1.31.Final. This release contains bugfixes, some improvements and performance wins. Beside this one of the more interesting things included is the support of TLSv1.3 (either via Java 11 or netty-tcnative / netty-tcnative-boringssl-static).

Please also check the Important notes section below before upgrading.

The most important changes are:


Fix leak and corruption bugs in CompositeByteBuf (#8438)
Optimize AbstractByteBuf.getCharSequence() in US_ASCII case (#8392)
(fix) incorrect reachability assumption in ResourceLeakDetector (#8410)
Correctly detect if KeyManagerFactory is supported by OpenSSL even when sun.security.x509.* can not be accessed and bouncycastle is not on the classpath. (#8415)
Reduce overhead by ByteBufUtil.decodeString(...) which is used by AbstractByteBuf.toString(...)...
</summary>
<content type="html">
&lt;p&gt;Today we announce the release of netty 4.1.31.Final. This release contains bugfixes, some improvements and performance wins. Beside this one of the more interesting things included is the support of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8446.txt&quot;&gt;TLSv1.3&lt;/a&gt; (either via Java 11 or netty-tcnative / netty-tcnative-boringssl-static).&lt;/p&gt;

&lt;p&gt;Please also check the &lt;code&gt;Important notes&lt;/code&gt; section below before upgrading.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix leak and corruption bugs in CompositeByteBuf (&lt;a href=&quot;https://github.com/netty/netty/pull/8438&quot;&gt;#8438&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Optimize AbstractByteBuf.getCharSequence() in US_ASCII case (&lt;a href=&quot;https://github.com/netty/netty/pull/8392&quot;&gt;#8392&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(fix) incorrect reachability assumption in ResourceLeakDetector (&lt;a href=&quot;https://github.com/netty/netty/pull/8410&quot;&gt;#8410&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly detect if KeyManagerFactory is supported by OpenSSL even when sun.security.x509.* can not be accessed and bouncycastle is not on the classpath. (&lt;a href=&quot;https://github.com/netty/netty/pull/8415&quot;&gt;#8415&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reduce overhead by ByteBufUtil.decodeString(...) which is used by &lt;code&gt;AbstractByteBuf.toString(...)&lt;/code&gt; and &lt;code&gt;AbstractByteBuf.getCharSequence(...)&lt;/code&gt; (&lt;a href=&quot;https://github.com/netty/netty/pull/8388&quot;&gt;#8388&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;CompositeByteBuf.decompose(...) does not correctly slice content (&lt;a href=&quot;https://github.com/netty/netty/pull/8403&quot;&gt;#8403&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to use TLSv1.3 with netty-tcnative withe java versions prior to 11 (&lt;a href=&quot;https://github.com/netty/netty/pull/8394&quot;&gt;#8394&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for TLSv1.3 &lt;a href=&quot;https://github.com/netty/netty/pull/8293&quot;&gt;#8293&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for boringssl and TLSv1.3 (&lt;a href=&quot;https://github.com/netty/netty/pull/8412&quot;&gt;#8412&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure OpenSslEngine will not try to call SSL_free multiple times even when constructor throws &lt;a href=&quot;https://github.com/netty/netty/pull/8399&quot;&gt;#8399&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add full JdkSslContext public constructor &lt;a href=&quot;https://github.com/netty/netty/pull/8389&quot;&gt;#8389&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Prevent NPE when attempting to set client key material with no alias &lt;a href=&quot;https://github.com/netty/netty/pull/8378&quot;&gt;#8378&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;epoll_wait produces an EINVAL error since 4.1.30 &lt;a href=&quot;https://github.com/netty/netty/pull/#8350&quot;&gt;#8350&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly parse /etc/resolv.conf when contain multiple entries for searchdomain &lt;a href=&quot;https://github.com/netty/netty/pull/8351&quot;&gt;#8351&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly decrement pending bytes when submitting AbstractWriteTask fails &lt;a href=&quot;https://github.com/netty/netty/pull/8349&quot;&gt;#8349&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix SelectableChannel support in NioEventLoop &lt;a href=&quot;https://github.com/netty/netty/pull/8344&quot;&gt;#8344&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added option to do busy-wait on epoll &lt;a href=&quot;https://github.com/netty/netty/pull/8267&quot;&gt;#8267&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure X509KeyManager methods are called on the correct time when using server-side and support more methods of ExtendedSSLSession &lt;a href=&quot;https://github.com/netty/netty/pull/8283&quot;&gt;#8283&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do the same extended checks as the JDK when a X509TrustManager is used with the OpenSSL provider &lt;a href=&quot;https://github.com/netty/netty/pull/8307&quot;&gt;#8307&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for  &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.31.Final&quot;&gt;4.1.31.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;p&gt;This section will give some more details about more important changes that either change behaviour or add support for some important feature.&lt;/p&gt;

&lt;h2&gt;LeakDetector false-positives&lt;/h2&gt;

&lt;p&gt;This releases fixes a bug in &lt;code&gt;LeakDetector&lt;/code&gt; which could cause false-positives in some cases when the JIT would re-order some operations and the GC would collect the reference in the same time when executing these. If you see any &lt;code&gt;LEAK:&lt;/code&gt; reports that make no sense to you it may be caused by the bug that was present in prior releases. See (&lt;a href=&quot;https://github.com/netty/netty/pull/8410&quot;&gt;#8410&lt;/a&gt;) for more details.&lt;/p&gt;

&lt;h2&gt;SslProvider.OPENSSL / SslProvider.OPENSSL_REFCNT and invalid ciphersuites&lt;/h2&gt;

&lt;p&gt;Prior to this release when using &lt;code&gt;SslProvider.OPENSSL&lt;/code&gt; or &lt;code&gt;SslProvider.OPENSSL_REFCNT&lt;/code&gt; and define the used ciphers by hand when configure the &lt;code&gt;SslContextBuilder&lt;/code&gt; we just ignored not supported ciphers. This was changed in this release and from now on we will throw an exception. This is more consistent with what is done when using &lt;code&gt;SslProvider.JDK&lt;/code&gt; and more correct. That said you may
need to adjust your ciphers depending what ciphers you configured before. See (&lt;a href=&quot;https://github.com/netty/netty/pull/8443&quot;&gt;#8443&lt;/a&gt;) for more details.&lt;/p&gt;

&lt;h2&gt;TLSv1.3 support&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8446.txt&quot;&gt;TLSv1.3&lt;/a&gt; was recently finalized as a standard. In this release we add support for it in various ways, when either of these is true:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using Java11 or later&lt;/li&gt;
&lt;li&gt;using netty-tcnative (build against OpenSSL 1.1.1+) and Java8+&lt;/li&gt;
&lt;li&gt;using netty-tcnative-boringssl-static and Java8+.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That said TLSv1.3 is &lt;strong&gt;not enabled by default&lt;/strong&gt; so if you want to use it you will need to explicit enable it by using &lt;code&gt;TLSv1.3&lt;/code&gt; when configure your &lt;code&gt;SslContextBuilder&lt;/code&gt; (like for example):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;SslContextBuilder.forClient().protocols(&quot;TLSv1.3&quot;) ....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be able to do this for our native implementations you also need to ensure you use &lt;a href=&quot;https://repo1.maven.org/maven2/io/netty/netty-tcnative/2.0.19.Final/&quot;&gt;netty-tcnative 2.0.19&lt;/a&gt; (compiled against OpenSSL 1.1.1+) or &lt;a href=&quot;https://repo1.maven.org/maven2/io/netty/netty-tcnative-boringssl-static/2.0.19.Final/&quot;&gt;netty-tcnative-boringssl-static 2.0.19&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/almson&quot;&gt;@almson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/atcurtis&quot;&gt;@atcurtis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/caorong&quot;&gt;@caorong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/doom369&quot;&gt;@doom369&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnou&quot;&gt;@johnou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/langchristian96&quot;&gt;@langchristian96&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/madgnome&quot;&gt;@madgnome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/merlimat&quot;&gt;@merlimat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mosesn&quot;&gt;@mosesn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rkapsi&quot;&gt;@rkapsi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/simonbasle&quot;&gt;@simonbasle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slandelle&quot;&gt;@slandelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vietj&quot;&gt;@vietj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2018/09/28/4-1-30-Final.html</id>
<title>Netty 4.1.30.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2018-09-28T00:00:00+00:00</published>
<link href="http://netty.io/news/2018/09/28/4-1-30-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we announce the release of netty 4.1.30.Final. This release contains bugfixes, some improvements and a huge performance gain when doing ByteBuf operations. Beside this we tested this release on Java8, 9, 10, 11 and 12 EA.

The most important changes are:


Add cache for CNAME mappings resolved during lookup of DNS entries. (#8314)
Ensure ByteToMessageDecoder.Cumulator implementations always release. (#8325)
Fixed illegal reflective access by not relying on a sun.net.dns class. (#8319)
Don't re-arm timerfd each epoll_wait (#7816)
Allow to configure socket option SO_BUSY_POLL (#8268)
Use a non-volatile read for ensureAccessible() whenever possible to reduce overhead and allow better inlining. (#8266)
Correctly reset offset when fail lazy because...
</summary>
<content type="html">
&lt;p&gt;Today we announce the release of netty 4.1.30.Final. This release contains bugfixes, some improvements and a huge performance gain when doing &lt;code&gt;ByteBuf&lt;/code&gt; operations. Beside this we tested this release on Java8, 9, 10, 11 and 12 EA.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add cache for CNAME mappings resolved during lookup of DNS entries. (&lt;a href=&quot;https://github.com/netty/netty/pull/8314&quot;&gt;#8314&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure ByteToMessageDecoder.Cumulator implementations always release. (&lt;a href=&quot;https://github.com/netty/netty/pull/8325&quot;&gt;#8325&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed illegal reflective access by not relying on a sun.net.dns class. (&lt;a href=&quot;https://github.com/netty/netty/pull/8319&quot;&gt;#8319&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Don&#39;t re-arm timerfd each epoll_wait (&lt;a href=&quot;https://github.com/netty/netty/pull/7816&quot;&gt;#7816&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to configure socket option SO_BUSY_POLL (&lt;a href=&quot;https://github.com/netty/netty/pull/8268&quot;&gt;#8268&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use a non-volatile read for ensureAccessible() whenever possible to reduce overhead and allow better inlining. (&lt;a href=&quot;https://github.com/netty/netty/pull/8266&quot;&gt;#8266&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly reset offset when fail lazy because of too long frame (&lt;a href=&quot;https://github.com/netty/netty/pull/8257&quot;&gt;#8257&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not fail on runtime when an older version of Log4J2 is on the classpath (&lt;a href=&quot;https://github.com/netty/netty/pull/8240&quot;&gt;#8240&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;TCN is failing with error:14179044:SSL routines:tls_construct_server_key_exchange:internal error (&lt;a href=&quot;https://github.com/netty/netty/issues/8165&quot;&gt;#8165&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix race condition in the NonStickyEventExecutorGroup (&lt;a href=&quot;https://github.com/netty/netty/issues/8232&quot;&gt;#8232&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to use native transports when sun.misc.Unsafe is not present (&lt;a href=&quot;https://github.com/netty/netty/issues/8231&quot;&gt;#8231&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;CleanerJava9 should be able to do its job even with a SecurityManager installed (&lt;a href=&quot;https://github.com/netty/netty/issues/8204&quot;&gt;#8204&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for  &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.30.Final&quot;&gt;4.1.30.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;&lt;code&gt;ByteBuf&lt;/code&gt; performance improvements&lt;/h2&gt;

&lt;p&gt;By relaxing the access mode for reference checks during operations in (&lt;a href=&quot;https://github.com/netty/netty/pull/8266&quot;&gt;#8266&lt;/a&gt;) we were able to see a 25 % performance win when doing chained operations on the &lt;code&gt;ByteBuf&lt;/code&gt;. The gains may even be higher depending on how many operations you perform in your application in the same method body.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;DnsNameResolver&lt;/code&gt; improvements&lt;/h2&gt;

&lt;p&gt;To furthermore improve lookup times we added a new &lt;code&gt;DnsCnameCache&lt;/code&gt; to the &lt;code&gt;DnsNameResolver&lt;/code&gt; in (&lt;a href=&quot;https://github.com/netty/netty/pull/8314&quot;&gt;#8314&lt;/a&gt;). This will allow to not only cache the &quot;end results&quot; but also the &lt;code&gt;CNAME&lt;/code&gt; records in between.&lt;/p&gt;

&lt;h2&gt;Java9 and later&lt;/h2&gt;

&lt;p&gt;We did various more improvements to ensure Netty can be used without any warning on Java9 and later. If you see any more &quot;illegal access&quot; warning please let us know so we can fix these.&lt;/p&gt;

&lt;p&gt;Our CI runs netty builds on Java8, 9, 10, 11 and 12EA now.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amizurov&quot;&gt;@amizurov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carl-mastrangelo&quot;&gt;@carl-mastrangelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chijoungso&quot;&gt;@chijoungso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chtyim&quot;&gt;@chtyim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/franz1981&quot;&gt;@franz1981&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hc-codersatlas&quot;&gt;@hc-codersatlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ibm701&quot;&gt;@ibm701&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mattayres&quot;&gt;@mattayres&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/merlimat&quot;&gt;@merlimat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MikeBlink&quot;&gt;@MikeBlink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/monkey1993&quot;&gt;@monkey1993&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mosesn&quot;&gt;@mosesn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ramtech123&quot;&gt;@ramtech123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rkapsi&quot;&gt;@rkapsi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stateIs0&quot;&gt;@stateIs0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Vampire&quot;&gt;@Vampire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhaojigang&quot;&gt;@zhaojigang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2018/08/24/4-1-29-Final.html</id>
<title>Netty 4.1.29.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2018-08-24T00:00:00+00:00</published>
<link href="http://netty.io/news/2018/08/24/4-1-29-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we announce the release of netty 4.1.29.Final. This release contains bugfixes and some improvements.

The most important changes are:


Correctly handle DNS redirects for NS servers that have no ADDITIONAL records (#8177)
Ensure multiple shaded version of the same netty artifact can be loaded as long as the shaded prefix is different (#8207)
Set initial SNI hostname when creating an OpenSSL engine in client mode (#8178)
DnsNameResolver hangs if search domain results in invalid hostname (#8180)
Workaround JDK bug that will cause an AssertionError when calling ServerSocketChannel.config().getOptions() (#8183)
Ensure NIO transport can be used on Java6 again (#8168)
Lazily initialize NativeDatagramPacketArray and IovArray in EpollEventLoop (#8160)



For the...
</summary>
<content type="html">
&lt;p&gt;Today we announce the release of netty 4.1.29.Final. This release contains bugfixes and some improvements.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Correctly handle DNS redirects for NS servers that have no ADDITIONAL records (&lt;a href=&quot;https://github.com/netty/netty/pull/8177&quot;&gt;#8177&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure multiple shaded version of the same netty artifact can be loaded as long as the shaded prefix is different (&lt;a href=&quot;https://github.com/netty/netty/pull/8207&quot;&gt;#8207&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Set initial SNI hostname when creating an OpenSSL engine in client mode (&lt;a href=&quot;https://github.com/netty/netty/pull/8178&quot;&gt;#8178&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DnsNameResolver hangs if search domain results in invalid hostname (&lt;a href=&quot;https://github.com/netty/netty/pull/8180&quot;&gt;#8180&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Workaround JDK bug that will cause an AssertionError when calling ServerSocketChannel.config().getOptions() (&lt;a href=&quot;https://github.com/netty/netty/pull/8183&quot;&gt;#8183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensure NIO transport can be used on Java6 again (&lt;a href=&quot;https://github.com/netty/netty/pull/8168&quot;&gt;#8168&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Lazily initialize NativeDatagramPacketArray and IovArray in EpollEventLoop (&lt;a href=&quot;https://github.com/netty/netty/pull/8160&quot;&gt;#8160&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for  &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.29.Final&quot;&gt;4.1.29.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Important notes&lt;/h1&gt;

&lt;h2&gt;DnsNameResolver API breakage&lt;/h2&gt;

&lt;p&gt;We had to slightly break the DnsNameResolver API to fix (&lt;a href=&quot;https://github.com/netty/netty/pull/8177&quot;&gt;#8177&lt;/a&gt;). Lucky enough changes are very slim you are affect but please read on if you use the resolver.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DnsNameResolver.authoritativeDnsServerCache()&lt;/code&gt; will now return an instance of &lt;code&gt;AuthoritativeDnsServerCache&lt;/code&gt; and the previous used &lt;code&gt;DnsNameResolver.uncachedRedirectDnsServerStream(...)&lt;/code&gt; was replaced by &lt;code&gt;newRedirectDnsServerStream(...)&lt;/code&gt; (which is protected).&lt;/p&gt;

&lt;h2&gt;Memory usage of the native epoll transport&lt;/h2&gt;

&lt;p&gt;We reduced again the memory usage of the native epoll transport by change some code to init memory lazily. For more details check (&lt;a href=&quot;https://github.com/netty/netty/pull/8160&quot;&gt;#8160&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;Shading of native transports and netty-tcnative&lt;/h2&gt;

&lt;p&gt;It should now be possible to shade multiple versions of the native transports of netty and netty-tcnative and use them in the same JVM without any problems. As netty is used in a lot of different projects / libraries this may be useful for you. For any example how you would do shading / use shading check out &lt;a href=&quot;https://github.com/netty/netty/tree/netty-4.1.29.Final/testsuite-shading&quot;&gt;testsuite-shading&lt;/a&gt; which uses maven but the same steps should apply for other build tools as well.
For more details see (&lt;a href=&quot;https://github.com/netty/netty/issues/7272&quot;&gt;#7272&lt;/a&gt;), which has all the related PRs linked.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hc-codersatlas&quot;&gt;@hc-codersatlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jianglai&quot;&gt;@jianglai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/koo-taejin&quot;&gt;@koo-taejin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/meshcow&quot;&gt;@meshcow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nitsanw&quot;&gt;@nitsanw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rkapsi&quot;&gt;@rkapsi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/steveniemitz&quot;&gt;@steveniemitz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vincent-grosbois&quot;&gt;@vincent-grosbois&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vkostyukov&quot;&gt;@vkostyukov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Wingfril&quot;&gt;@Wingfril&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2018/07/27/4-1-28-Final.html</id>
<title>Netty 4.1.28.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2018-07-27T00:00:00+00:00</published>
<link href="http://netty.io/news/2018/07/27/4-1-28-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Today we announce the release of netty 4.1.28.Final. This release contains bugfixes and add support to use any supported SocketOption by the JDK. Please upgrade once you have the chance.

The most important changes are:


Support the usage of SocketOption when nio is used and the java version >= 7 (#8085)
Leak detection combined with composite buffers results in incorrectly handled writerIndex when calling ByteBufUtil.writeAscii/writeUtf8 (#8153)
Allow to validate sni hostname with underscore (#8150)
HTTP/2 child channel read cycle doesn't respect RecvByteBufAllocator and may drop data if stream closed while auto read is off (#8147)



For the details and all changes, please browse our issue tracker...
</summary>
<content type="html">
&lt;p&gt;Today we announce the release of netty 4.1.28.Final. This release contains bugfixes and add support to use any supported SocketOption by the JDK. Please upgrade once you have the chance.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support the usage of SocketOption when nio is used and the java version &amp;gt;= 7 (&lt;a href=&quot;https://github.com/netty/netty/pull/8085&quot;&gt;#8085&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Leak detection combined with composite buffers results in incorrectly handled writerIndex when calling ByteBufUtil.writeAscii/writeUtf8 (&lt;a href=&quot;https://github.com/netty/netty/pull/8153&quot;&gt;#8153&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to validate sni hostname with underscore (&lt;a href=&quot;https://github.com/netty/netty/pull/8150&quot;&gt;#8150&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HTTP/2 child channel read cycle doesn&#39;t respect RecvByteBufAllocator and may drop data if stream closed while auto read is off (&lt;a href=&quot;https://github.com/netty/netty/pull/8147&quot;&gt;#8147&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for  &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.28.Final&quot;&gt;4.1.28.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bennett-Lynch&quot;&gt;@Bennett-Lynch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hc-codersatlas&quot;&gt;@hc-codersatlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mosesn&quot;&gt;@mosesn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nitsanw&quot;&gt;@nitsanw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/r9liucc&quot;&gt;@r9liucc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sullis&quot;&gt;@sullis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhaojigang&quot;&gt;@zhaojigang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2018/07/11/4-1-27-Final.html</id>
<title>Netty 4.1.27.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2018-07-11T00:00:00+00:00</published>
<link href="http://netty.io/news/2018/07/11/4-1-27-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
Due some possible regression that could cause an NPE during selecting the keymaterial if the alias is not known when using OpenSSL (and so signal back the wrong alert to the remote peer)  we decided to cut another netty releases. While it was possible to "work around" this regression by using a KeyManagerFactory to configure SslContextBuilder we thought this deserves a fast release.

Beside fixing the above mentioned bug we also fixes a few other small things.

For the details and all changes, please browse our issue tracker for  4.1.27.Final....
</summary>
<content type="html">
&lt;p&gt;Due some possible regression that could cause an NPE during selecting the keymaterial if the alias is not known when using OpenSSL (and so signal back the wrong alert to the remote peer)  we decided to cut another netty releases. While it was possible to &quot;work around&quot; this regression by using a &lt;code&gt;KeyManagerFactory&lt;/code&gt; to configure &lt;code&gt;SslContextBuilder&lt;/code&gt; we thought this deserves a fast release.&lt;/p&gt;

&lt;p&gt;Beside fixing the above mentioned bug we also fixes a few other small things.&lt;/p&gt;

&lt;p&gt;For the details and all changes, please browse our issue tracker for  &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.27.Final&quot;&gt;4.1.27.Final&lt;/a&gt;.&lt;/p&gt;

</content>
</entry>
<entry>
<id>http://netty.io/news/2018/07/10/4-1-26-Final.html</id>
<title>Netty 4.1.26.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2018-07-10T00:00:00+00:00</published>
<link href="http://netty.io/news/2018/07/10/4-1-26-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I'm happy to announce the latest release of the 4.1 series after almost 2 month of hard work.

These release contains bug-fixes, performance enhancements and feature so we encourage everyone to upgrade.

The most important changes are:


Add OpenSslX509KeyManagerFactory which makes it even easier for people get the maximum performance when using OpenSSL / LibreSSL / BoringSSL  with netty (#8084)
Do not log explicit no unsafe, fixes helper method (#8111)
Fix support for shading native libraries which was broken (#8091)
Remove usage of ObjectCleaner (#8064)
Reorder channel state changes in Http2MultiplexCodec child channel (#8070)
Remove id from DnsQueryContextManager whenever the promise is fullfilled (#8058)
HpackDecoder treats invalid pseudo-headers...
</summary>
<content type="html">
&lt;p&gt;I&#39;m happy to announce the latest release of the 4.1 series after almost 2 month of hard work.&lt;/p&gt;

&lt;p&gt;These release contains bug-fixes, performance enhancements and feature so we encourage everyone to upgrade.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add OpenSslX509KeyManagerFactory which makes it even easier for people get the maximum performance when using OpenSSL / LibreSSL / BoringSSL  with netty (&lt;a href=&quot;https://github.com/netty/netty/pull/8084&quot;&gt;#8084&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not log explicit no unsafe, fixes helper method (&lt;a href=&quot;https://github.com/netty/netty/pull/8111&quot;&gt;#8111&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix support for shading native libraries which was broken (&lt;a href=&quot;https://github.com/netty/netty/pull/8091&quot;&gt;#8091&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove usage of ObjectCleaner (&lt;a href=&quot;https://github.com/netty/netty/pull/8064&quot;&gt;#8064&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reorder channel state changes in Http2MultiplexCodec child channel (&lt;a href=&quot;https://github.com/netty/netty/pull/8070&quot;&gt;#8070&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove id from DnsQueryContextManager whenever the promise is fullfilled (&lt;a href=&quot;https://github.com/netty/netty/pull/8058&quot;&gt;#8058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HpackDecoder treats invalid pseudo-headers as stream level errors (&lt;a href=&quot;https://github.com/netty/netty/pull/8046&quot;&gt;#8046&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to cache keymaterial when using OpenSSL (&lt;a href=&quot;https://github.com/netty/netty/pull/8036&quot;&gt;#8036&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Epoll and Kqueue shouldn&#39;t read by default (&lt;a href=&quot;https://github.com/netty/netty/pull/8024&quot;&gt;#8024&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Defer channelInactive and channelUnregistered events in Http2MultiplexCodec (&lt;a href=&quot;https://github.com/netty/netty/pull/8021&quot;&gt;#8021&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Provide an API for controlling and h2c upgrade response stream in Http2MultiplexCodec (&lt;a href=&quot;https://github.com/netty/netty/pull/7968&quot;&gt;#7968&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix CharSequenceValueConverter.convertToByte implementation for AsciiString (&lt;a href=&quot;https://github.com/netty/netty/pull/7994&quot;&gt;#7994&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Set (and override) websocket handshake headers after custom headers (&lt;a href=&quot;https://github.com/netty/netty/pull/7975&quot;&gt;#7975&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to schedule tasks up to Long.MAX_VALUE (&lt;a href=&quot;https://github.com/netty/netty/pull/7972&quot;&gt;#7972&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly let Http2UnkownFrame extend HttpStreamFrame (&lt;a href=&quot;https://github.com/netty/netty/pull/7976&quot;&gt;#7976&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Read until all data is consumed when EOF is detected  (&lt;a href=&quot;https://github.com/netty/netty/pull/7961&quot;&gt;#7961&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Propagate pong frames in WebSocketProtocolHandler (&lt;a href=&quot;https://github.com/netty/netty/pull/7955&quot;&gt;#7955&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove HpackDecoder.maxHeaderListSizeGoAway (&lt;a href=&quot;https://github.com/netty/netty/pull/7911&quot;&gt;#7911&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Guard against calling malloc(0) when create ByteBuffer (&lt;a href=&quot;https://github.com/netty/netty/pull/7948&quot;&gt;#7948&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly clear the error stack in all cases when using ReferenceCountedOpenSslEngine (&lt;a href=&quot;https://github.com/netty/netty/pull/7941&quot;&gt;#7941&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly copy existing elements when CodecOutputList.add(index, element) is used (&lt;a href=&quot;https://github.com/netty/netty/pull/7931&quot;&gt;#7931&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for  &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.26.Final&quot;&gt;4.1.26.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Special notes&lt;/h1&gt;

&lt;p&gt;While this release contains many different changes, some deserve some more details.&lt;/p&gt;

&lt;h1&gt;Optimize performance when using &lt;code&gt;SslProvider.OPENSSL&lt;/code&gt; and &lt;code&gt;SslProvider.OPENSSL_REFCNT&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;While you already could observe a huge performance win using our native SSL implementation we improved handshake times a lot in this release by caching the keymaterial during handshakes.&lt;/p&gt;

&lt;p&gt;While we can do this automatically when you configure the &lt;code&gt;SslContext&lt;/code&gt; to use files we can not do this without risk when you use a &lt;code&gt;KeyManagerFactory&lt;/code&gt; for doing so. If you do so please consider either using &lt;code&gt;OpenSslX509KeyManagerFactory&lt;/code&gt; or &lt;code&gt;OpenSslCachingX509KeyManagerFactory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The performance win we could observe were reducing the handshake latency by ~30-40% and the CPU usage during handshaking by up to 50%.&lt;/p&gt;

&lt;p&gt;How much improvement you see highly depends on your service and the length of the used keychain etc so take the numbers of some caution.&lt;/p&gt;

&lt;h1&gt;netty-tcnative compatibility&lt;/h1&gt;

&lt;p&gt;Please ensure you also update your netty-tcnative release to 2.0.12.Final as this release is not compatible with earlier releases of netty-tcnative.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bennett-Lynch&quot;&gt;@Bennett-Lynch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/caorong&quot;&gt;@caorong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carryxyh&quot;&gt;@carryxyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cchantep&quot;&gt;@cchantep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/DiegoEliasCosta&quot;&gt;@DiegoEliasCosta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dschobel&quot;&gt;@dschobel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ewie&quot;&gt;@ewie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hc-codersatlas&quot;&gt;@hc-codersatlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/henrik-lindqvist&quot;&gt;@henrik-lindqvist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jasontedor&quot;&gt;@jasontedor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jianyuanzh&quot;&gt;@jianyuanzh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jozefbalga&quot;&gt;@jozefbalga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jo-kin&quot;&gt;@jo-kin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kachayev&quot;&gt;@kachayev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mosesn&quot;&gt;@mosesn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nicktrav&quot;&gt;@nicktrav&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;@njhill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ossdev07&quot;&gt;@ossdev07&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pifuant&quot;&gt;@pifuant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/radai-rosenblatt&quot;&gt;@radai-rosenblatt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rockwotj&quot;&gt;@rockwotj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rkapsi&quot;&gt;@rkapsi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seut&quot;&gt;@seut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/smlance&quot;&gt;@smlance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tbrooks8&quot;&gt;@tbrooks8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tomerd&quot;&gt;@tomerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vsabella&quot;&gt;@vsabella&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zekaryu&quot;&gt;@zekaryu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
<entry>
<id>http://netty.io/news/2018/05/14/4-1-25-Final.html</id>
<title>Netty 4.1.25.Final released</title>
<updated>2021-06-16T12:23:26+00:00</updated>
<published>2018-05-14T00:00:00+00:00</published>
<link href="http://netty.io/news/2018/05/14/4-1-25-Final.html" rel="alternate" type="text/html" />
<author>
<name>normanmaurer</name>
</author>
<summary>
I'm happy to announce the latest release of the 4.1 series.

These releases contains bug-fixes, performance enhancements and feature so we encourage everyone to upgrade.

The most important changes are:


Always follow cnames even if a matching A or AAAA record was found. (#7919)
DefaultDnsCache should store more then one Entry per hostname. (#7906)
Allow to disable native transport and native ssl support via system property. (#7903)
Add null-check to Htt2FrameCodec#consumeBytes. (#7899)
Fix IllegalReferenceCountException when using Http2MultiplexCodec and a DefaultHttp2GoAwayFrame with a non empty ByteBuffer is received. (#7894)
Correctly handle responses with status 205 and payload. (#7891)
Respect MAX_MESSAGES_PER_READ in LocalChannel / LocalServerChannel. (#7885)
Implement isWritable and ensureWritable on ReadOnlyByteBufferBuf....
</summary>
<content type="html">
&lt;p&gt;I&#39;m happy to announce the latest release of the 4.1 series.&lt;/p&gt;

&lt;p&gt;These releases contains bug-fixes, performance enhancements and feature so we encourage everyone to upgrade.&lt;/p&gt;

&lt;p&gt;The most important changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always follow cnames even if a matching A or AAAA record was found. (&lt;a href=&quot;https://github.com/netty/netty/pull/7919&quot;&gt;#7919&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;DefaultDnsCache should store more then one Entry per hostname. (&lt;a href=&quot;https://github.com/netty/netty/pull/7906&quot;&gt;#7906&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow to disable native transport and native ssl support via system property. (&lt;a href=&quot;https://github.com/netty/netty/pull/7903&quot;&gt;#7903&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add null-check to Htt2FrameCodec#consumeBytes. (&lt;a href=&quot;https://github.com/netty/netty/pull/7899&quot;&gt;#7899&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix IllegalReferenceCountException when using Http2MultiplexCodec and a DefaultHttp2GoAwayFrame with a non empty ByteBuffer is received. (&lt;a href=&quot;https://github.com/netty/netty/pull/7894&quot;&gt;#7894&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Correctly handle responses with status 205 and payload. (&lt;a href=&quot;https://github.com/netty/netty/pull/7891&quot;&gt;#7891&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Respect MAX_MESSAGES_PER_READ in LocalChannel / LocalServerChannel. (&lt;a href=&quot;https://github.com/netty/netty/pull/7885&quot;&gt;#7885&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Implement isWritable and ensureWritable on ReadOnlyByteBufferBuf. (&lt;a href=&quot;https://github.com/netty/netty/pull/7883&quot;&gt;#7883&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update DatagramPacket.recipient() to return the actual destination IP. (&lt;a href=&quot;https://github.com/netty/netty/pull/7879&quot;&gt;#7879&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Set the correct stream header state for h2c upgrades. (&lt;a href=&quot;https://github.com/netty/netty/pull/7848&quot;&gt;#7848&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the details and all changes, please browse our issue tracker for  &lt;a href=&quot;https://github.com/netty/netty/issues?q=is%3Aclosed+milestone%3A4.1.25.Final&quot;&gt;4.1.25.Final&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Every idea and bug-report counts and so we thought it is worth mentioning those who helped in this area. Please report an unintended omission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bryce-anderson&quot;&gt;@bryce-anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dschobel&quot;&gt;@dschobel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ejona86&quot;&gt;@ejona86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kachayev&quot;&gt;@kachayev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/karlpauls&quot;&gt;@karlpauls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubuzetto&quot;&gt;@kubuzetto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lutovich&quot;&gt;@lutovich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mosesn&quot;&gt;@mosesn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MottoX&quot;&gt;@MottoX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/normanmaurer&quot;&gt;@normanmaurer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RikkiGibson&quot;&gt;@RikkiGibson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Scottmitch&quot;&gt;@Scottmitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trustin&quot;&gt;@trustin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/windie&quot;&gt;@windie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</content>
</entry>
</feed>
